// DO NOT EDIT
// Generated by JFlex 1.9.1 http://jflex.de/
// source: jflex&cup/LexerDashb.jflex

// meta characters:  |  (  )  {  }  [  ]  < >  \  .  *  +  ?  ^  $  / . " ~ !

// codigo antes de la clase lexer
package josq.lenguajes.automatas;

import java.io.Reader;

//import java_cup.runtime.*;
import java_cup.runtime.Symbol;
import java_cup.runtime.SymbolFactory;
import java_cup.runtime.ComplexSymbolFactory;
import java_cup.runtime.ComplexSymbolFactory.Location;
import java_cup.runtime.DefaultSymbolFactory;



@SuppressWarnings("fallthrough")
public class LexerDashb implements java_cup.runtime.Scanner {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\u10ff\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\2\1\1\0\2\1\22\0\1\1\1\0\1\2"+
    "\1\3\10\0\1\4\2\5\1\6\12\7\1\10\2\0"+
    "\1\11\1\0\1\11\1\0\1\12\1\13\1\14\2\13"+
    "\1\15\5\5\1\16\3\5\1\17\2\5\1\20\7\5"+
    "\1\21\1\0\1\22\1\0\1\5\1\0\1\23\1\24"+
    "\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\5"+
    "\1\34\1\35\1\36\1\37\1\40\1\41\1\5\1\42"+
    "\1\43\1\44\1\45\1\46\1\47\1\50\1\51\1\52"+
    "\1\53\1\0\1\54\53\0\1\55\27\0\1\55\7\0"+
    "\1\55\3\0\1\55\3\0\1\55\1\0\1\55\6\0"+
    "\1\55\6\0\1\55\7\0\1\55\3\0\1\55\3\0"+
    "\1\55\1\0\1\55\6\0\1\55\u0105\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[512];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\1\1\3\1\4\1\5\1\6"+
    "\1\7\1\10\22\0\1\11\25\0\1\11\2\0\1\11"+
    "\30\0\1\12\2\0\1\13\40\0\1\11\7\0\1\11"+
    "\4\0\2\11\1\0\1\11\7\0\2\11\2\0\1\14"+
    "\7\0\1\15\1\0\1\11\3\0\1\16\1\0\1\17"+
    "\2\0\1\20\2\11\6\0\1\21\1\0\1\22\4\0"+
    "\2\11\3\0\1\23\2\0\1\11\1\0\1\24\1\0"+
    "\1\25\2\0\1\26\7\0\1\27\1\0\1\30\5\0"+
    "\1\31\3\0\1\11\3\0\1\11\1\0\1\32\1\11"+
    "\6\0\1\33\1\11\3\0\1\34\1\0\1\35\1\0"+
    "\1\11\4\0\1\36\1\0\1\11\2\0\1\37\2\11"+
    "\1\0\1\11\1\0\1\40\2\0\1\41\1\0\1\42"+
    "\2\0\1\43\4\0\2\11\1\0\1\44\1\0\1\45";

  private static int [] zzUnpackAction() {
    int [] result = new int[270];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\56\0\134\0\212\0\56\0\270\0\56\0\56"+
    "\0\56\0\56\0\346\0\u0114\0\u0142\0\u0170\0\u019e\0\u01cc"+
    "\0\u01fa\0\u0228\0\u0256\0\u0284\0\u02b2\0\u02e0\0\u030e\0\u033c"+
    "\0\u036a\0\u0398\0\u03c6\0\u03f4\0\56\0\u0422\0\u0450\0\u047e"+
    "\0\u04ac\0\u04da\0\u0508\0\u0536\0\u0564\0\u0592\0\u05c0\0\u05ee"+
    "\0\u061c\0\u064a\0\u0678\0\u06a6\0\u06d4\0\u0702\0\u0730\0\u075e"+
    "\0\u078c\0\u07ba\0\u07e8\0\u0816\0\u0844\0\u0872\0\u08a0\0\u08ce"+
    "\0\u08fc\0\u092a\0\u0958\0\u0986\0\u09b4\0\u09e2\0\u0a10\0\u0a3e"+
    "\0\u0a6c\0\u0a9a\0\u0ac8\0\u0af6\0\u0b24\0\u0b52\0\u0b80\0\u0bae"+
    "\0\u0bdc\0\u0c0a\0\u0c38\0\u0c66\0\u0c94\0\u07e8\0\56\0\u0cc2"+
    "\0\u0872\0\56\0\u0cf0\0\u0d1e\0\u0d4c\0\u0d7a\0\u0da8\0\u0dd6"+
    "\0\u0e04\0\u0e32\0\u0e60\0\u0e8e\0\u0ebc\0\u0eea\0\u0f18\0\u0f46"+
    "\0\u0f74\0\u0fa2\0\u0fd0\0\u0ffe\0\u102c\0\u105a\0\u1088\0\u10b6"+
    "\0\u10e4\0\u1112\0\u1140\0\u116e\0\u119c\0\u11ca\0\u11f8\0\u1226"+
    "\0\u1254\0\u1282\0\u12b0\0\u12de\0\u130c\0\u133a\0\u1368\0\u1396"+
    "\0\u13c4\0\u13f2\0\u1420\0\u144e\0\u147c\0\u14aa\0\u14d8\0\u1506"+
    "\0\u1534\0\u1562\0\u1590\0\u15be\0\u15ec\0\u161a\0\u1648\0\u1676"+
    "\0\u16a4\0\u16d2\0\u1700\0\u172e\0\u175c\0\u12b0\0\56\0\u178a"+
    "\0\u17b8\0\u17e6\0\u1814\0\u1842\0\u1870\0\u1420\0\56\0\u189e"+
    "\0\u18cc\0\u18fa\0\u1928\0\u1506\0\56\0\u1534\0\56\0\u1956"+
    "\0\u1590\0\56\0\u1984\0\u19b2\0\u19e0\0\u1a0e\0\u1a3c\0\u1a6a"+
    "\0\u1a98\0\u1700\0\56\0\u172e\0\56\0\u1ac6\0\u1af4\0\u1b22"+
    "\0\u1b50\0\u1b7e\0\u1bac\0\u1bda\0\u1c08\0\u18cc\0\56\0\u1c36"+
    "\0\u1c64\0\u1c92\0\u1984\0\56\0\u19b2\0\56\0\u1cc0\0\u1cee"+
    "\0\56\0\u1d1c\0\u1d4a\0\u1d78\0\u1da6\0\u1dd4\0\u1e02\0\u1b7e"+
    "\0\56\0\u1bac\0\56\0\u1e30\0\u1e5e\0\u1e8c\0\u1eba\0\u1c92"+
    "\0\56\0\u1ee8\0\u1f16\0\u1f44\0\u1f72\0\u1fa0\0\u1fce\0\u1ffc"+
    "\0\u202a\0\u2058\0\56\0\u2086\0\u20b4\0\u20e2\0\u2110\0\u213e"+
    "\0\u216c\0\u1f72\0\56\0\u219a\0\u21c8\0\u21f6\0\u202a\0\56"+
    "\0\u2086\0\56\0\u2224\0\u2252\0\u2280\0\u22ae\0\u22dc\0\u219a"+
    "\0\56\0\u230a\0\u2338\0\u2366\0\u2252\0\56\0\u2394\0\u23c2"+
    "\0\u23f0\0\u241e\0\u2338\0\56\0\u244c\0\u2394\0\56\0\u23c2"+
    "\0\56\0\u247a\0\u241e\0\56\0\u24a8\0\u24d6\0\u2504\0\u2532"+
    "\0\u2560\0\u258e\0\u2560\0\56\0\u258e\0\56";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[270];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\2\1\5\2\2\1\6\11\2"+
    "\1\7\1\10\30\2\1\11\1\12\1\2\57\0\1\3"+
    "\55\0\1\13\1\0\1\14\2\15\1\0\1\15\2\0"+
    "\7\15\2\0\1\15\1\16\1\17\1\20\1\15\1\21"+
    "\1\15\1\22\1\23\1\24\1\25\1\15\1\26\1\15"+
    "\1\27\1\15\1\30\1\31\1\15\1\32\1\15\1\33"+
    "\1\34\1\15\2\0\1\15\7\0\1\6\47\0\1\13"+
    "\1\35\1\14\2\15\1\0\1\15\2\0\7\15\2\0"+
    "\1\15\1\16\1\17\1\20\1\15\1\21\1\15\1\22"+
    "\1\23\1\24\1\25\1\15\1\26\1\15\1\27\1\15"+
    "\1\30\1\31\1\15\1\32\1\15\1\33\1\34\1\15"+
    "\2\0\1\15\7\0\1\36\2\0\4\36\5\0\6\36"+
    "\26\0\1\15\1\35\1\0\2\15\1\0\1\15\2\0"+
    "\7\15\2\0\30\15\2\0\1\15\1\0\1\15\1\35"+
    "\1\0\2\15\1\0\1\15\2\0\7\15\2\0\1\37"+
    "\27\15\2\0\1\15\1\0\1\15\1\35\1\0\2\15"+
    "\1\0\1\15\2\0\7\15\2\0\1\40\6\15\1\41"+
    "\5\15\1\42\12\15\2\0\1\15\1\0\1\15\1\35"+
    "\1\0\2\15\1\0\1\15\2\0\7\15\2\0\1\43"+
    "\3\15\1\44\23\15\2\0\1\15\1\0\1\15\1\35"+
    "\1\0\2\15\1\0\1\15\2\0\7\15\2\0\15\15"+
    "\1\45\12\15\2\0\1\15\1\0\1\15\1\35\1\0"+
    "\2\15\1\0\1\15\2\0\7\15\2\0\4\15\1\46"+
    "\14\15\1\47\6\15\2\0\1\15\1\0\1\15\1\35"+
    "\1\0\2\15\1\0\1\15\2\0\7\15\2\0\2\15"+
    "\1\50\25\15\2\0\1\15\1\0\1\15\1\35\1\0"+
    "\2\15\1\0\1\15\2\0\7\15\2\0\4\15\1\51"+
    "\23\15\2\0\1\15\1\0\1\15\1\35\1\0\2\15"+
    "\1\0\1\15\2\0\7\15\2\0\1\52\3\15\1\53"+
    "\3\15\1\54\17\15\2\0\1\15\1\0\1\15\1\35"+
    "\1\0\2\15\1\0\1\15\2\0\7\15\2\0\1\55"+
    "\27\15\2\0\1\15\1\0\1\15\1\35\1\0\2\15"+
    "\1\0\1\15\2\0\7\15\2\0\15\15\1\56\12\15"+
    "\2\0\1\15\1\0\1\15\1\35\1\0\2\15\1\0"+
    "\1\15\2\0\7\15\2\0\10\15\1\57\17\15\2\0"+
    "\1\15\1\0\1\15\1\35\1\0\2\15\1\0\1\15"+
    "\2\0\7\15\2\0\10\15\1\60\17\15\2\0\1\15"+
    "\1\0\1\15\1\35\1\0\2\15\1\0\1\15\2\0"+
    "\7\15\2\0\1\61\27\15\2\0\1\15\1\0\1\62"+
    "\1\63\1\0\2\15\1\0\1\15\2\0\1\64\6\15"+
    "\2\0\30\15\2\0\1\15\1\0\1\65\1\66\1\0"+
    "\2\15\1\0\1\15\2\0\1\67\6\15\2\0\30\15"+
    "\2\0\1\15\7\0\1\70\2\0\4\70\5\0\6\70"+
    "\26\0\1\15\1\35\1\0\2\15\1\0\1\15\2\0"+
    "\7\15\2\0\2\15\1\71\25\15\2\0\1\15\1\0"+
    "\1\15\1\35\1\0\2\15\1\0\1\15\2\0\7\15"+
    "\2\0\21\15\1\72\6\15\2\0\1\15\1\0\1\15"+
    "\1\35\1\0\2\15\1\0\1\15\2\0\7\15\2\0"+
    "\1\73\27\15\2\0\1\15\1\0\1\15\1\35\1\0"+
    "\2\15\1\0\1\15\2\0\7\15\2\0\12\15\1\74"+
    "\3\15\1\75\11\15\2\0\1\15\1\0\1\15\1\35"+
    "\1\0\2\15\1\0\1\15\2\0\7\15\2\0\21\15"+
    "\1\76\6\15\2\0\1\15\1\0\1\15\1\35\1\0"+
    "\2\15\1\0\1\15\2\0\7\15\2\0\20\15\1\77"+
    "\7\15\2\0\1\15\1\0\1\15\1\35\1\0\2\15"+
    "\1\0\1\15\2\0\7\15\2\0\14\15\1\100\1\101"+
    "\12\15\2\0\1\15\1\0\1\15\1\35\1\0\2\15"+
    "\1\0\1\15\2\0\7\15\2\0\1\102\27\15\2\0"+
    "\1\15\1\0\1\15\1\35\1\0\2\15\1\0\1\15"+
    "\2\0\7\15\2\0\21\15\1\103\6\15\2\0\1\15"+
    "\1\0\1\15\1\35\1\0\2\15\1\0\1\15\2\0"+
    "\7\15\2\0\15\15\1\104\12\15\2\0\1\15\1\0"+
    "\1\15\1\35\1\0\2\15\1\0\1\15\2\0\7\15"+
    "\2\0\26\15\1\105\1\15\2\0\1\15\1\0\1\15"+
    "\1\35\1\0\2\15\1\0\1\15\2\0\7\15\2\0"+
    "\1\15\1\106\26\15\2\0\1\15\1\0\1\15\1\35"+
    "\1\0\2\15\1\0\1\15\2\0\7\15\2\0\6\15"+
    "\1\107\21\15\2\0\1\15\1\0\1\15\1\35\1\0"+
    "\2\15\1\0\1\15\2\0\7\15\2\0\14\15\1\110"+
    "\13\15\2\0\1\15\1\0\1\15\1\35\1\0\2\15"+
    "\1\0\1\15\2\0\7\15\2\0\13\15\1\111\14\15"+
    "\2\0\1\15\1\0\1\15\1\35\1\0\2\15\1\0"+
    "\1\15\2\0\7\15\2\0\10\15\1\112\17\15\2\0"+
    "\1\15\1\0\1\15\1\35\1\0\2\15\1\0\1\15"+
    "\2\0\7\15\2\0\27\15\1\113\2\0\1\15\1\0"+
    "\1\15\1\35\1\0\2\15\1\0\1\15\2\0\7\15"+
    "\2\0\21\15\1\114\6\15\2\0\1\15\1\0\1\15"+
    "\1\35\1\0\2\15\1\0\1\15\2\0\7\15\2\0"+
    "\12\15\1\115\15\15\2\0\1\15\1\0\1\62\1\63"+
    "\1\0\2\15\1\0\1\15\2\0\7\15\2\0\30\15"+
    "\2\0\1\15\1\0\1\116\6\0\1\117\46\0\1\15"+
    "\1\35\1\0\2\15\1\0\1\15\2\0\7\15\2\0"+
    "\25\15\1\120\2\15\2\0\1\15\1\0\1\65\1\66"+
    "\1\0\2\15\1\0\1\15\2\0\7\15\2\0\30\15"+
    "\2\0\1\15\1\0\1\121\6\0\1\122\46\0\1\15"+
    "\1\35\1\0\2\15\1\0\1\15\2\0\7\15\2\0"+
    "\25\15\1\123\2\15\2\0\1\15\7\0\1\124\2\0"+
    "\4\124\5\0\6\124\26\0\1\15\1\35\1\0\2\15"+
    "\1\0\1\15\2\0\7\15\2\0\11\15\1\125\16\15"+
    "\2\0\1\15\1\0\1\15\1\35\1\0\2\15\1\0"+
    "\1\15\2\0\7\15\2\0\4\15\1\126\23\15\2\0"+
    "\1\15\1\0\1\15\1\35\1\0\2\15\1\0\1\15"+
    "\2\0\7\15\2\0\17\15\1\127\10\15\2\0\1\15"+
    "\1\0\1\15\1\35\1\0\2\15\1\0\1\15\2\0"+
    "\7\15\2\0\15\15\1\130\12\15\2\0\1\15\1\0"+
    "\1\15\1\35\1\0\2\15\1\0\1\15\2\0\7\15"+
    "\2\0\26\15\1\131\1\15\2\0\1\15\1\0\1\15"+
    "\1\35\1\0\2\15\1\0\1\15\2\0\7\15\2\0"+
    "\1\132\27\15\2\0\1\15\1\0\1\15\1\35\1\0"+
    "\2\15\1\0\1\15\2\0\7\15\2\0\2\15\1\133"+
    "\25\15\2\0\1\15\1\0\1\15\1\35\1\0\2\15"+
    "\1\0\1\15\2\0\7\15\2\0\21\15\1\134\6\15"+
    "\2\0\1\15\1\0\1\15\1\35\1\0\2\15\1\0"+
    "\1\15\2\0\7\15\2\0\21\15\1\135\6\15\2\0"+
    "\1\15\1\0\1\15\1\35\1\0\2\15\1\0\1\15"+
    "\2\0\7\15\2\0\3\15\1\136\24\15\2\0\1\15"+
    "\1\0\1\15\1\35\1\0\2\15\1\0\1\15\2\0"+
    "\7\15\2\0\16\15\1\137\11\15\2\0\1\15\1\0"+
    "\1\15\1\35\1\0\2\15\1\0\1\15\2\0\7\15"+
    "\2\0\14\15\1\140\13\15\2\0\1\15\1\0\1\15"+
    "\1\35\1\0\2\15\1\0\1\15\2\0\7\15\2\0"+
    "\24\15\1\141\3\15\2\0\1\15\1\0\1\15\1\35"+
    "\1\0\2\15\1\0\1\15\2\0\7\15\2\0\4\15"+
    "\1\142\23\15\2\0\1\15\1\0\1\15\1\35\1\0"+
    "\2\15\1\0\1\15\2\0\7\15\2\0\4\15\1\143"+
    "\23\15\2\0\1\15\1\0\1\15\1\35\1\0\2\15"+
    "\1\0\1\15\2\0\7\15\2\0\4\15\1\144\4\15"+
    "\1\145\16\15\2\0\1\15\1\0\1\15\1\35\1\0"+
    "\2\15\1\0\1\15\2\0\7\15\2\0\4\15\1\146"+
    "\23\15\2\0\1\15\1\0\1\15\1\35\1\0\2\15"+
    "\1\0\1\15\2\0\7\15\2\0\14\15\1\147\13\15"+
    "\2\0\1\15\1\0\1\15\1\35\1\0\2\15\1\0"+
    "\1\15\2\0\7\15\2\0\4\15\1\150\23\15\2\0"+
    "\1\15\1\0\1\15\1\35\1\0\2\15\1\0\1\15"+
    "\2\0\7\15\2\0\12\15\1\151\15\15\2\0\1\15"+
    "\1\0\1\15\1\35\1\0\2\15\1\0\1\15\2\0"+
    "\7\15\2\0\22\15\1\152\5\15\2\0\1\15\1\0"+
    "\1\15\1\35\1\0\2\15\1\0\1\15\2\0\7\15"+
    "\2\0\10\15\1\153\17\15\2\0\1\15\1\0\1\15"+
    "\1\35\1\0\2\15\1\0\1\15\2\0\7\15\2\0"+
    "\10\15\1\154\17\15\2\0\1\15\7\0\1\155\2\0"+
    "\4\155\5\0\6\155\26\0\1\15\1\35\1\0\2\15"+
    "\1\0\1\15\2\0\7\15\2\0\6\15\1\156\21\15"+
    "\2\0\1\15\1\0\1\15\1\35\1\0\2\15\1\0"+
    "\1\15\2\0\7\15\2\0\6\15\1\157\21\15\2\0"+
    "\1\15\1\0\1\15\1\35\1\0\2\15\1\0\1\15"+
    "\2\0\7\15\2\0\21\15\1\160\6\15\2\0\1\15"+
    "\1\0\1\15\1\35\1\0\2\15\1\0\1\15\2\0"+
    "\7\15\2\0\17\15\1\161\10\15\2\0\1\15\1\0"+
    "\1\15\1\35\1\0\2\15\1\0\1\15\2\0\7\15"+
    "\2\0\17\15\1\162\10\15\2\0\1\15\1\0\1\132"+
    "\1\163\1\0\2\15\1\0\1\15\2\0\7\15\2\0"+
    "\30\15\2\0\1\15\1\0\1\15\1\35\1\0\2\15"+
    "\1\0\1\15\2\0\7\15\2\0\17\15\1\164\10\15"+
    "\2\0\1\15\1\0\1\15\1\35\1\0\2\15\1\0"+
    "\1\15\2\0\3\15\1\165\2\15\1\166\2\0\30\15"+
    "\2\0\1\15\1\0\1\15\1\35\1\0\2\15\1\0"+
    "\1\15\2\0\7\15\2\0\4\15\1\167\23\15\2\0"+
    "\1\15\1\0\1\15\1\35\1\0\2\15\1\0\1\15"+
    "\2\0\7\15\2\0\4\15\1\170\23\15\2\0\1\15"+
    "\1\0\1\15\1\35\1\0\2\15\1\0\1\15\1\171"+
    "\1\0\7\15\2\0\20\15\1\172\7\15\2\0\1\15"+
    "\1\0\1\140\1\173\1\0\2\15\1\0\1\15\2\0"+
    "\7\15\2\0\30\15\2\0\1\15\1\0\1\15\1\35"+
    "\1\0\2\15\1\0\1\15\2\0\7\15\2\0\15\15"+
    "\1\174\12\15\2\0\1\15\1\0\1\15\1\35\1\0"+
    "\2\15\1\0\1\15\2\0\7\15\2\0\12\15\1\175"+
    "\15\15\2\0\1\15\1\0\1\15\1\35\1\0\2\15"+
    "\1\0\1\15\2\0\7\15\2\0\14\15\1\176\13\15"+
    "\2\0\1\15\1\0\1\15\1\35\1\0\2\15\1\0"+
    "\1\15\2\0\6\15\1\177\2\0\30\15\2\0\1\15"+
    "\1\0\1\145\1\200\1\0\2\15\1\0\1\15\2\0"+
    "\7\15\2\0\30\15\2\0\1\15\1\0\1\146\1\201"+
    "\1\0\2\15\1\0\1\15\2\0\7\15\2\0\30\15"+
    "\2\0\1\15\1\0\1\15\1\35\1\0\2\15\1\0"+
    "\1\15\2\0\7\15\2\0\21\15\1\202\6\15\2\0"+
    "\1\15\1\0\1\150\1\203\1\0\2\15\1\0\1\15"+
    "\2\0\7\15\2\0\30\15\2\0\1\15\1\0\1\15"+
    "\1\35\1\0\2\15\1\0\1\15\2\0\7\15\2\0"+
    "\4\15\1\204\23\15\2\0\1\15\1\0\1\15\1\35"+
    "\1\0\2\15\1\0\1\15\2\0\7\15\2\0\4\15"+
    "\1\205\23\15\2\0\1\15\1\0\1\15\1\35\1\0"+
    "\2\15\1\0\1\15\2\0\7\15\2\0\20\15\1\206"+
    "\7\15\2\0\1\15\1\0\1\15\1\35\1\0\2\15"+
    "\1\0\1\15\2\0\7\15\2\0\20\15\1\207\7\15"+
    "\2\0\1\15\7\0\1\210\2\0\4\210\5\0\6\210"+
    "\26\0\1\15\1\35\1\0\2\15\1\0\1\15\2\0"+
    "\7\15\2\0\17\15\1\211\10\15\2\0\1\15\1\0"+
    "\1\15\1\35\1\0\2\15\1\0\1\15\2\0\7\15"+
    "\2\0\15\15\1\212\12\15\2\0\1\15\1\0\1\160"+
    "\1\213\1\0\2\15\1\0\1\15\2\0\7\15\2\0"+
    "\30\15\2\0\1\15\1\0\1\161\1\214\1\0\2\15"+
    "\1\0\1\15\2\0\7\15\2\0\30\15\2\0\1\15"+
    "\1\0\1\15\1\35\1\0\2\15\1\0\1\15\2\0"+
    "\7\15\2\0\10\15\1\215\17\15\2\0\1\15\1\0"+
    "\1\216\6\0\1\217\46\0\1\15\1\35\1\0\2\15"+
    "\1\0\1\15\2\0\7\15\2\0\10\15\1\220\17\15"+
    "\2\0\1\15\1\0\1\15\1\35\1\0\2\15\1\0"+
    "\1\15\2\0\7\15\2\0\1\221\27\15\2\0\1\15"+
    "\1\0\1\15\1\35\1\0\2\15\1\0\1\15\2\0"+
    "\7\15\2\0\10\15\1\222\17\15\2\0\1\15\1\0"+
    "\1\15\1\35\1\0\2\15\1\0\1\15\2\0\7\15"+
    "\2\0\17\15\1\223\10\15\2\0\1\15\1\0\1\15"+
    "\1\35\1\0\2\15\1\0\1\15\2\0\7\15\2\0"+
    "\17\15\1\224\10\15\2\0\1\15\6\0\1\225\50\0"+
    "\1\15\1\35\1\0\2\15\1\0\1\15\1\171\1\0"+
    "\7\15\2\0\30\15\2\0\1\15\1\0\1\226\6\0"+
    "\1\227\46\0\1\15\1\35\1\0\2\15\1\0\1\15"+
    "\2\0\7\15\2\0\17\15\1\230\10\15\2\0\1\15"+
    "\1\0\1\175\1\231\1\0\2\15\1\0\1\15\2\0"+
    "\7\15\2\0\30\15\2\0\1\15\1\0\1\15\1\35"+
    "\1\0\2\15\1\0\1\15\2\0\7\15\2\0\3\15"+
    "\1\232\24\15\2\0\1\15\1\0\1\15\1\35\1\0"+
    "\2\15\1\0\1\15\2\0\7\15\2\0\21\15\1\233"+
    "\6\15\2\0\1\15\1\0\1\234\6\0\1\235\46\0"+
    "\1\236\6\0\1\237\46\0\1\15\1\35\1\0\2\15"+
    "\1\0\1\15\2\0\7\15\2\0\20\15\1\240\7\15"+
    "\2\0\1\15\1\0\1\241\6\0\1\242\46\0\1\204"+
    "\1\243\1\0\2\15\1\0\1\15\2\0\7\15\2\0"+
    "\30\15\2\0\1\15\1\0\1\205\1\244\1\0\2\15"+
    "\1\0\1\15\2\0\7\15\2\0\30\15\2\0\1\15"+
    "\1\0\1\15\1\35\1\0\2\15\1\0\1\15\2\0"+
    "\4\15\1\245\2\15\2\0\30\15\2\0\1\15\1\0"+
    "\1\15\1\35\1\0\2\15\1\0\1\15\2\0\4\15"+
    "\1\246\2\15\2\0\30\15\2\0\1\15\7\0\1\247"+
    "\2\0\4\247\5\0\6\247\26\0\1\15\1\35\1\0"+
    "\2\15\1\0\1\15\2\0\7\15\2\0\15\15\1\250"+
    "\12\15\2\0\1\15\1\0\1\15\1\35\1\0\2\15"+
    "\1\0\1\15\2\0\7\15\2\0\17\15\1\251\10\15"+
    "\2\0\1\15\1\0\1\252\6\0\1\253\46\0\1\254"+
    "\6\0\1\255\46\0\1\15\1\35\1\0\2\15\1\0"+
    "\1\15\2\0\7\15\2\0\6\15\1\256\21\15\2\0"+
    "\1\15\1\0\1\15\1\35\1\0\2\15\1\0\1\15"+
    "\2\0\7\15\2\0\16\15\1\257\11\15\2\0\1\15"+
    "\1\0\1\15\1\35\1\0\2\15\1\0\1\15\2\0"+
    "\7\15\2\0\13\15\1\260\14\15\2\0\1\15\1\0"+
    "\1\15\1\35\1\0\2\15\1\0\1\15\2\0\7\15"+
    "\2\0\27\15\1\261\2\0\1\15\1\0\1\223\1\262"+
    "\1\0\2\15\1\0\1\15\2\0\7\15\2\0\30\15"+
    "\2\0\1\15\1\0\1\224\1\263\1\0\2\15\1\0"+
    "\1\15\2\0\7\15\2\0\30\15\2\0\1\15\6\0"+
    "\1\264\50\0\1\15\1\35\1\0\2\15\1\0\1\15"+
    "\2\0\7\15\2\0\3\15\1\265\24\15\2\0\1\15"+
    "\1\0\1\266\6\0\1\267\46\0\1\15\1\35\1\0"+
    "\2\15\1\0\1\15\2\0\5\15\1\270\1\15\2\0"+
    "\30\15\2\0\1\15\1\0\1\15\1\35\1\0\2\15"+
    "\1\0\1\15\2\0\7\15\2\0\26\15\1\271\1\15"+
    "\2\0\1\15\1\0\1\240\1\272\1\0\2\15\1\0"+
    "\1\15\2\0\7\15\2\0\30\15\2\0\1\15\1\0"+
    "\1\273\6\0\1\274\46\0\1\275\6\0\1\276\46\0"+
    "\1\15\1\35\1\0\2\15\1\0\1\15\2\0\7\15"+
    "\2\0\1\277\27\15\2\0\1\15\1\0\1\15\1\35"+
    "\1\0\2\15\1\0\1\15\2\0\7\15\2\0\1\300"+
    "\27\15\2\0\1\15\1\0\1\247\1\301\54\0\1\15"+
    "\1\35\1\0\2\15\1\0\1\15\2\0\7\15\2\0"+
    "\22\15\1\302\5\15\2\0\1\15\1\0\1\15\1\35"+
    "\1\0\2\15\1\0\1\15\2\0\7\15\2\0\26\15"+
    "\1\303\1\15\2\0\1\15\1\0\1\15\1\35\1\0"+
    "\2\15\1\0\1\15\2\0\7\15\2\0\7\15\1\304"+
    "\20\15\2\0\1\15\1\0\1\15\1\35\1\0\2\15"+
    "\1\0\1\15\2\0\7\15\2\0\21\15\1\305\6\15"+
    "\2\0\1\15\1\0\1\15\1\35\1\0\2\15\1\0"+
    "\1\15\2\0\7\15\2\0\10\15\1\306\17\15\2\0"+
    "\1\15\1\0\1\15\1\35\1\0\2\15\1\0\1\15"+
    "\2\0\7\15\2\0\4\15\1\307\23\15\2\0\1\15"+
    "\1\0\1\310\6\0\1\311\46\0\1\312\6\0\1\313"+
    "\52\0\14\314\2\0\30\314\4\0\1\15\1\35\1\0"+
    "\2\15\1\0\1\15\2\0\7\15\2\0\20\15\1\315"+
    "\7\15\2\0\1\15\1\0\1\15\1\35\1\0\2\15"+
    "\1\0\1\15\2\0\7\15\2\0\15\15\1\316\12\15"+
    "\2\0\1\15\1\0\1\15\1\35\1\0\2\15\1\0"+
    "\1\15\2\0\7\15\2\0\12\15\1\317\15\15\2\0"+
    "\1\15\1\0\1\320\6\0\1\321\46\0\1\15\1\35"+
    "\1\0\2\15\1\0\1\15\2\0\7\15\2\0\1\15"+
    "\1\322\26\15\2\0\1\15\1\0\1\15\1\35\1\0"+
    "\2\15\1\0\1\15\2\0\7\15\2\0\1\15\1\323"+
    "\26\15\2\0\1\15\1\0\1\15\1\35\1\0\2\15"+
    "\1\0\1\15\2\0\7\15\2\0\14\15\1\324\13\15"+
    "\2\0\1\15\1\0\1\303\1\325\1\0\2\15\1\0"+
    "\1\15\2\0\7\15\2\0\30\15\2\0\1\15\1\0"+
    "\1\15\1\35\1\0\2\15\1\0\1\15\2\0\7\15"+
    "\2\0\21\15\1\326\6\15\2\0\1\15\1\0\1\15"+
    "\1\35\1\0\2\15\1\0\1\15\2\0\7\15\2\0"+
    "\10\15\1\327\17\15\2\0\1\15\1\0\1\15\1\35"+
    "\1\0\2\15\1\0\1\15\2\0\7\15\2\0\12\15"+
    "\1\330\15\15\2\0\1\15\1\0\1\307\1\331\1\0"+
    "\2\15\1\0\1\15\2\0\7\15\2\0\30\15\2\0"+
    "\1\15\1\0\1\332\1\333\2\0\14\314\2\0\30\314"+
    "\4\0\1\315\1\334\1\0\2\15\1\0\1\15\2\0"+
    "\7\15\2\0\30\15\2\0\1\15\1\0\1\15\1\35"+
    "\1\0\2\15\1\0\1\15\2\0\7\15\2\0\20\15"+
    "\1\335\7\15\2\0\1\15\1\0\1\15\1\35\1\0"+
    "\2\15\1\0\1\15\2\0\7\15\2\0\4\15\1\336"+
    "\23\15\2\0\1\15\1\0\1\15\1\35\1\0\2\15"+
    "\1\0\1\15\2\0\7\15\2\0\4\15\1\337\23\15"+
    "\2\0\1\15\1\0\1\15\1\35\1\0\2\15\1\0"+
    "\1\15\2\0\7\15\2\0\4\15\1\340\23\15\2\0"+
    "\1\15\1\0\1\15\1\35\1\0\2\15\1\0\1\15"+
    "\2\0\7\15\2\0\3\15\1\341\24\15\2\0\1\15"+
    "\1\0\1\342\6\0\1\343\46\0\1\326\1\344\1\0"+
    "\2\15\1\0\1\15\2\0\7\15\2\0\30\15\2\0"+
    "\1\15\1\0\1\15\1\35\1\0\2\15\1\0\1\15"+
    "\2\0\7\15\2\0\15\15\1\345\12\15\2\0\1\15"+
    "\1\0\1\15\1\35\1\0\2\15\1\0\1\15\2\0"+
    "\7\15\2\0\26\15\1\346\1\15\2\0\1\15\1\0"+
    "\1\347\6\0\1\350\46\0\1\332\1\333\54\0\1\351"+
    "\6\0\1\352\46\0\1\15\1\35\1\0\2\15\1\0"+
    "\1\15\2\0\7\15\2\0\10\15\1\353\17\15\2\0"+
    "\1\15\1\0\1\336\1\354\1\0\2\15\1\0\1\15"+
    "\2\0\7\15\2\0\30\15\2\0\1\15\1\0\1\15"+
    "\1\35\1\0\2\15\1\0\1\15\2\0\7\15\2\0"+
    "\12\15\1\355\15\15\2\0\1\15\1\0\1\15\1\35"+
    "\1\0\2\15\1\0\1\15\2\0\7\15\2\0\12\15"+
    "\1\356\15\15\2\0\1\15\1\0\1\15\1\35\1\0"+
    "\2\15\1\0\1\15\2\0\2\15\1\357\4\15\2\0"+
    "\30\15\2\0\1\15\1\0\1\360\6\0\1\361\46\0"+
    "\1\15\1\35\1\0\2\15\1\0\1\15\2\0\7\15"+
    "\2\0\14\15\1\362\13\15\2\0\1\15\1\0\1\346"+
    "\1\363\1\0\2\15\1\0\1\15\2\0\7\15\2\0"+
    "\30\15\2\0\1\15\1\0\1\15\1\35\1\0\2\15"+
    "\1\0\1\15\2\0\7\15\2\0\21\15\1\364\6\15"+
    "\2\0\1\15\1\0\1\365\6\0\1\366\46\0\1\355"+
    "\1\367\1\0\2\15\1\0\1\15\2\0\7\15\2\0"+
    "\30\15\2\0\1\15\1\0\1\356\1\370\1\0\2\15"+
    "\1\0\1\15\2\0\7\15\2\0\30\15\2\0\1\15"+
    "\1\0\1\15\1\35\1\0\2\15\1\0\1\15\2\0"+
    "\7\15\2\0\15\15\1\371\12\15\2\0\1\15\1\0"+
    "\1\362\1\372\1\0\2\15\1\0\1\15\2\0\7\15"+
    "\2\0\30\15\2\0\1\15\1\0\1\373\6\0\1\374"+
    "\46\0\1\15\1\35\1\0\2\15\1\0\1\15\2\0"+
    "\7\15\2\0\10\15\1\375\17\15\2\0\1\15\1\0"+
    "\1\376\6\0\1\377\46\0\1\u0100\6\0\1\u0101\46\0"+
    "\1\15\1\35\1\0\2\15\1\0\1\15\2\0\7\15"+
    "\2\0\12\15\1\u0102\15\15\2\0\1\15\1\0\1\u0103"+
    "\6\0\1\u0104\46\0\1\15\1\35\1\0\2\15\1\0"+
    "\1\15\2\0\7\15\2\0\15\15\1\u0105\12\15\2\0"+
    "\1\15\1\0\1\15\1\35\1\0\2\15\1\0\1\15"+
    "\2\0\7\15\2\0\15\15\1\u0106\12\15\2\0\1\15"+
    "\1\0\1\15\1\35\1\0\2\15\1\0\1\15\2\0"+
    "\7\15\2\0\14\15\1\u0107\13\15\2\0\1\15\1\0"+
    "\1\15\1\35\1\0\2\15\1\0\1\15\2\0\7\15"+
    "\2\0\17\15\1\u0108\10\15\2\0\1\15\1\0\1\u0107"+
    "\1\u0109\1\0\2\15\1\0\1\15\2\0\7\15\2\0"+
    "\30\15\2\0\1\15\1\0\1\u0108\1\u010a\1\0\2\15"+
    "\1\0\1\15\2\0\7\15\2\0\30\15\2\0\1\15"+
    "\1\0\1\u010b\6\0\1\u010c\46\0\1\u010d\6\0\1\u010e"+
    "\45\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[9660];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\2\1\1\11\1\1\4\11\22\0\1\11"+
    "\25\0\1\1\2\0\1\1\30\0\1\11\2\0\1\11"+
    "\40\0\1\1\7\0\1\1\4\0\2\1\1\0\1\1"+
    "\7\0\2\1\2\0\1\11\7\0\1\11\1\0\1\1"+
    "\3\0\1\11\1\0\1\11\2\0\1\11\2\1\6\0"+
    "\1\11\1\0\1\11\4\0\2\1\3\0\1\11\2\0"+
    "\1\1\1\0\1\11\1\0\1\11\2\0\1\11\7\0"+
    "\1\11\1\0\1\11\5\0\1\11\3\0\1\1\3\0"+
    "\1\1\1\0\1\11\1\1\6\0\1\11\1\1\3\0"+
    "\1\11\1\0\1\11\1\0\1\1\4\0\1\11\1\0"+
    "\1\1\2\0\1\11\2\1\1\0\1\1\1\0\1\11"+
    "\2\0\1\11\1\0\1\11\2\0\1\11\4\0\2\1"+
    "\1\0\1\11\1\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[270];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen())];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;

  /* user code: */
    public LexerDashb(Reader myReader, DefaultSymbolFactory myFactory) { this(myReader); this.myFactory = myFactory; }

    private DefaultSymbolFactory myFactory = null;

    private Symbol symbol(int sym) {
        printLexema(sym); // DEBUG
        int izq = (int)yychar+1;
        int der = (int)yychar+yylength();
        String name = ParserDashbSym.terminalNames[sym];
        Symbol mySymbol = myFactory.newSymbol(name, sym, izq, der);
        return mySymbol;
    }
    private Symbol symbol(int sym, Object val) {
        printLexema(sym); // DEBUG
        int izq = (int)yychar+1;
        int der = (int)yychar+yylength();
        String name = ParserDashbSym.terminalNames[sym];
        Symbol mySymbol = myFactory.newSymbol(name, sym, izq, der, val);
        return mySymbol;
    }

    public class Punto
    {
        private long r1;
        private long r2;
        private int pline;
        private int pcolumn;

        public Punto(long pchar, int plength, int pline, int pcolumn)
        {
            this.r1 = pchar;
            this.r2 = pchar + (plength - 1);
            this.pline = pline;
            this.pcolumn = pcolumn;
        }
        
        public String getValues()
        {
            String tr = "r="+r1+"-"+r2;
            String tline = "y="+pline;
            String tcolumn = "x="+pcolumn;
            return tr+", "+tline+", "+tcolumn;
        }
    }

    // para errores lexicos
    private StringBuilder log = new StringBuilder();
    private StringBuilder log(String text) { return log.append(text); }

    // para debug
    private void print(String texto){ System.out.print(texto); } 
    public Punto puntoActual(){ return new Punto((yychar+1),yylength(),(yyline+1),(yycolumn+1)); };
    private void printLexema(int sym) { print(ParserDashbSym.terminalNames[sym]+" ("+yytext()+"): "+puntoActual().getValues()+"\n"); }

    /*
    ComplexSymbolFactory myFactory = null;

    public Lexer(Reader in, ComplexSymbolFactory sf) { this(in); myFactory = sf; }

    private Symbol symbol(String name, int sym) {
        Location izq = new Location(yyline+1, yycolumn+1, (int)yychar);
        Location der = new Location(yyline+1, yycolumn+yylength(), (int)yychar+yylength());
        Symbol mySymbol = myFactory.newSymbol(name, sym, izq, der);
        return mySymbol;
    }
    private Symbol symbol(String name, int sym, Object val) {
        Location izq = new Location(yyline+1, yycolumn+1, (int)yychar);
        Location der = new Location(yyline+1, yycolumn+yylength(), (int)yychar+yylength());
        Symbol mySymbol = myFactory.newSymbol(name, sym, izq, der, val);
        return mySymbol;
    }*/


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public LexerDashb(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate && zzCanGrow()) {
      /* if not, and it can grow: blow it up */
      char newBuffer[] = new char[Math.min(zzBuffer.length * 2, zzMaxBufferLen())];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      if (requested == 0) {
        throw new java.io.EOFException("Scan buffer limit reached ["+zzBuffer.length+"]");
      }
      else {
        throw new java.io.IOException(
            "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
      }
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    int initBufferSize = Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen());
    if (zzBuffer.length > initBufferSize) {
      zzBuffer = new char[initBufferSize];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
  yyclose();    }
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  @Override  public java_cup.runtime.Symbol next_token() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(ParserDashbSym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { //print("@error: "+yytext()+","+puntoActual().getValues()+"\n");
    return symbol(ParserDashbSym.error);
            }
          // fall through
          case 38: break;
          case 2:
            { 
            }
          // fall through
          case 39: break;
          case 3:
            { return symbol(ParserDashbSym.COMA);
            }
          // fall through
          case 40: break;
          case 4:
            { return symbol(ParserDashbSym.MI_INTEGER,yytext());
            }
          // fall through
          case 41: break;
          case 5:
            { return symbol(ParserDashbSym.IZQCORCH);
            }
          // fall through
          case 42: break;
          case 6:
            { return symbol(ParserDashbSym.DERCORCH);
            }
          // fall through
          case 43: break;
          case 7:
            { return symbol(ParserDashbSym.IZQLLAVE);
            }
          // fall through
          case 44: break;
          case 8:
            { return symbol(ParserDashbSym.DERLLAVE);
            }
          // fall through
          case 45: break;
          case 9:
            { return symbol(ParserDashbSym.MI_TEXTO,yytext());
            }
          // fall through
          case 46: break;
          case 10:
            { return symbol(ParserDashbSym.KD_X);
            }
          // fall through
          case 47: break;
          case 11:
            { return symbol(ParserDashbSym.KD_Y);
            }
          // fall through
          case 48: break;
          case 12:
            { return symbol(ParserDashbSym.KD_DATA);
            }
          // fall through
          case 49: break;
          case 13:
            { return symbol(ParserDashbSym.KD_ICON);
            }
          // fall through
          case 50: break;
          case 14:
            { return symbol(ParserDashbSym.KD_LINK);
            }
          // fall through
          case 51: break;
          case 15:
            { return symbol(ParserDashbSym.KD_NAME);
            }
          // fall through
          case 52: break;
          case 16:
            { return symbol(ParserDashbSym.KD_SIZE);
            }
          // fall through
          case 53: break;
          case 17:
            { return symbol(ParserDashbSym.KD_CHART);
            }
          // fall through
          case 54: break;
          case 18:
            { return symbol(ParserDashbSym.KD_COLOR);
            }
          // fall through
          case 55: break;
          case 19:
            { return symbol(ParserDashbSym.KD_LABEL);
            }
          // fall through
          case 56: break;
          case 20:
            { return symbol(ParserDashbSym.KD_TITLE);
            }
          // fall through
          case 57: break;
          case 21:
            { return symbol(ParserDashbSym.KD_VALUE);
            }
          // fall through
          case 58: break;
          case 22:
            { return symbol(ParserDashbSym.MI_COLOR,yytext());
            }
          // fall through
          case 59: break;
          case 23:
            { return symbol(ParserDashbSym.KD_FOOTER);
            }
          // fall through
          case 60: break;
          case 24:
            { return symbol(ParserDashbSym.KD_HEADER);
            }
          // fall through
          case 61: break;
          case 25:
            { return symbol(ParserDashbSym.KD_PONTS);
            }
          // fall through
          case 62: break;
          case 26:
            { return symbol(ParserDashbSym.MI_URL,yytext());
            }
          // fall through
          case 63: break;
          case 27:
            { return symbol(ParserDashbSym.KD_CATEGORY);
            }
          // fall through
          case 64: break;
          case 28:
            { return symbol(ParserDashbSym.KD_FONTSIZE);
            }
          // fall through
          case 65: break;
          case 29:
            { return symbol(ParserDashbSym.KD_KEYWORDS);
            }
          // fall through
          case 66: break;
          case 30:
            { return symbol(ParserDashbSym.KD_COPYR);
            }
          // fall through
          case 67: break;
          case 31:
            { return symbol(ParserDashbSym.KD_LINE);
            }
          // fall through
          case 68: break;
          case 32:
            { return symbol(ParserDashbSym.KD_FONTFAM);
            }
          // fall through
          case 69: break;
          case 33:
            { return symbol(ParserDashbSym.KD_XLABEL);
            }
          // fall through
          case 70: break;
          case 34:
            { return symbol(ParserDashbSym.KD_YLABEL);
            }
          // fall through
          case 71: break;
          case 35:
            { return symbol(ParserDashbSym.KD_DESCRIP);
            }
          // fall through
          case 72: break;
          case 36:
            { return symbol(ParserDashbSym.KD_LEGEND);
            }
          // fall through
          case 73: break;
          case 37:
            { return symbol(ParserDashbSym.KD_BACKGR);
            }
          // fall through
          case 74: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
