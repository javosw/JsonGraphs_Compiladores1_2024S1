// DO NOT EDIT
// Generated by JFlex 1.9.1 http://jflex.de/
// source: lexer&parser/LexerDashb.jflex

// meta characters:  |  (  )  {  }  [  ]  < >  \  .  *  +  ?  ^  $  / . " ~ !

// codigo antes de la clase lexer
package josq.lenguajes.automatas;

import java.io.Reader;

//import java_cup.runtime.*;
import java_cup.runtime.Symbol;
import java_cup.runtime.SymbolFactory;
import java_cup.runtime.ComplexSymbolFactory;
import java_cup.runtime.ComplexSymbolFactory.Location;
import java_cup.runtime.DefaultSymbolFactory;



@SuppressWarnings("fallthrough")
public class LexerDashb implements java_cup.runtime.Scanner {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\36\u0200\1\u0300\336\u0200\1\u0400\u1000\u0200";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\0\1\1\1\3\22\0\1\1"+
    "\1\0\1\4\1\5\10\0\1\6\1\0\2\7\12\10"+
    "\1\11\2\0\1\7\1\0\1\7\1\0\1\12\1\13"+
    "\1\14\2\13\1\15\5\16\1\17\3\16\1\20\2\16"+
    "\1\21\7\16\1\22\1\0\1\23\3\0\1\24\1\25"+
    "\1\26\1\27\1\30\1\31\1\32\1\33\1\34\1\16"+
    "\1\35\1\36\1\37\1\40\1\41\1\42\1\16\1\43"+
    "\1\44\1\45\1\46\1\47\1\50\1\51\1\52\1\53"+
    "\1\54\1\0\1\55\43\0\1\56\7\0\1\56\3\0"+
    "\1\56\3\0\1\56\1\0\1\56\6\0\1\56\10\0"+
    "\1\56\235\0\1\56\u01b6\0\1\56\3\0\1\56\23\0"+
    "\1\56\u01cc\0\1\56\2\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1280];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\2\2\1\1\1\3\1\4\1\5\1\6"+
    "\1\7\1\10\6\0\1\11\21\0\1\12\57\0\1\12"+
    "\1\0\1\12\71\0\1\13\1\0\1\14\11\0\1\12"+
    "\5\0\1\12\5\0\2\12\1\0\1\12\11\0\2\12"+
    "\15\0\1\12\12\0\2\12\13\0\1\15\3\0\2\12"+
    "\1\16\5\0\1\17\1\20\1\12\1\21\6\0\1\22"+
    "\3\0\1\23\1\24\13\0\1\25\4\0\1\26\1\27"+
    "\3\0\1\12\4\0\1\12\1\30\1\31\1\12\3\0"+
    "\1\32\5\0\1\12\10\0\1\12\5\0\1\33\4\0"+
    "\1\12\1\34\1\35\3\0\2\12\1\0\1\36\1\12"+
    "\3\0\1\37\7\0\1\40\1\0\1\41\1\42\1\0"+
    "\1\43\4\0\2\12\4\0\1\44\1\45";

  private static int [] zzUnpackAction() {
    int [] result = new int[346];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\57\0\57\0\136\0\215\0\57\0\274\0\57"+
    "\0\57\0\57\0\57\0\353\0\u011a\0\u0149\0\u0178\0\u01a7"+
    "\0\u01d6\0\57\0\u0205\0\u0234\0\u0263\0\u0292\0\u02c1\0\u02f0"+
    "\0\u031f\0\u034e\0\u037d\0\u03ac\0\u03db\0\u040a\0\u0439\0\u0468"+
    "\0\u0497\0\u04c6\0\u04f5\0\57\0\u0524\0\u0553\0\u0582\0\u05b1"+
    "\0\u05e0\0\u060f\0\u063e\0\u066d\0\u069c\0\u06cb\0\u06fa\0\u0729"+
    "\0\u0758\0\u0787\0\u07b6\0\u07e5\0\u0814\0\u0843\0\u0872\0\u08a1"+
    "\0\u08d0\0\u08ff\0\u092e\0\u095d\0\u098c\0\u09bb\0\u09ea\0\u0a19"+
    "\0\u0a48\0\u0a77\0\u0aa6\0\u0ad5\0\u0b04\0\u0b33\0\u0b62\0\u0b91"+
    "\0\u0bc0\0\u0bef\0\u0c1e\0\u0c4d\0\u0c7c\0\u0cab\0\u0cda\0\u0d09"+
    "\0\u0d38\0\u0d67\0\u0d96\0\u0dc5\0\u0df4\0\u0e23\0\u0e52\0\u0e81"+
    "\0\u0eb0\0\u0edf\0\u0f0e\0\u0f3d\0\u0f6c\0\u0f9b\0\u0fca\0\u0ff9"+
    "\0\u1028\0\u1057\0\u1086\0\u10b5\0\u10e4\0\u1113\0\u1142\0\u1171"+
    "\0\u11a0\0\u11cf\0\u11fe\0\u122d\0\u125c\0\u128b\0\u12ba\0\u12e9"+
    "\0\u1318\0\u1347\0\u1376\0\u13a5\0\u13d4\0\u1403\0\u1432\0\u1461"+
    "\0\u1490\0\u14bf\0\u14ee\0\u151d\0\u154c\0\u157b\0\u15aa\0\u15d9"+
    "\0\u1608\0\u1637\0\u1666\0\u1695\0\u16c4\0\u16f3\0\u1722\0\u1751"+
    "\0\u1780\0\u17af\0\u17de\0\u180d\0\u183c\0\u186b\0\u189a\0\57"+
    "\0\u18c9\0\57\0\u18f8\0\u1927\0\u1956\0\u1985\0\u19b4\0\u19e3"+
    "\0\u1a12\0\u1a41\0\u1a70\0\u1a9f\0\u1ace\0\u1afd\0\u1b2c\0\u1b5b"+
    "\0\u1b8a\0\u1bb9\0\u1be8\0\u1c17\0\u1c46\0\u1c75\0\u1ca4\0\u1cd3"+
    "\0\u1d02\0\u1d31\0\u1d60\0\u1d8f\0\u1dbe\0\u1ded\0\u1e1c\0\u1e4b"+
    "\0\u1e7a\0\u1ea9\0\u1ed8\0\u1f07\0\u1f36\0\u1f65\0\u1f94\0\u1fc3"+
    "\0\u1ff2\0\u2021\0\u2050\0\u207f\0\u20ae\0\u20dd\0\u210c\0\u213b"+
    "\0\u216a\0\u2199\0\u21c8\0\u21f7\0\u2226\0\u2255\0\u2284\0\u22b3"+
    "\0\u22e2\0\u2311\0\u2340\0\u236f\0\u239e\0\u23cd\0\u23fc\0\u242b"+
    "\0\u245a\0\u2489\0\u24b8\0\u24e7\0\u2516\0\u2545\0\u2574\0\u25a3"+
    "\0\u25d2\0\u2601\0\u2630\0\57\0\u265f\0\u268e\0\u26bd\0\u26ec"+
    "\0\u271b\0\57\0\u274a\0\u2779\0\u27a8\0\u27d7\0\u2806\0\57"+
    "\0\57\0\u2835\0\57\0\u2864\0\u2893\0\u28c2\0\u28f1\0\u2920"+
    "\0\u294f\0\57\0\u297e\0\u29ad\0\u29dc\0\57\0\57\0\u2a0b"+
    "\0\u2a3a\0\u2a69\0\u2a98\0\u2ac7\0\u2af6\0\u2b25\0\u2b54\0\u2b83"+
    "\0\u2bb2\0\u2be1\0\57\0\u2c10\0\u2c3f\0\u2c6e\0\u2c9d\0\57"+
    "\0\57\0\u2ccc\0\u2cfb\0\u2d2a\0\u2d59\0\u2d88\0\u2db7\0\u2de6"+
    "\0\u2e15\0\u2e44\0\57\0\57\0\u2e73\0\u2ea2\0\u2ed1\0\u2f00"+
    "\0\57\0\u2f2f\0\u2f5e\0\u2f8d\0\u2fbc\0\u2feb\0\u301a\0\u3049"+
    "\0\u3078\0\u30a7\0\u30d6\0\u3105\0\u3134\0\u3163\0\u3192\0\u31c1"+
    "\0\u31f0\0\u321f\0\u324e\0\u327d\0\u32ac\0\57\0\u32db\0\u330a"+
    "\0\u3339\0\u3368\0\u3397\0\57\0\57\0\u33c6\0\u33f5\0\u3424"+
    "\0\u3453\0\u3482\0\u34b1\0\57\0\u34e0\0\u350f\0\u353e\0\u356d"+
    "\0\57\0\u359c\0\u35cb\0\u35fa\0\u3629\0\u3658\0\u3687\0\u36b6"+
    "\0\57\0\u36e5\0\57\0\57\0\u3714\0\57\0\u3743\0\u3772"+
    "\0\u37a1\0\u37d0\0\u37ff\0\u382e\0\u385d\0\u388c\0\u38bb\0\u38ea"+
    "\0\57\0\57";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[346];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\4\1\5\1\2\1\6\1\2\1\7"+
    "\11\2\1\10\1\11\30\2\1\12\1\13\1\2\61\0"+
    "\1\3\55\0\2\14\1\15\3\0\1\16\1\17\1\16"+
    "\10\17\2\0\30\17\2\0\1\20\10\0\1\7\47\0"+
    "\3\21\1\22\1\23\1\0\1\16\1\17\1\16\10\17"+
    "\2\0\1\17\1\24\1\25\1\26\1\17\1\27\1\17"+
    "\1\30\1\31\1\32\1\33\1\17\1\34\1\17\1\35"+
    "\1\17\1\36\1\37\1\17\1\40\1\17\1\41\1\42"+
    "\1\17\2\0\1\20\1\0\1\21\1\14\1\21\1\22"+
    "\1\23\1\0\1\16\1\17\1\16\10\17\2\0\1\17"+
    "\1\24\1\25\1\26\1\17\1\27\1\17\1\30\1\31"+
    "\1\32\1\33\1\17\1\34\1\17\1\35\1\17\1\36"+
    "\1\37\1\17\1\40\1\17\1\41\1\42\1\17\2\0"+
    "\1\20\1\0\3\43\1\44\2\0\13\16\2\0\30\16"+
    "\4\0\3\45\1\44\2\0\1\16\1\17\1\16\10\17"+
    "\2\0\30\17\2\0\1\20\1\0\3\20\1\22\3\0"+
    "\1\20\1\0\10\20\2\0\30\20\2\0\1\20\1\0"+
    "\3\21\1\22\2\0\1\16\1\17\1\16\10\17\2\0"+
    "\30\17\2\0\1\20\10\0\1\46\1\0\4\46\6\0"+
    "\6\46\26\0\3\45\1\44\2\0\1\16\1\17\1\16"+
    "\10\17\2\0\1\47\27\17\2\0\1\20\1\0\3\45"+
    "\1\44\2\0\1\16\1\17\1\16\10\17\2\0\1\50"+
    "\6\17\1\51\5\17\1\52\12\17\2\0\1\20\1\0"+
    "\3\45\1\44\2\0\1\16\1\17\1\16\10\17\2\0"+
    "\1\53\3\17\1\54\23\17\2\0\1\20\1\0\3\45"+
    "\1\44\2\0\1\16\1\17\1\16\10\17\2\0\15\17"+
    "\1\55\12\17\2\0\1\20\1\0\3\45\1\44\2\0"+
    "\1\16\1\17\1\16\10\17\2\0\4\17\1\56\23\17"+
    "\2\0\1\20\1\0\3\45\1\44\2\0\1\16\1\17"+
    "\1\16\10\17\2\0\2\17\1\57\25\17\2\0\1\20"+
    "\1\0\3\45\1\44\2\0\1\16\1\17\1\16\10\17"+
    "\2\0\4\17\1\60\23\17\2\0\1\20\1\0\3\45"+
    "\1\44\2\0\1\16\1\17\1\16\10\17\2\0\1\61"+
    "\3\17\1\62\3\17\1\63\17\17\2\0\1\20\1\0"+
    "\3\45\1\44\2\0\1\16\1\17\1\16\10\17\2\0"+
    "\1\64\27\17\2\0\1\20\1\0\3\45\1\44\2\0"+
    "\1\16\1\17\1\16\10\17\2\0\15\17\1\65\12\17"+
    "\2\0\1\20\1\0\3\45\1\44\2\0\1\16\1\17"+
    "\1\16\10\17\2\0\10\17\1\66\17\17\2\0\1\20"+
    "\1\0\3\45\1\44\2\0\1\16\1\17\1\16\10\17"+
    "\2\0\10\17\1\67\17\17\2\0\1\20\1\0\3\45"+
    "\1\44\2\0\1\16\1\17\1\16\10\17\2\0\1\70"+
    "\27\17\2\0\1\20\1\0\2\71\1\72\1\44\2\0"+
    "\1\16\1\17\1\16\1\73\7\17\2\0\30\17\2\0"+
    "\1\20\1\0\2\74\1\75\1\44\2\0\1\16\1\17"+
    "\1\16\1\76\7\17\2\0\30\17\2\0\1\20\1\0"+
    "\3\43\1\44\53\0\3\45\1\44\3\0\1\20\1\0"+
    "\10\20\2\0\30\20\2\0\1\20\10\0\1\77\1\0"+
    "\4\77\6\0\6\77\26\0\3\45\1\44\2\0\1\16"+
    "\1\17\1\16\10\17\2\0\2\17\1\100\25\17\2\0"+
    "\1\20\1\0\3\45\1\44\2\0\1\16\1\17\1\16"+
    "\10\17\2\0\21\17\1\101\6\17\2\0\1\20\1\0"+
    "\3\45\1\44\2\0\1\16\1\17\1\16\10\17\2\0"+
    "\1\102\27\17\2\0\1\20\1\0\3\45\1\44\2\0"+
    "\1\16\1\17\1\16\10\17\2\0\12\17\1\103\3\17"+
    "\1\104\11\17\2\0\1\20\1\0\3\45\1\44\2\0"+
    "\1\16\1\17\1\16\10\17\2\0\21\17\1\105\6\17"+
    "\2\0\1\20\1\0\3\45\1\44\2\0\1\16\1\17"+
    "\1\16\10\17\2\0\20\17\1\106\7\17\2\0\1\20"+
    "\1\0\3\45\1\44\2\0\1\16\1\17\1\16\10\17"+
    "\2\0\14\17\1\107\1\110\12\17\2\0\1\20\1\0"+
    "\3\45\1\44\2\0\1\16\1\17\1\16\10\17\2\0"+
    "\1\111\27\17\2\0\1\20\1\0\3\45\1\44\2\0"+
    "\1\16\1\17\1\16\10\17\2\0\15\17\1\112\12\17"+
    "\2\0\1\20\1\0\3\45\1\44\2\0\1\16\1\17"+
    "\1\16\10\17\2\0\26\17\1\113\1\17\2\0\1\20"+
    "\1\0\3\45\1\44\2\0\1\16\1\17\1\16\10\17"+
    "\2\0\1\17\1\114\26\17\2\0\1\20\1\0\3\45"+
    "\1\44\2\0\1\16\1\17\1\16\10\17\2\0\6\17"+
    "\1\115\21\17\2\0\1\20\1\0\3\45\1\44\2\0"+
    "\1\16\1\17\1\16\10\17\2\0\14\17\1\116\13\17"+
    "\2\0\1\20\1\0\3\45\1\44\2\0\1\16\1\17"+
    "\1\16\10\17\2\0\13\17\1\117\14\17\2\0\1\20"+
    "\1\0\3\45\1\44\2\0\1\16\1\17\1\16\10\17"+
    "\2\0\10\17\1\120\17\17\2\0\1\20\1\0\3\45"+
    "\1\44\2\0\1\16\1\17\1\16\10\17\2\0\27\17"+
    "\1\121\2\0\1\20\1\0\3\45\1\44\2\0\1\16"+
    "\1\17\1\16\10\17\2\0\21\17\1\122\6\17\2\0"+
    "\1\20\1\0\3\45\1\44\2\0\1\16\1\17\1\16"+
    "\10\17\2\0\12\17\1\123\15\17\2\0\1\20\1\0"+
    "\3\45\1\124\3\0\1\20\1\0\10\20\2\0\30\20"+
    "\2\0\1\20\1\0\1\45\1\71\1\45\1\124\3\0"+
    "\1\20\1\0\10\20\2\0\30\20\2\0\1\20\1\0"+
    "\3\45\1\44\2\0\1\16\1\17\1\16\10\17\2\0"+
    "\25\17\1\125\2\17\2\0\1\20\1\0\3\45\1\126"+
    "\3\0\1\20\1\0\10\20\2\0\30\20\2\0\1\20"+
    "\1\0\1\45\1\74\1\45\1\126\3\0\1\20\1\0"+
    "\10\20\2\0\30\20\2\0\1\20\1\0\3\45\1\44"+
    "\2\0\1\16\1\17\1\16\10\17\2\0\25\17\1\127"+
    "\2\17\2\0\1\20\10\0\1\130\1\0\4\130\6\0"+
    "\6\130\26\0\3\45\1\44\2\0\1\16\1\17\1\16"+
    "\10\17\2\0\11\17\1\131\16\17\2\0\1\20\1\0"+
    "\3\45\1\44\2\0\1\16\1\17\1\16\10\17\2\0"+
    "\4\17\1\132\23\17\2\0\1\20\1\0\3\45\1\44"+
    "\2\0\1\16\1\17\1\16\10\17\2\0\17\17\1\133"+
    "\10\17\2\0\1\20\1\0\3\45\1\44\2\0\1\16"+
    "\1\17\1\16\10\17\2\0\15\17\1\134\12\17\2\0"+
    "\1\20\1\0\3\45\1\44\2\0\1\16\1\17\1\16"+
    "\10\17\2\0\26\17\1\135\1\17\2\0\1\20\1\0"+
    "\3\45\1\44\2\0\1\16\1\17\1\16\10\17\2\0"+
    "\1\136\27\17\2\0\1\20\1\0\3\45\1\44\2\0"+
    "\1\16\1\17\1\16\10\17\2\0\2\17\1\137\25\17"+
    "\2\0\1\20\1\0\3\45\1\44\2\0\1\16\1\17"+
    "\1\16\10\17\2\0\21\17\1\140\6\17\2\0\1\20"+
    "\1\0\3\45\1\44\2\0\1\16\1\17\1\16\10\17"+
    "\2\0\21\17\1\141\6\17\2\0\1\20\1\0\3\45"+
    "\1\44\2\0\1\16\1\17\1\16\10\17\2\0\3\17"+
    "\1\142\24\17\2\0\1\20\1\0\3\45\1\44\2\0"+
    "\1\16\1\17\1\16\10\17\2\0\14\17\1\143\13\17"+
    "\2\0\1\20\1\0\3\45\1\44\2\0\1\16\1\17"+
    "\1\16\10\17\2\0\24\17\1\144\3\17\2\0\1\20"+
    "\1\0\3\45\1\44\2\0\1\16\1\17\1\16\10\17"+
    "\2\0\4\17\1\145\23\17\2\0\1\20\1\0\3\45"+
    "\1\44\2\0\1\16\1\17\1\16\10\17\2\0\4\17"+
    "\1\146\23\17\2\0\1\20\1\0\3\45\1\44\2\0"+
    "\1\16\1\17\1\16\10\17\2\0\4\17\1\147\4\17"+
    "\1\150\16\17\2\0\1\20\1\0\3\45\1\44\2\0"+
    "\1\16\1\17\1\16\10\17\2\0\4\17\1\151\23\17"+
    "\2\0\1\20\1\0\3\45\1\44\2\0\1\16\1\17"+
    "\1\16\10\17\2\0\14\17\1\152\13\17\2\0\1\20"+
    "\1\0\3\45\1\44\2\0\1\16\1\17\1\16\10\17"+
    "\2\0\4\17\1\153\23\17\2\0\1\20\1\0\3\45"+
    "\1\44\2\0\1\16\1\17\1\16\10\17\2\0\12\17"+
    "\1\154\15\17\2\0\1\20\1\0\3\45\1\44\2\0"+
    "\1\16\1\17\1\16\10\17\2\0\22\17\1\155\5\17"+
    "\2\0\1\20\1\0\2\156\1\157\54\0\3\45\1\44"+
    "\2\0\1\16\1\17\1\16\10\17\2\0\10\17\1\160"+
    "\17\17\2\0\1\20\1\0\2\161\1\162\54\0\3\45"+
    "\1\44\2\0\1\16\1\17\1\16\10\17\2\0\10\17"+
    "\1\163\17\17\2\0\1\20\10\0\1\164\1\0\4\164"+
    "\6\0\6\164\26\0\3\45\1\44\2\0\1\16\1\17"+
    "\1\16\10\17\2\0\6\17\1\165\21\17\2\0\1\20"+
    "\1\0\3\45\1\44\2\0\1\16\1\17\1\16\10\17"+
    "\2\0\6\17\1\166\21\17\2\0\1\20\1\0\3\45"+
    "\1\44\2\0\1\16\1\17\1\16\10\17\2\0\21\17"+
    "\1\167\6\17\2\0\1\20\1\0\3\45\1\44\2\0"+
    "\1\16\1\17\1\16\10\17\2\0\17\17\1\170\10\17"+
    "\2\0\1\20\1\0\3\45\1\44\2\0\1\16\1\17"+
    "\1\16\10\17\2\0\17\17\1\171\10\17\2\0\1\20"+
    "\1\0\2\172\1\173\1\44\2\0\1\16\1\17\1\16"+
    "\10\17\2\0\30\17\2\0\1\20\1\0\3\45\1\44"+
    "\2\0\1\16\1\17\1\16\10\17\2\0\17\17\1\174"+
    "\10\17\2\0\1\20\1\0\3\45\1\44\2\0\1\16"+
    "\1\17\1\16\3\17\1\175\3\17\1\176\2\0\30\17"+
    "\2\0\1\20\1\0\3\45\1\44\2\0\1\16\1\17"+
    "\1\16\10\17\2\0\4\17\1\177\23\17\2\0\1\20"+
    "\1\0\3\45\1\44\2\0\1\16\1\17\1\16\10\17"+
    "\2\0\4\17\1\200\23\17\2\0\1\20\1\0\2\201"+
    "\1\202\1\44\2\0\1\16\1\17\1\16\10\17\2\0"+
    "\30\17\2\0\1\20\1\0\3\45\1\44\2\0\1\16"+
    "\1\17\1\16\10\17\2\0\15\17\1\203\12\17\2\0"+
    "\1\20\1\0\3\45\1\44\2\0\1\16\1\17\1\16"+
    "\10\17\2\0\12\17\1\204\15\17\2\0\1\20\1\0"+
    "\3\45\1\44\2\0\1\16\1\17\1\16\10\17\2\0"+
    "\14\17\1\205\13\17\2\0\1\20\1\0\3\45\1\44"+
    "\2\0\1\16\1\17\1\16\7\17\1\206\2\0\30\17"+
    "\2\0\1\20\1\0\2\207\1\210\1\44\2\0\1\16"+
    "\1\17\1\16\10\17\2\0\30\17\2\0\1\20\1\0"+
    "\2\211\1\212\1\44\2\0\1\16\1\17\1\16\10\17"+
    "\2\0\30\17\2\0\1\20\1\0\3\45\1\44\2\0"+
    "\1\16\1\17\1\16\10\17\2\0\21\17\1\213\6\17"+
    "\2\0\1\20\1\0\2\214\1\215\1\44\2\0\1\16"+
    "\1\17\1\16\10\17\2\0\30\17\2\0\1\20\1\0"+
    "\3\45\1\44\2\0\1\16\1\17\1\16\10\17\2\0"+
    "\4\17\1\216\23\17\2\0\1\20\1\0\3\45\1\44"+
    "\2\0\1\16\1\17\1\16\10\17\2\0\4\17\1\217"+
    "\23\17\2\0\1\20\11\0\1\220\47\0\1\156\6\0"+
    "\1\220\46\0\3\45\1\44\2\0\1\16\1\17\1\16"+
    "\10\17\2\0\20\17\1\221\7\17\2\0\1\20\11\0"+
    "\1\222\47\0\1\161\6\0\1\222\46\0\3\45\1\44"+
    "\2\0\1\16\1\17\1\16\10\17\2\0\20\17\1\223"+
    "\7\17\2\0\1\20\10\0\1\224\1\0\4\224\6\0"+
    "\6\224\26\0\3\45\1\44\2\0\1\16\1\17\1\16"+
    "\10\17\2\0\17\17\1\225\10\17\2\0\1\20\1\0"+
    "\3\45\1\44\2\0\1\16\1\17\1\16\10\17\2\0"+
    "\15\17\1\226\12\17\2\0\1\20\1\0\2\227\1\230"+
    "\1\44\2\0\1\16\1\17\1\16\10\17\2\0\30\17"+
    "\2\0\1\20\1\0\2\231\1\232\1\44\2\0\1\16"+
    "\1\17\1\16\10\17\2\0\30\17\2\0\1\20\1\0"+
    "\3\45\1\44\2\0\1\16\1\17\1\16\10\17\2\0"+
    "\10\17\1\233\17\17\2\0\1\20\1\0\3\45\1\234"+
    "\3\0\1\20\1\0\10\20\2\0\30\20\2\0\1\20"+
    "\1\0\1\45\1\172\1\45\1\234\3\0\1\20\1\0"+
    "\10\20\2\0\30\20\2\0\1\20\1\0\3\45\1\44"+
    "\2\0\1\16\1\17\1\16\10\17\2\0\10\17\1\235"+
    "\17\17\2\0\1\20\1\0\3\45\1\44\2\0\1\16"+
    "\1\17\1\16\10\17\2\0\1\236\27\17\2\0\1\20"+
    "\1\0\3\45\1\44\2\0\1\16\1\17\1\16\10\17"+
    "\2\0\10\17\1\237\17\17\2\0\1\20\1\0\3\45"+
    "\1\44\2\0\1\16\1\17\1\16\10\17\2\0\17\17"+
    "\1\240\10\17\2\0\1\20\1\0\3\45\1\44\2\0"+
    "\1\16\1\17\1\16\10\17\2\0\17\17\1\241\10\17"+
    "\2\0\1\20\1\0\3\45\1\242\3\0\1\20\1\0"+
    "\10\20\2\0\30\20\2\0\1\20\1\0\1\45\1\201"+
    "\1\45\1\242\3\0\1\20\1\0\10\20\2\0\30\20"+
    "\2\0\1\20\1\0\3\45\1\44\2\0\1\16\1\17"+
    "\1\16\10\17\2\0\17\17\1\243\10\17\2\0\1\20"+
    "\1\0\2\244\1\245\1\44\2\0\1\16\1\17\1\16"+
    "\10\17\2\0\30\17\2\0\1\20\1\0\3\45\1\44"+
    "\2\0\1\16\1\17\1\16\10\17\2\0\3\17\1\246"+
    "\24\17\2\0\1\20\1\0\3\45\1\44\2\0\1\16"+
    "\1\17\1\16\10\17\2\0\21\17\1\247\6\17\2\0"+
    "\1\20\1\0\3\45\1\250\3\0\1\20\1\0\10\20"+
    "\2\0\30\20\2\0\1\20\1\0\1\45\1\207\1\45"+
    "\1\250\3\0\1\20\1\0\10\20\2\0\30\20\2\0"+
    "\1\20\1\0\3\45\1\251\3\0\1\20\1\0\10\20"+
    "\2\0\30\20\2\0\1\20\1\0\1\45\1\211\1\45"+
    "\1\251\3\0\1\20\1\0\10\20\2\0\30\20\2\0"+
    "\1\20\1\0\3\45\1\44\2\0\1\16\1\17\1\16"+
    "\10\17\2\0\20\17\1\252\7\17\2\0\1\20\1\0"+
    "\3\45\1\253\3\0\1\20\1\0\10\20\2\0\30\20"+
    "\2\0\1\20\1\0\1\45\1\214\1\45\1\253\3\0"+
    "\1\20\1\0\10\20\2\0\30\20\2\0\1\20\1\0"+
    "\2\254\1\255\1\44\2\0\1\16\1\17\1\16\10\17"+
    "\2\0\30\17\2\0\1\20\1\0\2\256\1\257\1\44"+
    "\2\0\1\16\1\17\1\16\10\17\2\0\30\17\2\0"+
    "\1\20\1\0\3\45\1\44\2\0\1\16\1\17\1\16"+
    "\5\17\1\260\2\17\2\0\30\17\2\0\1\20\1\0"+
    "\3\45\1\44\2\0\1\16\1\17\1\16\5\17\1\261"+
    "\2\17\2\0\30\17\2\0\1\20\10\0\1\262\1\0"+
    "\4\262\6\0\6\262\26\0\3\45\1\44\2\0\1\16"+
    "\1\17\1\16\10\17\2\0\15\17\1\263\12\17\2\0"+
    "\1\20\1\0\3\45\1\44\2\0\1\16\1\17\1\16"+
    "\10\17\2\0\17\17\1\264\10\17\2\0\1\20\1\0"+
    "\3\45\1\265\3\0\1\20\1\0\10\20\2\0\30\20"+
    "\2\0\1\20\1\0\1\45\1\227\1\45\1\265\3\0"+
    "\1\20\1\0\10\20\2\0\30\20\2\0\1\20\1\0"+
    "\3\45\1\266\3\0\1\20\1\0\10\20\2\0\30\20"+
    "\2\0\1\20\1\0\1\45\1\231\1\45\1\266\3\0"+
    "\1\20\1\0\10\20\2\0\30\20\2\0\1\20\1\0"+
    "\3\45\1\44\2\0\1\16\1\17\1\16\10\17\2\0"+
    "\6\17\1\267\21\17\2\0\1\20\1\0\2\270\1\271"+
    "\54\0\3\45\1\44\2\0\1\16\1\17\1\16\10\17"+
    "\2\0\16\17\1\272\11\17\2\0\1\20\1\0\3\45"+
    "\1\44\2\0\1\16\1\17\1\16\10\17\2\0\13\17"+
    "\1\273\14\17\2\0\1\20\1\0\3\45\1\44\2\0"+
    "\1\16\1\17\1\16\10\17\2\0\27\17\1\274\2\0"+
    "\1\20\1\0\2\275\1\276\1\44\2\0\1\16\1\17"+
    "\1\16\10\17\2\0\30\17\2\0\1\20\1\0\2\277"+
    "\1\300\1\44\2\0\1\16\1\17\1\16\10\17\2\0"+
    "\30\17\2\0\1\20\1\0\2\301\1\302\54\0\3\45"+
    "\1\44\2\0\1\16\1\17\1\16\10\17\2\0\3\17"+
    "\1\303\24\17\2\0\1\20\1\0\3\45\1\304\3\0"+
    "\1\20\1\0\10\20\2\0\30\20\2\0\1\20\1\0"+
    "\1\45\1\244\1\45\1\304\3\0\1\20\1\0\10\20"+
    "\2\0\30\20\2\0\1\20\1\0\3\45\1\44\2\0"+
    "\1\16\1\17\1\16\6\17\1\305\1\17\2\0\30\17"+
    "\2\0\1\20\1\0\3\45\1\44\2\0\1\16\1\17"+
    "\1\16\10\17\2\0\26\17\1\306\1\17\2\0\1\20"+
    "\1\0\2\307\1\310\54\0\2\311\1\312\54\0\2\313"+
    "\1\314\1\44\2\0\1\16\1\17\1\16\10\17\2\0"+
    "\30\17\2\0\1\20\1\0\2\315\1\316\54\0\3\45"+
    "\1\317\3\0\1\20\1\0\10\20\2\0\30\20\2\0"+
    "\1\20\1\0\1\45\1\254\1\45\1\317\3\0\1\20"+
    "\1\0\10\20\2\0\30\20\2\0\1\20\1\0\3\45"+
    "\1\320\3\0\1\20\1\0\10\20\2\0\30\20\2\0"+
    "\1\20\1\0\1\45\1\256\1\45\1\320\3\0\1\20"+
    "\1\0\10\20\2\0\30\20\2\0\1\20\1\0\3\45"+
    "\1\44\2\0\1\16\1\17\1\16\10\17\2\0\1\321"+
    "\27\17\2\0\1\20\1\0\3\45\1\44\2\0\1\16"+
    "\1\17\1\16\10\17\2\0\1\322\27\17\2\0\1\20"+
    "\1\0\2\323\1\324\54\0\3\45\1\44\2\0\1\16"+
    "\1\17\1\16\10\17\2\0\22\17\1\325\5\17\2\0"+
    "\1\20\1\0\3\45\1\44\2\0\1\16\1\17\1\16"+
    "\10\17\2\0\26\17\1\326\1\17\2\0\1\20\1\0"+
    "\2\327\1\330\54\0\2\331\1\332\54\0\3\45\1\44"+
    "\2\0\1\16\1\17\1\16\10\17\2\0\7\17\1\333"+
    "\20\17\2\0\1\20\11\0\1\334\47\0\1\270\6\0"+
    "\1\334\46\0\3\45\1\44\2\0\1\16\1\17\1\16"+
    "\10\17\2\0\21\17\1\335\6\17\2\0\1\20\1\0"+
    "\3\45\1\44\2\0\1\16\1\17\1\16\10\17\2\0"+
    "\10\17\1\336\17\17\2\0\1\20\1\0\3\45\1\44"+
    "\2\0\1\16\1\17\1\16\10\17\2\0\4\17\1\337"+
    "\23\17\2\0\1\20\1\0\3\45\1\340\3\0\1\20"+
    "\1\0\10\20\2\0\30\20\2\0\1\20\1\0\1\45"+
    "\1\275\1\45\1\340\3\0\1\20\1\0\10\20\2\0"+
    "\30\20\2\0\1\20\1\0\3\45\1\341\3\0\1\20"+
    "\1\0\10\20\2\0\30\20\2\0\1\20\1\0\1\45"+
    "\1\277\1\45\1\341\3\0\1\20\1\0\10\20\2\0"+
    "\30\20\2\0\1\20\11\0\1\342\47\0\1\301\6\0"+
    "\1\342\46\0\3\45\1\44\2\0\1\16\1\17\1\16"+
    "\10\17\2\0\20\17\1\343\7\17\2\0\1\20\1\0"+
    "\2\344\1\345\54\0\3\45\1\44\2\0\1\16\1\17"+
    "\1\16\10\17\2\0\15\17\1\346\12\17\2\0\1\20"+
    "\1\0\3\45\1\44\2\0\1\16\1\17\1\16\10\17"+
    "\2\0\12\17\1\347\15\17\2\0\1\20\11\0\1\350"+
    "\47\0\1\307\6\0\1\350\56\0\1\351\47\0\1\311"+
    "\6\0\1\351\46\0\3\45\1\352\3\0\1\20\1\0"+
    "\10\20\2\0\30\20\2\0\1\20\1\0\1\45\1\313"+
    "\1\45\1\352\3\0\1\20\1\0\10\20\2\0\30\20"+
    "\2\0\1\20\11\0\1\353\47\0\1\315\6\0\1\353"+
    "\46\0\2\354\1\355\54\0\2\356\1\357\54\0\3\45"+
    "\1\44\2\0\1\16\1\17\1\16\10\17\2\0\1\17"+
    "\1\360\26\17\2\0\1\20\1\0\3\45\1\44\2\0"+
    "\1\16\1\17\1\16\10\17\2\0\1\17\1\361\26\17"+
    "\2\0\1\20\4\0\1\362\54\0\1\323\1\0\1\362"+
    "\53\0\3\45\1\44\2\0\1\16\1\17\1\16\10\17"+
    "\2\0\14\17\1\363\13\17\2\0\1\20\1\0\2\364"+
    "\1\365\1\44\2\0\1\16\1\17\1\16\10\17\2\0"+
    "\30\17\2\0\1\20\11\0\1\366\47\0\1\327\6\0"+
    "\1\366\56\0\1\367\47\0\1\331\6\0\1\367\46\0"+
    "\3\45\1\44\2\0\1\16\1\17\1\16\10\17\2\0"+
    "\21\17\1\370\6\17\2\0\1\20\1\0\3\45\1\44"+
    "\2\0\1\16\1\17\1\16\10\17\2\0\10\17\1\371"+
    "\17\17\2\0\1\20\1\0\3\45\1\44\2\0\1\16"+
    "\1\17\1\16\10\17\2\0\12\17\1\372\15\17\2\0"+
    "\1\20\1\0\2\373\1\374\1\44\2\0\1\16\1\17"+
    "\1\16\10\17\2\0\30\17\2\0\1\20\1\0\2\375"+
    "\1\376\54\0\2\377\1\u0100\54\0\2\u0101\1\u0102\1\44"+
    "\2\0\1\16\1\17\1\16\10\17\2\0\30\17\2\0"+
    "\1\20\11\0\1\u0103\47\0\1\344\6\0\1\u0103\46\0"+
    "\3\45\1\44\2\0\1\16\1\17\1\16\10\17\2\0"+
    "\20\17\1\u0104\7\17\2\0\1\20\1\0\3\45\1\44"+
    "\2\0\1\16\1\17\1\16\10\17\2\0\4\17\1\u0105"+
    "\23\17\2\0\1\20\1\0\2\u0106\1\u0107\64\0\1\u0108"+
    "\47\0\1\354\6\0\1\u0108\56\0\1\u0109\47\0\1\356"+
    "\6\0\1\u0109\46\0\3\45\1\44\2\0\1\16\1\17"+
    "\1\16\10\17\2\0\4\17\1\u010a\23\17\2\0\1\20"+
    "\1\0\3\45\1\44\2\0\1\16\1\17\1\16\10\17"+
    "\2\0\4\17\1\u010b\23\17\2\0\1\20\1\0\3\45"+
    "\1\44\2\0\1\16\1\17\1\16\10\17\2\0\3\17"+
    "\1\u010c\24\17\2\0\1\20\1\0\3\45\1\u010d\3\0"+
    "\1\20\1\0\10\20\2\0\30\20\2\0\1\20\1\0"+
    "\1\45\1\364\1\45\1\u010d\3\0\1\20\1\0\10\20"+
    "\2\0\30\20\2\0\1\20\1\0\2\u010e\1\u010f\1\44"+
    "\2\0\1\16\1\17\1\16\10\17\2\0\30\17\2\0"+
    "\1\20\1\0\3\45\1\44\2\0\1\16\1\17\1\16"+
    "\10\17\2\0\15\17\1\u0110\12\17\2\0\1\20\1\0"+
    "\3\45\1\44\2\0\1\16\1\17\1\16\10\17\2\0"+
    "\26\17\1\u0111\1\17\2\0\1\20\1\0\3\45\1\u0112"+
    "\3\0\1\20\1\0\10\20\2\0\30\20\2\0\1\20"+
    "\1\0\1\45\1\373\1\45\1\u0112\3\0\1\20\1\0"+
    "\10\20\2\0\30\20\2\0\1\20\11\0\1\u0113\47\0"+
    "\1\375\6\0\1\u0113\56\0\1\u0114\47\0\1\377\6\0"+
    "\1\u0114\46\0\3\45\1\u0115\3\0\1\20\1\0\10\20"+
    "\2\0\30\20\2\0\1\20\1\0\1\45\1\u0101\1\45"+
    "\1\u0115\3\0\1\20\1\0\10\20\2\0\30\20\2\0"+
    "\1\20\1\0\3\45\1\44\2\0\1\16\1\17\1\16"+
    "\10\17\2\0\10\17\1\u0116\17\17\2\0\1\20\1\0"+
    "\2\u0117\1\u0118\1\44\2\0\1\16\1\17\1\16\10\17"+
    "\2\0\30\17\2\0\1\20\11\0\1\u0119\47\0\1\u0106"+
    "\6\0\1\u0119\46\0\3\45\1\44\2\0\1\16\1\17"+
    "\1\16\10\17\2\0\12\17\1\u011a\15\17\2\0\1\20"+
    "\1\0\3\45\1\44\2\0\1\16\1\17\1\16\10\17"+
    "\2\0\12\17\1\u011b\15\17\2\0\1\20\1\0\3\45"+
    "\1\44\2\0\1\16\1\17\1\16\2\17\1\u011c\5\17"+
    "\2\0\30\17\2\0\1\20\1\0\2\u011d\1\u011e\54\0"+
    "\3\45\1\u011f\3\0\1\20\1\0\10\20\2\0\30\20"+
    "\2\0\1\20\1\0\1\45\1\u010e\1\45\1\u011f\3\0"+
    "\1\20\1\0\10\20\2\0\30\20\2\0\1\20\1\0"+
    "\3\45\1\44\2\0\1\16\1\17\1\16\10\17\2\0"+
    "\14\17\1\u0120\13\17\2\0\1\20\1\0\2\u0121\1\u0122"+
    "\1\44\2\0\1\16\1\17\1\16\10\17\2\0\30\17"+
    "\2\0\1\20\1\0\2\u0123\1\u0124\54\0\2\u0125\1\u0126"+
    "\54\0\3\45\1\44\2\0\1\16\1\17\1\16\10\17"+
    "\2\0\21\17\1\u0127\6\17\2\0\1\20\1\0\3\45"+
    "\1\u0128\3\0\1\20\1\0\10\20\2\0\30\20\2\0"+
    "\1\20\1\0\1\45\1\u0117\1\45\1\u0128\3\0\1\20"+
    "\1\0\10\20\2\0\30\20\2\0\1\20\1\0\2\u0129"+
    "\1\u012a\1\44\2\0\1\16\1\17\1\16\10\17\2\0"+
    "\30\17\2\0\1\20\1\0\2\u012b\1\u012c\1\44\2\0"+
    "\1\16\1\17\1\16\10\17\2\0\30\17\2\0\1\20"+
    "\1\0\3\45\1\44\2\0\1\16\1\17\1\16\10\17"+
    "\2\0\15\17\1\u012d\12\17\2\0\1\20\11\0\1\u012e"+
    "\47\0\1\u011d\6\0\1\u012e\46\0\2\u012f\1\u0130\54\0"+
    "\2\u0131\1\u0132\1\44\2\0\1\16\1\17\1\16\10\17"+
    "\2\0\30\17\2\0\1\20\1\0\3\45\1\u0133\3\0"+
    "\1\20\1\0\10\20\2\0\30\20\2\0\1\20\1\0"+
    "\1\45\1\u0121\1\45\1\u0133\3\0\1\20\1\0\10\20"+
    "\2\0\30\20\2\0\1\20\11\0\1\u0134\47\0\1\u0123"+
    "\6\0\1\u0134\56\0\1\u0135\47\0\1\u0125\6\0\1\u0135"+
    "\46\0\3\45\1\44\2\0\1\16\1\17\1\16\10\17"+
    "\2\0\10\17\1\u0136\17\17\2\0\1\20\1\0\2\u0137"+
    "\1\u0138\54\0\3\45\1\u0139\3\0\1\20\1\0\10\20"+
    "\2\0\30\20\2\0\1\20\1\0\1\45\1\u0129\1\45"+
    "\1\u0139\3\0\1\20\1\0\10\20\2\0\30\20\2\0"+
    "\1\20\1\0\3\45\1\u013a\3\0\1\20\1\0\10\20"+
    "\2\0\30\20\2\0\1\20\1\0\1\45\1\u012b\1\45"+
    "\1\u013a\3\0\1\20\1\0\10\20\2\0\30\20\2\0"+
    "\1\20\1\0\3\45\1\44\2\0\1\16\1\17\1\16"+
    "\10\17\2\0\12\17\1\u013b\15\17\2\0\1\20\11\0"+
    "\1\u013c\47\0\1\u012f\6\0\1\u013c\46\0\3\45\1\u013d"+
    "\3\0\1\20\1\0\10\20\2\0\30\20\2\0\1\20"+
    "\1\0\1\45\1\u0131\1\45\1\u013d\3\0\1\20\1\0"+
    "\10\20\2\0\30\20\2\0\1\20\1\0\2\u013e\1\u013f"+
    "\54\0\3\45\1\44\2\0\1\16\1\17\1\16\10\17"+
    "\2\0\15\17\1\u0140\12\17\2\0\1\20\11\0\1\u0141"+
    "\47\0\1\u0137\6\0\1\u0141\46\0\2\u0142\1\u0143\54\0"+
    "\2\u0144\1\u0145\54\0\3\45\1\44\2\0\1\16\1\17"+
    "\1\16\10\17\2\0\15\17\1\u0146\12\17\2\0\1\20"+
    "\1\0\2\u0147\1\u0148\64\0\1\u0149\47\0\1\u013e\6\0"+
    "\1\u0149\46\0\3\45\1\44\2\0\1\16\1\17\1\16"+
    "\10\17\2\0\14\17\1\u014a\13\17\2\0\1\20\11\0"+
    "\1\u014b\47\0\1\u0142\6\0\1\u014b\56\0\1\u014c\47\0"+
    "\1\u0144\6\0\1\u014c\46\0\3\45\1\44\2\0\1\16"+
    "\1\17\1\16\10\17\2\0\17\17\1\u014d\10\17\2\0"+
    "\1\20\11\0\1\u014e\47\0\1\u0147\6\0\1\u014e\46\0"+
    "\2\u014f\1\u0150\1\44\2\0\1\16\1\17\1\16\10\17"+
    "\2\0\30\17\2\0\1\20\1\0\2\u0151\1\u0152\1\44"+
    "\2\0\1\16\1\17\1\16\10\17\2\0\30\17\2\0"+
    "\1\20\1\0\3\45\1\u0153\3\0\1\20\1\0\10\20"+
    "\2\0\30\20\2\0\1\20\1\0\1\45\1\u014f\1\45"+
    "\1\u0153\3\0\1\20\1\0\10\20\2\0\30\20\2\0"+
    "\1\20\1\0\3\45\1\u0154\3\0\1\20\1\0\10\20"+
    "\2\0\30\20\2\0\1\20\1\0\1\45\1\u0151\1\45"+
    "\1\u0154\3\0\1\20\1\0\10\20\2\0\30\20\2\0"+
    "\1\20\1\0\2\u0155\1\u0156\54\0\2\u0157\1\u0158\64\0"+
    "\1\u0159\47\0\1\u0155\6\0\1\u0159\56\0\1\u015a\47\0"+
    "\1\u0157\6\0\1\u015a\45\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[14617];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\2\11\2\1\1\11\1\1\4\11\6\0\1\11"+
    "\21\0\1\11\57\0\1\1\1\0\1\1\71\0\1\11"+
    "\1\0\1\11\11\0\1\1\5\0\1\1\5\0\2\1"+
    "\1\0\1\1\11\0\2\1\15\0\1\1\12\0\2\1"+
    "\13\0\1\11\3\0\2\1\1\11\5\0\2\11\1\1"+
    "\1\11\6\0\1\11\3\0\2\11\13\0\1\11\4\0"+
    "\2\11\3\0\1\1\4\0\1\1\2\11\1\1\3\0"+
    "\1\11\5\0\1\1\10\0\1\1\5\0\1\11\4\0"+
    "\1\1\2\11\3\0\2\1\1\0\1\11\1\1\3\0"+
    "\1\11\7\0\1\11\1\0\2\11\1\0\1\11\4\0"+
    "\2\1\4\0\2\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[346];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen())];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;

  /* user code: */
    public LexerDashb(Reader myReader, DefaultSymbolFactory myFactory) { this(myReader); this.myFactory = myFactory; }

    private DefaultSymbolFactory myFactory = null;

    private Symbol symbol(String name, int sym) {
        int izq = (int)yychar+1;
        int der = (int)yychar+yylength();
        Symbol mySymbol = myFactory.newSymbol(name, sym, izq, der);
        return mySymbol;
    }
    private Symbol symbol(String name, int sym, Object val) {
        int izq = (int)yychar+1;
        int der = (int)yychar+yylength();
        Symbol mySymbol = myFactory.newSymbol(name, sym, izq, der, val);
        return mySymbol;
    }

    public class Punto
    {
        public int yycolumn;
        public int yyline;
        public int yylength;
        public int yychar;

        public Punto(int yycolumn, int yyline, int yylength, int yychar)
        {
            this.yycolumn = yycolumn;
            this.yyline = yyline;
            this.yylength = yylength;
            this.yychar = yychar;
        }

        @Override
        public String toString()
        {
            return "line="+yyline+",col="+yycolumn+",leng="+yylength+",char="+yychar;
        }
        
        public String getValues()
        {
            return "y="+yyline+",x="+yycolumn+",l="+yylength+",c="+yychar;
        }
    }

    public Punto getPuntoActual(){ return new Punto(yycolumn, yyline, yylength(), (int)yychar+1); };

    // para errores lexicos
    private StringBuilder log = new StringBuilder();
    private StringBuilder log(String text) { return log.append(text); }

    
    /*
    ComplexSymbolFactory myFactory = null;

    public Lexer(Reader in, ComplexSymbolFactory sf) { this(in); myFactory = sf; }

    private Symbol symbol(String name, int sym) {
        Location izq = new Location(yyline+1, yycolumn+1, (int)yychar);
        Location der = new Location(yyline+1, yycolumn+yylength(), (int)yychar+yylength());
        Symbol mySymbol = myFactory.newSymbol(name, sym, izq, der);
        return mySymbol;
    }
    private Symbol symbol(String name, int sym, Object val) {
        Location izq = new Location(yyline+1, yycolumn+1, (int)yychar);
        Location der = new Location(yyline+1, yycolumn+yylength(), (int)yychar+yylength());
        Symbol mySymbol = myFactory.newSymbol(name, sym, izq, der, val);
        return mySymbol;
    }*/


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public LexerDashb(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate && zzCanGrow()) {
      /* if not, and it can grow: blow it up */
      char newBuffer[] = new char[Math.min(zzBuffer.length * 2, zzMaxBufferLen())];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      if (requested == 0) {
        throw new java.io.EOFException("Scan buffer limit reached ["+zzBuffer.length+"]");
      }
      else {
        throw new java.io.IOException(
            "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
      }
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    int initBufferSize = Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen());
    if (zzBuffer.length > initBufferSize) {
      zzBuffer = new char[initBufferSize];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
  yyclose();    }
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  @Override  public java_cup.runtime.Symbol next_token() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(ParserDashbSym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { log("@lexer: ").append(getPunto().toString()).append("\n"); return symbol("",ParserDashbSym.error);
            }
          // fall through
          case 38: break;
          case 2:
            { 
            }
          // fall through
          case 39: break;
          case 3:
            { return symbol("",ParserDashbSym.COMA);
            }
          // fall through
          case 40: break;
          case 4:
            { return symbol("",ParserDashbSym.MI_INTEGER);
            }
          // fall through
          case 41: break;
          case 5:
            { return symbol("",ParserDashbSym.IZQCORCH);
            }
          // fall through
          case 42: break;
          case 6:
            { return symbol("",ParserDashbSym.DERCORCH);
            }
          // fall through
          case 43: break;
          case 7:
            { return symbol("",ParserDashbSym.IZQLLAVE);
            }
          // fall through
          case 44: break;
          case 8:
            { return symbol("",ParserDashbSym.DERLLAVE);
            }
          // fall through
          case 45: break;
          case 9:
            { return symbol("",ParserDashbSym.MI_TEXTO);
            }
          // fall through
          case 46: break;
          case 10:
            { return symbol("",ParserDashbSym.MI_URL);
            }
          // fall through
          case 47: break;
          case 11:
            { return symbol("",ParserDashbSym.KD_X);
            }
          // fall through
          case 48: break;
          case 12:
            { return symbol("",ParserDashbSym.KD_Y);
            }
          // fall through
          case 49: break;
          case 13:
            { return symbol("",ParserDashbSym.KD_DATA);
            }
          // fall through
          case 50: break;
          case 14:
            { return symbol("",ParserDashbSym.KD_ICON);
            }
          // fall through
          case 51: break;
          case 15:
            { return symbol("",ParserDashbSym.KD_LINK);
            }
          // fall through
          case 52: break;
          case 16:
            { return symbol("",ParserDashbSym.KD_NAME);
            }
          // fall through
          case 53: break;
          case 17:
            { return symbol("",ParserDashbSym.KD_SIZE);
            }
          // fall through
          case 54: break;
          case 18:
            { return symbol("",ParserDashbSym.MI_COLOR);
            }
          // fall through
          case 55: break;
          case 19:
            { return symbol("",ParserDashbSym.KD_CHART);
            }
          // fall through
          case 56: break;
          case 20:
            { return symbol("",ParserDashbSym.KD_COLOR);
            }
          // fall through
          case 57: break;
          case 21:
            { return symbol("",ParserDashbSym.KD_LABEL);
            }
          // fall through
          case 58: break;
          case 22:
            { return symbol("",ParserDashbSym.KD_TITLE);
            }
          // fall through
          case 59: break;
          case 23:
            { return symbol("",ParserDashbSym.KD_VALUE);
            }
          // fall through
          case 60: break;
          case 24:
            { return symbol("",ParserDashbSym.KD_FOOTER);
            }
          // fall through
          case 61: break;
          case 25:
            { return symbol("",ParserDashbSym.KD_HEADER);
            }
          // fall through
          case 62: break;
          case 26:
            { return symbol("",ParserDashbSym.KD_PONTS);
            }
          // fall through
          case 63: break;
          case 27:
            { return symbol("",ParserDashbSym.KD_CATEGORY);
            }
          // fall through
          case 64: break;
          case 28:
            { return symbol("",ParserDashbSym.KD_FONTSIZE);
            }
          // fall through
          case 65: break;
          case 29:
            { return symbol("",ParserDashbSym.KD_KEYWORDS);
            }
          // fall through
          case 66: break;
          case 30:
            { return symbol("",ParserDashbSym.KD_COPYR);
            }
          // fall through
          case 67: break;
          case 31:
            { return symbol("",ParserDashbSym.KD_LINE);
            }
          // fall through
          case 68: break;
          case 32:
            { return symbol("",ParserDashbSym.KD_FONTFAM);
            }
          // fall through
          case 69: break;
          case 33:
            { return symbol("",ParserDashbSym.KD_XLABEL);
            }
          // fall through
          case 70: break;
          case 34:
            { return symbol("",ParserDashbSym.KD_YLABEL);
            }
          // fall through
          case 71: break;
          case 35:
            { return symbol("",ParserDashbSym.KD_DESCRIP);
            }
          // fall through
          case 72: break;
          case 36:
            { return symbol("",ParserDashbSym.KD_LEGEND);
            }
          // fall through
          case 73: break;
          case 37:
            { return symbol("",ParserDashbSym.KD_BACKGR);
            }
          // fall through
          case 74: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
