
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package josq.lenguajes.automatas;

import java.util.ArrayList;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class ParserDashb extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return ParserDashbSym.class;
}

  /** Default constructor. */
  @Deprecated
  public ParserDashb() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public ParserDashb(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public ParserDashb(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\165\000\002\002\004\000\002\002\006\000\002\003" +
    "\003\000\002\003\004\000\002\004\003\000\002\004\003" +
    "\000\002\004\003\000\002\004\003\000\002\004\003\000" +
    "\002\004\003\000\002\004\003\000\002\004\003\000\002" +
    "\005\004\000\002\005\005\000\002\006\003\000\002\006" +
    "\004\000\002\007\014\000\002\010\005\000\002\011\006" +
    "\000\002\012\003\000\002\012\004\000\002\013\007\000" +
    "\002\014\004\000\002\014\005\000\002\015\007\000\002" +
    "\016\006\000\002\017\003\000\002\017\004\000\002\021" +
    "\011\000\002\020\004\000\002\020\005\000\002\022\005" +
    "\000\002\023\006\000\002\024\003\000\002\024\004\000" +
    "\002\026\007\000\002\025\004\000\002\025\005\000\002" +
    "\027\007\000\002\030\006\000\002\031\003\000\002\031" +
    "\004\000\002\033\011\000\002\032\004\000\002\032\005" +
    "\000\002\035\005\000\002\036\006\000\002\037\003\000" +
    "\002\037\004\000\002\041\007\000\002\040\007\000\002" +
    "\042\007\000\002\043\006\000\002\044\003\000\002\044" +
    "\004\000\002\046\013\000\002\045\004\000\002\045\005" +
    "\000\002\047\007\000\002\050\006\000\002\051\003\000" +
    "\002\051\004\000\002\052\007\000\002\053\004\000\002" +
    "\053\005\000\002\054\007\000\002\055\006\000\002\056" +
    "\003\000\002\056\004\000\002\057\013\000\002\060\004" +
    "\000\002\060\005\000\002\061\005\000\002\062\012\000" +
    "\002\063\020\000\002\124\004\000\002\125\004\000\002" +
    "\064\004\000\002\065\004\000\002\066\004\000\002\067" +
    "\004\000\002\070\004\000\002\071\004\000\002\072\004" +
    "\000\002\073\004\000\002\074\004\000\002\075\004\000" +
    "\002\076\004\000\002\077\004\000\002\100\004\000\002" +
    "\101\004\000\002\102\004\000\002\103\004\000\002\104" +
    "\004\000\002\105\004\000\002\106\006\000\002\107\006" +
    "\000\002\110\012\000\002\034\010\000\002\111\006\000" +
    "\002\112\002\000\002\112\003\000\002\112\004\000\002" +
    "\113\004\000\002\113\005\000\002\114\006\000\002\115" +
    "\003\000\002\115\004\000\002\116\007\000\002\117\004" +
    "\000\002\117\005\000\002\120\006\000\002\121\003\000" +
    "\002\121\004\000\002\122\004\000\002\122\005\000\002" +
    "\123\011" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u013f\000\004\010\005\001\002\000\004\002\u0141\001" +
    "\002\000\022\020\012\021\017\023\027\024\011\025\013" +
    "\041\010\042\006\043\024\001\002\000\004\010\u013c\001" +
    "\002\000\006\010\ufff6\014\ufff6\001\002\000\004\010\u0139" +
    "\001\002\000\004\004\u0138\001\002\000\004\004\u0137\001" +
    "\002\000\004\004\u0136\001\002\000\006\010\uffff\014\u0135" +
    "\001\002\000\004\010\046\001\002\000\006\010\ufff8\014" +
    "\ufff8\001\002\000\004\004\044\001\002\000\006\010\ufffb" +
    "\014\ufffb\001\002\000\022\020\012\021\017\023\027\024" +
    "\011\025\013\041\010\042\006\043\024\001\002\000\006" +
    "\010\ufff9\014\ufff9\001\002\000\006\010\ufff7\014\ufff7\001" +
    "\002\000\004\012\032\001\002\000\006\010\ufffc\014\ufffc" +
    "\001\002\000\006\010\ufffa\014\ufffa\001\002\000\004\007" +
    "\031\001\002\000\006\010\ufffd\014\ufffd\001\002\000\006" +
    "\010\uffae\014\uffae\001\002\000\006\004\035\013\uff9d\001" +
    "\002\000\004\004\040\001\002\000\004\013\037\001\002" +
    "\000\006\013\uff9c\014\036\001\002\000\004\004\uff9a\001" +
    "\002\000\006\010\uff9e\014\uff9e\001\002\000\006\013\uff9b" +
    "\014\041\001\002\000\004\004\uff99\001\002\000\006\010" +
    "\ufffe\014\043\001\002\000\022\020\ufff4\021\ufff4\023\ufff4" +
    "\024\ufff4\025\ufff4\041\ufff4\042\ufff4\043\ufff4\001\002\000" +
    "\010\010\uffb0\011\uffb0\014\uffb0\001\002\000\006\010\ufff3" +
    "\011\ufff3\001\002\000\004\015\u0125\001\002\000\004\010" +
    "\053\001\002\000\006\010\046\011\052\001\002\000\006" +
    "\010\ufff2\011\ufff2\001\002\000\004\002\000\001\002\000" +
    "\004\015\u010f\001\002\000\004\010\055\001\002\000\004" +
    "\015\377\001\002\000\004\010\060\001\002\000\004\010" +
    "\124\001\002\000\004\015\061\001\002\000\004\012\076" +
    "\001\002\000\004\014\063\001\002\000\004\016\065\001" +
    "\002\000\004\011\075\001\002\000\004\010\066\001\002" +
    "\000\004\020\012\001\002\000\004\014\070\001\002\000" +
    "\004\035\072\001\002\000\004\011\074\001\002\000\004" +
    "\004\073\001\002\000\004\011\uffa6\001\002\000\004\011" +
    "\uff9f\001\002\000\004\010\uffdb\001\002\000\004\010\102" +
    "\001\002\000\006\013\uffd9\014\122\001\002\000\004\010" +
    "\102\001\002\000\004\013\117\001\002\000\004\017\104" +
    "\001\002\000\004\014\106\001\002\000\004\004\105\001" +
    "\002\000\006\011\uffb4\014\uffb4\001\002\000\004\027\107" +
    "\001\002\000\004\006\116\001\002\000\004\014\111\001" +
    "\002\000\004\030\113\001\002\000\004\011\115\001\002" +
    "\000\004\007\114\001\002\000\006\011\uffa9\014\uffa9\001" +
    "\002\000\006\013\uffd7\014\uffd7\001\002\000\006\011\uffaa" +
    "\014\uffaa\001\002\000\004\014\uffda\001\002\000\006\013" +
    "\uffd8\014\121\001\002\000\004\010\uffd5\001\002\000\004" +
    "\010\uffd6\001\002\000\004\010\154\001\002\000\004\015" +
    "\125\001\002\000\004\012\130\001\002\000\004\011\127" +
    "\001\002\000\004\010\uffd4\001\002\000\004\010\133\001" +
    "\002\000\006\013\uffd2\014\147\001\002\000\004\010\133" +
    "\001\002\000\004\036\136\001\002\000\004\013\135\001" +
    "\002\000\004\011\uffd3\001\002\000\004\006\145\001\002" +
    "\000\004\014\140\001\002\000\004\037\142\001\002\000" +
    "\004\011\144\001\002\000\004\006\143\001\002\000\006" +
    "\011\uffa4\014\uffa4\001\002\000\006\013\uffd0\014\uffd0\001" +
    "\002\000\004\014\uffa5\001\002\000\004\013\uffd1\001\002" +
    "\000\004\010\133\001\002\000\004\014\147\001\002\000" +
    "\004\010\133\001\002\000\004\014\153\001\002\000\004" +
    "\010\uffcf\001\002\000\004\015\347\001\002\000\004\010" +
    "\157\001\002\000\004\010\237\001\002\000\004\015\160" +
    "\001\002\000\004\012\201\001\002\000\004\014\162\001" +
    "\002\000\004\016\164\001\002\000\004\011\200\001\002" +
    "\000\004\010\165\001\002\000\004\020\012\001\002\000" +
    "\004\014\167\001\002\000\004\033\171\001\002\000\004" +
    "\014\173\001\002\000\004\004\172\001\002\000\004\014" +
    "\uffa8\001\002\000\004\034\175\001\002\000\004\011\177" +
    "\001\002\000\004\004\176\001\002\000\004\011\uffa7\001" +
    "\002\000\004\011\uffa0\001\002\000\004\010\uffc7\001\002" +
    "\000\004\010\204\001\002\000\006\013\uffc5\014\235\001" +
    "\002\000\004\010\204\001\002\000\004\046\210\001\002" +
    "\000\004\013\206\001\002\000\004\014\uffc6\001\002\000" +
    "\004\014\212\001\002\000\004\004\211\001\002\000\004" +
    "\014\uffb5\001\002\000\004\044\214\001\002\000\004\011" +
    "\232\001\002\000\004\012\215\001\002\000\004\010\220" +
    "\001\002\000\004\013\231\001\002\000\004\010\220\001" +
    "\002\000\004\036\136\001\002\000\006\013\uff97\014\222" +
    "\001\002\000\004\010\uff94\001\002\000\004\014\224\001" +
    "\002\000\004\037\142\001\002\000\004\011\226\001\002" +
    "\000\006\013\uff95\014\uff95\001\002\000\006\013\uff96\014" +
    "\230\001\002\000\004\010\uff93\001\002\000\004\011\uff98" +
    "\001\002\000\006\013\uffc3\014\uffc3\001\002\000\006\013" +
    "\uffc4\014\234\001\002\000\004\010\uffc1\001\002\000\004" +
    "\010\uffc2\001\002\000\004\010\310\001\002\000\004\015" +
    "\240\001\002\000\004\012\245\001\002\000\004\014\242" +
    "\001\002\000\004\016\164\001\002\000\004\011\244\001" +
    "\002\000\004\010\uffc0\001\002\000\004\010\250\001\002" +
    "\000\004\010\250\001\002\000\004\013\305\001\002\000" +
    "\004\046\210\001\002\000\006\013\uffbe\014\252\001\002" +
    "\000\004\010\uffbb\001\002\000\004\014\254\001\002\000" +
    "\004\044\256\001\002\000\004\014\276\001\002\000\004" +
    "\012\257\001\002\000\004\010\262\001\002\000\004\010" +
    "\262\001\002\000\004\013\273\001\002\000\004\036\136" +
    "\001\002\000\006\013\uff91\014\264\001\002\000\004\010" +
    "\uff8f\001\002\000\004\014\266\001\002\000\004\037\142" +
    "\001\002\000\004\014\270\001\002\000\004\017\104\001" +
    "\002\000\004\011\272\001\002\000\006\013\uff8d\014\uff8d" +
    "\001\002\000\004\014\uff92\001\002\000\006\013\uff90\014" +
    "\275\001\002\000\004\010\uff8e\001\002\000\004\030\113" +
    "\001\002\000\004\014\300\001\002\000\004\045\302\001" +
    "\002\000\004\011\304\001\002\000\004\004\303\001\002" +
    "\000\004\011\uffb6\001\002\000\006\013\uffbc\014\uffbc\001" +
    "\002\000\004\014\uffbf\001\002\000\006\013\uffbd\014\307" +
    "\001\002\000\004\010\uffba\001\002\000\004\015\335\001" +
    "\002\000\004\015\312\001\002\000\004\010\314\001\002" +
    "\000\006\010\ufff1\011\ufff1\001\002\000\004\027\107\001" +
    "\002\000\004\014\316\001\002\000\004\017\104\001\002" +
    "\000\004\014\320\001\002\000\004\021\017\001\002\000" +
    "\004\014\322\001\002\000\004\031\324\001\002\000\004" +
    "\014\326\001\002\000\004\004\325\001\002\000\004\014" +
    "\uffb3\001\002\000\004\030\113\001\002\000\004\014\330" +
    "\001\002\000\004\032\332\001\002\000\004\011\334\001" +
    "\002\000\004\005\333\001\002\000\004\011\uffb2\001\002" +
    "\000\006\010\uffb7\011\uffb7\001\002\000\004\010\340\001" +
    "\002\000\004\011\337\001\002\000\004\015\uffb9\001\002" +
    "\000\004\027\107\001\002\000\004\014\342\001\002\000" +
    "\004\017\104\001\002\000\004\014\344\001\002\000\004" +
    "\021\017\001\002\000\004\011\346\001\002\000\004\011" +
    "\uffb8\001\002\000\004\012\354\001\002\000\004\014\351" +
    "\001\002\000\004\016\164\001\002\000\004\011\353\001" +
    "\002\000\004\010\uffce\001\002\000\004\010\357\001\002" +
    "\000\004\013\376\001\002\000\006\013\uffcc\014\375\001" +
    "\002\000\004\036\136\001\002\000\004\010\357\001\002" +
    "\000\006\013\uffcb\014\362\001\002\000\004\010\uffc8\001" +
    "\002\000\004\014\364\001\002\000\004\037\142\001\002" +
    "\000\004\014\366\001\002\000\004\040\370\001\002\000" +
    "\004\014\372\001\002\000\004\006\371\001\002\000\004" +
    "\014\uffa3\001\002\000\004\030\113\001\002\000\004\011" +
    "\374\001\002\000\006\013\uffca\014\uffca\001\002\000\004" +
    "\010\uffc9\001\002\000\004\014\uffcd\001\002\000\004\012" +
    "\u0102\001\002\000\004\011\u0101\001\002\000\004\010\uffe2" +
    "\001\002\000\004\010\u0105\001\002\000\006\013\uffe0\014" +
    "\u010e\001\002\000\004\010\u0105\001\002\000\004\017\104" +
    "\001\002\000\004\013\u0107\001\002\000\004\011\uffe1\001" +
    "\002\000\004\014\u0109\001\002\000\004\027\107\001\002" +
    "\000\004\011\u010b\001\002\000\006\013\uffde\014\uffde\001" +
    "\002\000\006\013\uffdf\014\u010d\001\002\000\004\010\uffdc" +
    "\001\002\000\004\010\uffdd\001\002\000\004\012\u0114\001" +
    "\002\000\004\014\u0111\001\002\000\004\016\164\001\002" +
    "\000\004\011\u0113\001\002\000\004\010\uffe9\001\002\000" +
    "\004\010\u0117\001\002\000\004\013\u0124\001\002\000\004" +
    "\010\u0117\001\002\000\004\026\u011a\001\002\000\006\013" +
    "\uffe7\014\u0119\001\002\000\004\010\uffe4\001\002\000\004" +
    "\004\u0121\001\002\000\004\014\u011c\001\002\000\004\027" +
    "\107\001\002\000\004\014\u011e\001\002\000\004\030\113" +
    "\001\002\000\004\011\u0120\001\002\000\006\013\uffe5\014" +
    "\uffe5\001\002\000\004\014\uffab\001\002\000\006\013\uffe6" +
    "\014\u0123\001\002\000\004\010\uffe3\001\002\000\004\014" +
    "\uffe8\001\002\000\004\012\u0128\001\002\000\004\011\u0127" +
    "\001\002\000\004\010\ufff0\001\002\000\004\010\u012a\001" +
    "\002\000\004\010\u012a\001\002\000\004\026\u011a\001\002" +
    "\000\004\013\u012e\001\002\000\006\013\uffee\014\u012d\001" +
    "\002\000\004\010\uffeb\001\002\000\004\011\uffef\001\002" +
    "\000\004\014\u0130\001\002\000\004\027\107\001\002\000" +
    "\004\011\u0132\001\002\000\006\013\uffec\014\uffec\001\002" +
    "\000\006\013\uffed\014\u0134\001\002\000\004\010\uffea\001" +
    "\002\000\022\020\ufff5\021\ufff5\023\ufff5\024\ufff5\025\ufff5" +
    "\041\ufff5\042\ufff5\043\ufff5\001\002\000\006\010\uffac\014" +
    "\uffac\001\002\000\010\010\uffb1\011\uffb1\014\uffb1\001\002" +
    "\000\006\010\uffad\014\uffad\001\002\000\004\020\012\001" +
    "\002\000\004\011\u013b\001\002\000\006\010\uffa2\014\uffa2" +
    "\001\002\000\004\022\u013d\001\002\000\004\004\u0140\001" +
    "\002\000\004\011\u013f\001\002\000\006\010\uffa1\014\uffa1" +
    "\001\002\000\004\011\uffaf\001\002\000\004\002\001\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u013f\000\004\002\003\001\001\000\002\001\001\000" +
    "\030\003\014\004\013\005\020\067\027\070\024\072\015" +
    "\073\022\074\006\106\025\107\021\111\017\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\006\047\007\044\010\046\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\024\004" +
    "\041\067\027\070\024\072\015\073\022\074\006\106\025" +
    "\107\021\111\017\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\112\033\113\032\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\011\u0125\001\001\000\004\015\053\001\001\000\006" +
    "\007\050\010\046\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\016\u010f\001\001\000\004\022\055\001\001" +
    "\000\004\023\377\001\001\000\004\027\056\001\001\000" +
    "\004\035\122\001\001\000\004\030\061\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\034\063\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\067\066\001\001" +
    "\000\002\001\001\000\004\102\070\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\031\100\032\077\033\076\001" +
    "\001\000\002\001\001\000\004\033\117\001\001\000\002" +
    "\001\001\000\004\064\102\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\076\107\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\077\111\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\042\154\001\001\000\004\036\125\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\037\133" +
    "\040\131\041\130\001\001\000\002\001\001\000\004\041" +
    "\145\001\001\000\004\103\136\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\104\140\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\040\150\041\147\001\001\000\002" +
    "\001\001\000\004\041\151\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\043\347\001\001\000\004\047\155" +
    "\001\001\000\004\054\235\001\001\000\004\050\160\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\110\162" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\067" +
    "\165\001\001\000\002\001\001\000\004\100\167\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\101\173\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\051\204\052\201\053\202\001\001\000\002\001\001" +
    "\000\004\052\232\001\001\000\004\125\206\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\114\212\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\115\215\116\220" +
    "\117\216\001\001\000\002\001\001\000\004\116\226\001" +
    "\001\000\004\103\222\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\104\224\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\061\310" +
    "\001\001\000\004\055\240\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\110\242\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\056\246\057\250\060\245\001" +
    "\001\000\004\057\305\001\001\000\002\001\001\000\004" +
    "\125\252\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\120\254\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\121\260\122\257\123\262\001" +
    "\001\000\004\123\273\001\001\000\002\001\001\000\004" +
    "\103\264\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\104\266\001\001\000\002\001\001" +
    "\000\004\064\270\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\077\276\001\001\000\002\001\001\000\004\124" +
    "\300\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\062\335\001\001\000\004" +
    "\063\312\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\076\314\001\001\000\002\001\001\000\004\064\316" +
    "\001\001\000\002\001\001\000\004\070\320\001\001\000" +
    "\002\001\001\000\004\065\322\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\077\326\001" +
    "\001\000\002\001\001\000\004\066\330\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\076\340\001\001\000\002\001\001\000\004\064" +
    "\342\001\001\000\002\001\001\000\004\070\344\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\110\351\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\044\354\045\357\046\355\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\103\362" +
    "\001\001\000\004\046\360\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\104\364\001\001" +
    "\000\002\001\001\000\004\105\366\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\077\372" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\024\u0105\025\u0103\026\u0102\001" +
    "\001\000\002\001\001\000\004\026\u010b\001\001\000\004" +
    "\064\u0107\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\076\u0109\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\110\u0111\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\017\u0114\020\u0115\021\u0117\001\001\000\002\001\001" +
    "\000\004\021\u0121\001\001\000\004\075\u011a\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\076\u011c\001\001\000\002\001\001\000" +
    "\004\077\u011e\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\012\u012a\013\u012b\014\u0128\001\001\000" +
    "\004\013\u0132\001\001\000\004\075\u012e\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\076\u0130\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\067\u0139\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\071\u013d\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$ParserDashb$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$ParserDashb$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$ParserDashb$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$ParserDashb$actions {


    void print(String teXto){ System.out.print(teXto); } 

  private final ParserDashb parser;

  /** Constructor */
  CUP$ParserDashb$actions(ParserDashb parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$ParserDashb$do_action_part00000000(
    int                        CUP$ParserDashb$act_num,
    java_cup.runtime.lr_parser CUP$ParserDashb$parser,
    java.util.Stack            CUP$ParserDashb$stack,
    int                        CUP$ParserDashb$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$ParserDashb$result;

      /* select the action based on the action number */
      switch (CUP$ParserDashb$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= dashboard EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-1)).value;
		RESULT = start_val;
              CUP$ParserDashb$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-1)), ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$ParserDashb$parser.done_parsing();
          return CUP$ParserDashb$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // dashboard ::= IZQLLAVE properties graficos DERLLAVE 
            {
              Object RESULT =null;

              CUP$ParserDashb$result = parser.getSymbolFactory().newSymbol("dashboard",0, ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-3)), ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), RESULT);
            }
          return CUP$ParserDashb$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // properties ::= property 
            {
              Object RESULT =null;

              CUP$ParserDashb$result = parser.getSymbolFactory().newSymbol("properties",1, ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), RESULT);
            }
          return CUP$ParserDashb$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // properties ::= propertyList property 
            {
              Object RESULT =null;

              CUP$ParserDashb$result = parser.getSymbolFactory().newSymbol("properties",1, ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-1)), ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), RESULT);
            }
          return CUP$ParserDashb$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // property ::= title 
            {
              Object RESULT =null;

              CUP$ParserDashb$result = parser.getSymbolFactory().newSymbol("property",2, ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), RESULT);
            }
          return CUP$ParserDashb$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // property ::= description 
            {
              Object RESULT =null;

              CUP$ParserDashb$result = parser.getSymbolFactory().newSymbol("property",2, ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), RESULT);
            }
          return CUP$ParserDashb$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // property ::= keywords 
            {
              Object RESULT =null;

              CUP$ParserDashb$result = parser.getSymbolFactory().newSymbol("property",2, ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), RESULT);
            }
          return CUP$ParserDashb$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // property ::= header 
            {
              Object RESULT =null;

              CUP$ParserDashb$result = parser.getSymbolFactory().newSymbol("property",2, ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), RESULT);
            }
          return CUP$ParserDashb$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // property ::= footer 
            {
              Object RESULT =null;

              CUP$ParserDashb$result = parser.getSymbolFactory().newSymbol("property",2, ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), RESULT);
            }
          return CUP$ParserDashb$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // property ::= backgr 
            {
              Object RESULT =null;

              CUP$ParserDashb$result = parser.getSymbolFactory().newSymbol("property",2, ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), RESULT);
            }
          return CUP$ParserDashb$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // property ::= fontFam 
            {
              Object RESULT =null;

              CUP$ParserDashb$result = parser.getSymbolFactory().newSymbol("property",2, ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), RESULT);
            }
          return CUP$ParserDashb$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // property ::= fontSize 
            {
              Object RESULT =null;

              CUP$ParserDashb$result = parser.getSymbolFactory().newSymbol("property",2, ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), RESULT);
            }
          return CUP$ParserDashb$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // propertyList ::= property COMA 
            {
              Object RESULT =null;

              CUP$ParserDashb$result = parser.getSymbolFactory().newSymbol("propertyList",3, ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-1)), ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), RESULT);
            }
          return CUP$ParserDashb$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // propertyList ::= propertyList property COMA 
            {
              Object RESULT =null;

              CUP$ParserDashb$result = parser.getSymbolFactory().newSymbol("propertyList",3, ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-2)), ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), RESULT);
            }
          return CUP$ParserDashb$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // graficos ::= grafico 
            {
              Object RESULT =null;

              CUP$ParserDashb$result = parser.getSymbolFactory().newSymbol("graficos",4, ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), RESULT);
            }
          return CUP$ParserDashb$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // graficos ::= graficos grafico 
            {
              Object RESULT =null;

              CUP$ParserDashb$result = parser.getSymbolFactory().newSymbol("graficos",4, ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-1)), ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), RESULT);
            }
          return CUP$ParserDashb$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // grafico ::= barras barrasXt pastel pastelXt puntos puntosXt lineas lineasXt tarjeta tarjetaXt 
            {
              Object RESULT =null;

              CUP$ParserDashb$result = parser.getSymbolFactory().newSymbol("grafico",5, ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-9)), ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), RESULT);
            }
          return CUP$ParserDashb$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // barras ::= IZQLLAVE barrasData DERLLAVE 
            {
              Object RESULT =null;

              CUP$ParserDashb$result = parser.getSymbolFactory().newSymbol("barras",6, ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-2)), ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), RESULT);
            }
          return CUP$ParserDashb$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // barrasData ::= KD_DATA IZQCORCH barrasDataList DERCORCH 
            {
              Object RESULT =null;

              CUP$ParserDashb$result = parser.getSymbolFactory().newSymbol("barrasData",7, ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-3)), ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), RESULT);
            }
          return CUP$ParserDashb$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // barrasDataList ::= barrasDataValue 
            {
              Object RESULT =null;

              CUP$ParserDashb$result = parser.getSymbolFactory().newSymbol("barrasDataList",8, ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), RESULT);
            }
          return CUP$ParserDashb$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // barrasDataList ::= barrasDataList2 barrasDataValue 
            {
              Object RESULT =null;

              CUP$ParserDashb$result = parser.getSymbolFactory().newSymbol("barrasDataList",8, ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-1)), ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), RESULT);
            }
          return CUP$ParserDashb$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // barrasDataValue ::= IZQLLAVE category COMA value DERLLAVE 
            {
              Object RESULT =null;

              CUP$ParserDashb$result = parser.getSymbolFactory().newSymbol("barrasDataValue",9, ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-4)), ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), RESULT);
            }
          return CUP$ParserDashb$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // barrasDataList2 ::= barrasDataValue COMA 
            {
              Object RESULT =null;

              CUP$ParserDashb$result = parser.getSymbolFactory().newSymbol("barrasDataList2",10, ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-1)), ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), RESULT);
            }
          return CUP$ParserDashb$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // barrasDataList2 ::= barrasDataList2 barrasDataValue COMA 
            {
              Object RESULT =null;

              CUP$ParserDashb$result = parser.getSymbolFactory().newSymbol("barrasDataList2",10, ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-2)), ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), RESULT);
            }
          return CUP$ParserDashb$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // barrasXt ::= IZQLLAVE barrasXtData COMA chart DERLLAVE 
            {
              Object RESULT =null;

              CUP$ParserDashb$result = parser.getSymbolFactory().newSymbol("barrasXt",11, ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-4)), ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), RESULT);
            }
          return CUP$ParserDashb$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // barrasXtData ::= KD_DATA IZQCORCH barrasXtDataList DERCORCH 
            {
              Object RESULT =null;

              CUP$ParserDashb$result = parser.getSymbolFactory().newSymbol("barrasXtData",12, ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-3)), ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), RESULT);
            }
          return CUP$ParserDashb$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // barrasXtDataList ::= barrasXtDataValue 
            {
              Object RESULT =null;

              CUP$ParserDashb$result = parser.getSymbolFactory().newSymbol("barrasXtDataList",13, ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), RESULT);
            }
          return CUP$ParserDashb$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // barrasXtDataList ::= barrasXtDataList2 barrasXtDataValue 
            {
              Object RESULT =null;

              CUP$ParserDashb$result = parser.getSymbolFactory().newSymbol("barrasXtDataList",13, ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-1)), ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), RESULT);
            }
          return CUP$ParserDashb$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // barrasXtDataValue ::= IZQLLAVE category COMA value COMA color DERLLAVE 
            {
              Object RESULT =null;

              CUP$ParserDashb$result = parser.getSymbolFactory().newSymbol("barrasXtDataValue",15, ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-6)), ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), RESULT);
            }
          return CUP$ParserDashb$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // barrasXtDataList2 ::= barrasXtDataValue COMA 
            {
              Object RESULT =null;

              CUP$ParserDashb$result = parser.getSymbolFactory().newSymbol("barrasXtDataList2",14, ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-1)), ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), RESULT);
            }
          return CUP$ParserDashb$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // barrasXtDataList2 ::= barrasXtDataList2 barrasXtDataValue COMA 
            {
              Object RESULT =null;

              CUP$ParserDashb$result = parser.getSymbolFactory().newSymbol("barrasXtDataList2",14, ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-2)), ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), RESULT);
            }
          return CUP$ParserDashb$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // pastel ::= IZQLLAVE pastelData DERLLAVE 
            {
              Object RESULT =null;

              CUP$ParserDashb$result = parser.getSymbolFactory().newSymbol("pastel",16, ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-2)), ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), RESULT);
            }
          return CUP$ParserDashb$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // pastelData ::= KD_DATA IZQCORCH pastelDataList DERCORCH 
            {
              Object RESULT =null;

              CUP$ParserDashb$result = parser.getSymbolFactory().newSymbol("pastelData",17, ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-3)), ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), RESULT);
            }
          return CUP$ParserDashb$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // pastelDataList ::= pastelDataValue 
            {
              Object RESULT =null;

              CUP$ParserDashb$result = parser.getSymbolFactory().newSymbol("pastelDataList",18, ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), RESULT);
            }
          return CUP$ParserDashb$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // pastelDataList ::= pastelDataList2 pastelDataValue 
            {
              Object RESULT =null;

              CUP$ParserDashb$result = parser.getSymbolFactory().newSymbol("pastelDataList",18, ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-1)), ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), RESULT);
            }
          return CUP$ParserDashb$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // pastelDataValue ::= IZQLLAVE label COMA value DERLLAVE 
            {
              Object RESULT =null;

              CUP$ParserDashb$result = parser.getSymbolFactory().newSymbol("pastelDataValue",20, ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-4)), ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), RESULT);
            }
          return CUP$ParserDashb$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // pastelDataList2 ::= pastelDataValue COMA 
            {
              Object RESULT =null;

              CUP$ParserDashb$result = parser.getSymbolFactory().newSymbol("pastelDataList2",19, ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-1)), ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), RESULT);
            }
          return CUP$ParserDashb$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // pastelDataList2 ::= pastelDataList2 pastelDataValue COMA 
            {
              Object RESULT =null;

              CUP$ParserDashb$result = parser.getSymbolFactory().newSymbol("pastelDataList2",19, ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-2)), ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), RESULT);
            }
          return CUP$ParserDashb$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // pastelXt ::= IZQLLAVE pastelXtData COMA pastelXtChart DERLLAVE 
            {
              Object RESULT =null;

              CUP$ParserDashb$result = parser.getSymbolFactory().newSymbol("pastelXt",21, ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-4)), ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), RESULT);
            }
          return CUP$ParserDashb$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // pastelXtData ::= KD_DATA IZQCORCH pastelXtDataList DERCORCH 
            {
              Object RESULT =null;

              CUP$ParserDashb$result = parser.getSymbolFactory().newSymbol("pastelXtData",22, ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-3)), ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), RESULT);
            }
          return CUP$ParserDashb$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // pastelXtDataList ::= pastelXtDataValue 
            {
              Object RESULT =null;

              CUP$ParserDashb$result = parser.getSymbolFactory().newSymbol("pastelXtDataList",23, ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), RESULT);
            }
          return CUP$ParserDashb$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // pastelXtDataList ::= pastelXtDataList2 pastelXtDataValue 
            {
              Object RESULT =null;

              CUP$ParserDashb$result = parser.getSymbolFactory().newSymbol("pastelXtDataList",23, ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-1)), ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), RESULT);
            }
          return CUP$ParserDashb$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // pastelXtDataValue ::= IZQLLAVE label COMA value COMA color DERLLAVE 
            {
              Object RESULT =null;

              CUP$ParserDashb$result = parser.getSymbolFactory().newSymbol("pastelXtDataValue",25, ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-6)), ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), RESULT);
            }
          return CUP$ParserDashb$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // pastelXtDataList2 ::= pastelXtDataValue COMA 
            {
              Object RESULT =null;

              CUP$ParserDashb$result = parser.getSymbolFactory().newSymbol("pastelXtDataList2",24, ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-1)), ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), RESULT);
            }
          return CUP$ParserDashb$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // pastelXtDataList2 ::= pastelXtDataList2 pastelXtDataValue COMA 
            {
              Object RESULT =null;

              CUP$ParserDashb$result = parser.getSymbolFactory().newSymbol("pastelXtDataList2",24, ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-2)), ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), RESULT);
            }
          return CUP$ParserDashb$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // puntos ::= IZQLLAVE puntosData DERLLAVE 
            {
              Object RESULT =null;

              CUP$ParserDashb$result = parser.getSymbolFactory().newSymbol("puntos",27, ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-2)), ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), RESULT);
            }
          return CUP$ParserDashb$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // puntosData ::= KD_DATA IZQCORCH puntosDataList DERCORCH 
            {
              Object RESULT =null;

              CUP$ParserDashb$result = parser.getSymbolFactory().newSymbol("puntosData",28, ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-3)), ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), RESULT);
            }
          return CUP$ParserDashb$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // puntosDataList ::= puntosDataValue 
            {
              Object RESULT =null;

              CUP$ParserDashb$result = parser.getSymbolFactory().newSymbol("puntosDataList",29, ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), RESULT);
            }
          return CUP$ParserDashb$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // puntosDataList ::= puntosDataList2 puntosDataValue 
            {
              Object RESULT =null;

              CUP$ParserDashb$result = parser.getSymbolFactory().newSymbol("puntosDataList",29, ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-1)), ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), RESULT);
            }
          return CUP$ParserDashb$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // puntosDataValue ::= IZQLLAVE xValue COMA yValue DERLLAVE 
            {
              Object RESULT =null;

              CUP$ParserDashb$result = parser.getSymbolFactory().newSymbol("puntosDataValue",31, ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-4)), ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), RESULT);
            }
          return CUP$ParserDashb$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // puntosDataList2 ::= puntosDataValue COMA puntosDataList2 puntosDataValue COMA 
            {
              Object RESULT =null;

              CUP$ParserDashb$result = parser.getSymbolFactory().newSymbol("puntosDataList2",30, ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-4)), ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), RESULT);
            }
          return CUP$ParserDashb$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // puntosXt ::= IZQLLAVE puntosXtData COMA chart DERLLAVE 
            {
              Object RESULT =null;

              CUP$ParserDashb$result = parser.getSymbolFactory().newSymbol("puntosXt",32, ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-4)), ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), RESULT);
            }
          return CUP$ParserDashb$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // puntosXtData ::= KD_DATA IZQCORCH puntosXtDataList DERCORCH 
            {
              Object RESULT =null;

              CUP$ParserDashb$result = parser.getSymbolFactory().newSymbol("puntosXtData",33, ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-3)), ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), RESULT);
            }
          return CUP$ParserDashb$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // puntosXtDataList ::= puntosXtDataValue 
            {
              Object RESULT =null;

              CUP$ParserDashb$result = parser.getSymbolFactory().newSymbol("puntosXtDataList",34, ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), RESULT);
            }
          return CUP$ParserDashb$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // puntosXtDataList ::= puntosXtDataList2 puntosXtDataValue 
            {
              Object RESULT =null;

              CUP$ParserDashb$result = parser.getSymbolFactory().newSymbol("puntosXtDataList",34, ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-1)), ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), RESULT);
            }
          return CUP$ParserDashb$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // puntosXtDataValue ::= IZQLLAVE xValue COMA yValue COMA size COMA color DERLLAVE 
            {
              Object RESULT =null;

              CUP$ParserDashb$result = parser.getSymbolFactory().newSymbol("puntosXtDataValue",36, ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-8)), ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), RESULT);
            }
          return CUP$ParserDashb$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // puntosXtDataList2 ::= puntosXtDataValue COMA 
            {
              Object RESULT =null;

              CUP$ParserDashb$result = parser.getSymbolFactory().newSymbol("puntosXtDataList2",35, ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-1)), ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), RESULT);
            }
          return CUP$ParserDashb$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // puntosXtDataList2 ::= puntosXtDataList2 puntosXtDataValue COMA 
            {
              Object RESULT =null;

              CUP$ParserDashb$result = parser.getSymbolFactory().newSymbol("puntosXtDataList2",35, ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-2)), ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), RESULT);
            }
          return CUP$ParserDashb$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // lineas ::= IZQLLAVE lineasData COMA chart DERLLAVE 
            {
              Object RESULT =null;

              CUP$ParserDashb$result = parser.getSymbolFactory().newSymbol("lineas",37, ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-4)), ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), RESULT);
            }
          return CUP$ParserDashb$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // lineasData ::= KD_DATA IZQCORCH lineasDataList DERCORCH 
            {
              Object RESULT =null;

              CUP$ParserDashb$result = parser.getSymbolFactory().newSymbol("lineasData",38, ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-3)), ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), RESULT);
            }
          return CUP$ParserDashb$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // lineasDataList ::= lineasDataValue 
            {
              Object RESULT =null;

              CUP$ParserDashb$result = parser.getSymbolFactory().newSymbol("lineasDataList",39, ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), RESULT);
            }
          return CUP$ParserDashb$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // lineasDataList ::= lineasDataList2 lineasDataValue 
            {
              Object RESULT =null;

              CUP$ParserDashb$result = parser.getSymbolFactory().newSymbol("lineasDataList",39, ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-1)), ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), RESULT);
            }
          return CUP$ParserDashb$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // lineasDataValue ::= IZQLLAVE name COMA points DERLLAVE 
            {
              Object RESULT =null;

              CUP$ParserDashb$result = parser.getSymbolFactory().newSymbol("lineasDataValue",40, ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-4)), ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), RESULT);
            }
          return CUP$ParserDashb$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // lineasDataList2 ::= lineasDataValue COMA 
            {
              Object RESULT =null;

              CUP$ParserDashb$result = parser.getSymbolFactory().newSymbol("lineasDataList2",41, ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-1)), ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), RESULT);
            }
          return CUP$ParserDashb$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // lineasDataList2 ::= lineasDataList2 lineasDataValue COMA 
            {
              Object RESULT =null;

              CUP$ParserDashb$result = parser.getSymbolFactory().newSymbol("lineasDataList2",41, ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-2)), ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), RESULT);
            }
          return CUP$ParserDashb$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // lineasXt ::= IZQLLAVE lineasXtData COMA chart DERLLAVE 
            {
              Object RESULT =null;

              CUP$ParserDashb$result = parser.getSymbolFactory().newSymbol("lineasXt",42, ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-4)), ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), RESULT);
            }
          return CUP$ParserDashb$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // lineasXtData ::= KD_DATA IZQCORCH lineasXtDataList DERCORCH 
            {
              Object RESULT =null;

              CUP$ParserDashb$result = parser.getSymbolFactory().newSymbol("lineasXtData",43, ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-3)), ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), RESULT);
            }
          return CUP$ParserDashb$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // lineasXtDataList ::= lineasXtDataValue 
            {
              Object RESULT =null;

              CUP$ParserDashb$result = parser.getSymbolFactory().newSymbol("lineasXtDataList",44, ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), RESULT);
            }
          return CUP$ParserDashb$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // lineasXtDataList ::= lineasXtDataList2 lineasXtDataValue 
            {
              Object RESULT =null;

              CUP$ParserDashb$result = parser.getSymbolFactory().newSymbol("lineasXtDataList",44, ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-1)), ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), RESULT);
            }
          return CUP$ParserDashb$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // lineasXtDataValue ::= IZQLLAVE name COMA pointsXt COMA color COMA lineStyle DERLLAVE 
            {
              Object RESULT =null;

              CUP$ParserDashb$result = parser.getSymbolFactory().newSymbol("lineasXtDataValue",45, ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-8)), ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), RESULT);
            }
          return CUP$ParserDashb$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // lineasXtDataList2 ::= lineasXtDataValue COMA 
            {
              Object RESULT =null;

              CUP$ParserDashb$result = parser.getSymbolFactory().newSymbol("lineasXtDataList2",46, ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-1)), ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), RESULT);
            }
          return CUP$ParserDashb$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // lineasXtDataList2 ::= lineasXtDataList2 lineasXtDataValue COMA 
            {
              Object RESULT =null;

              CUP$ParserDashb$result = parser.getSymbolFactory().newSymbol("lineasXtDataList2",46, ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-2)), ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), RESULT);
            }
          return CUP$ParserDashb$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // tarjeta ::= IZQLLAVE tarjetaData DERLLAVE 
            {
              Object RESULT =null;

              CUP$ParserDashb$result = parser.getSymbolFactory().newSymbol("tarjeta",47, ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-2)), ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), RESULT);
            }
          return CUP$ParserDashb$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // tarjetaData ::= KD_DATA IZQLLAVE value COMA label COMA description DERLLAVE 
            {
              Object RESULT =null;

              CUP$ParserDashb$result = parser.getSymbolFactory().newSymbol("tarjetaData",48, ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-7)), ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), RESULT);
            }
          return CUP$ParserDashb$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // tarjetaXt ::= KD_DATA IZQLLAVE value COMA label COMA description COMA icon COMA color COMA link DERLLAVE 
            {
              Object RESULT =null;

              CUP$ParserDashb$result = parser.getSymbolFactory().newSymbol("tarjetaXt",49, ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-13)), ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), RESULT);
            }
          return CUP$ParserDashb$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // lineStyle ::= KD_LINE MI_TEXTO 
            {
              Object RESULT =null;

              CUP$ParserDashb$result = parser.getSymbolFactory().newSymbol("lineStyle",82, ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-1)), ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), RESULT);
            }
          return CUP$ParserDashb$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // name ::= KD_NAME MI_TEXTO 
            {
              Object RESULT =null;

              CUP$ParserDashb$result = parser.getSymbolFactory().newSymbol("name",83, ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-1)), ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), RESULT);
            }
          return CUP$ParserDashb$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // label ::= KD_LABEL MI_TEXTO 
            {
              Object RESULT =null;

              CUP$ParserDashb$result = parser.getSymbolFactory().newSymbol("label",50, ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-1)), ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), RESULT);
            }
          return CUP$ParserDashb$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // icon ::= KD_ICON MI_TEXTO 
            {
              Object RESULT =null;

              CUP$ParserDashb$result = parser.getSymbolFactory().newSymbol("icon",51, ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-1)), ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), RESULT);
            }
          return CUP$ParserDashb$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // link ::= KD_LINK MI_URL 
            {
              Object RESULT =null;

              CUP$ParserDashb$result = parser.getSymbolFactory().newSymbol("link",52, ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-1)), ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), RESULT);
            }
          return CUP$ParserDashb$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // title ::= KD_TITLE MI_TEXTO 
            {
              Object RESULT =null;

              CUP$ParserDashb$result = parser.getSymbolFactory().newSymbol("title",53, ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-1)), ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), RESULT);
            }
          return CUP$ParserDashb$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // description ::= KD_DESCRIP MI_TEXTO 
            {
              Object RESULT =null;

              CUP$ParserDashb$result = parser.getSymbolFactory().newSymbol("description",54, ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-1)), ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), RESULT);
            }
          return CUP$ParserDashb$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // copyright ::= KD_COPYR MI_TEXTO 
            {
              Object RESULT =null;

              CUP$ParserDashb$result = parser.getSymbolFactory().newSymbol("copyright",55, ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-1)), ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), RESULT);
            }
          return CUP$ParserDashb$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // backgr ::= KD_BACKGR MI_COLOR 
            {
              Object RESULT =null;

              CUP$ParserDashb$result = parser.getSymbolFactory().newSymbol("backgr",56, ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-1)), ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), RESULT);
            }
          return CUP$ParserDashb$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // fontFam ::= KD_FONTFAM MI_TEXTO 
            {
              Object RESULT =null;

              CUP$ParserDashb$result = parser.getSymbolFactory().newSymbol("fontFam",57, ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-1)), ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), RESULT);
            }
          return CUP$ParserDashb$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // fontSize ::= KD_FONTSIZE MI_TEXTO 
            {
              Object RESULT =null;

              CUP$ParserDashb$result = parser.getSymbolFactory().newSymbol("fontSize",58, ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-1)), ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), RESULT);
            }
          return CUP$ParserDashb$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // category ::= KD_CATEGORY MI_TEXTO 
            {
              Object RESULT =null;

              CUP$ParserDashb$result = parser.getSymbolFactory().newSymbol("category",59, ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-1)), ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), RESULT);
            }
          return CUP$ParserDashb$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // value ::= KD_VALUE MI_INTEGER 
            {
              Object RESULT =null;

              CUP$ParserDashb$result = parser.getSymbolFactory().newSymbol("value",60, ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-1)), ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), RESULT);
            }
          return CUP$ParserDashb$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // color ::= KD_COLOR MI_COLOR 
            {
              Object RESULT =null;

              CUP$ParserDashb$result = parser.getSymbolFactory().newSymbol("color",61, ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-1)), ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), RESULT);
            }
          return CUP$ParserDashb$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // xLabel ::= KD_XLABEL MI_TEXTO 
            {
              Object RESULT =null;

              CUP$ParserDashb$result = parser.getSymbolFactory().newSymbol("xLabel",62, ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-1)), ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), RESULT);
            }
          return CUP$ParserDashb$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // yLabel ::= KD_YLABEL MI_TEXTO 
            {
              Object RESULT =null;

              CUP$ParserDashb$result = parser.getSymbolFactory().newSymbol("yLabel",63, ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-1)), ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), RESULT);
            }
          return CUP$ParserDashb$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // legend ::= KD_LEGEND MI_TEXTO 
            {
              Object RESULT =null;

              CUP$ParserDashb$result = parser.getSymbolFactory().newSymbol("legend",64, ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-1)), ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), RESULT);
            }
          return CUP$ParserDashb$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // xValue ::= KD_X MI_INTEGER 
            {
              Object RESULT =null;

              CUP$ParserDashb$result = parser.getSymbolFactory().newSymbol("xValue",65, ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-1)), ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), RESULT);
            }
          return CUP$ParserDashb$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // yValue ::= KD_Y MI_INTEGER 
            {
              Object RESULT =null;

              CUP$ParserDashb$result = parser.getSymbolFactory().newSymbol("yValue",66, ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-1)), ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), RESULT);
            }
          return CUP$ParserDashb$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // size ::= KD_SIZE MI_INTEGER 
            {
              Object RESULT =null;

              CUP$ParserDashb$result = parser.getSymbolFactory().newSymbol("size",67, ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-1)), ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), RESULT);
            }
          return CUP$ParserDashb$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // header ::= KD_HEADER IZQLLAVE title DERLLAVE 
            {
              Object RESULT =null;

              CUP$ParserDashb$result = parser.getSymbolFactory().newSymbol("header",68, ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-3)), ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), RESULT);
            }
          return CUP$ParserDashb$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // footer ::= KD_FOOTER IZQLLAVE copyright DERLLAVE 
            {
              Object RESULT =null;

              CUP$ParserDashb$result = parser.getSymbolFactory().newSymbol("footer",69, ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-3)), ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), RESULT);
            }
          return CUP$ParserDashb$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // chart ::= KD_CHART IZQLLAVE title COMA xLabel COMA yLabel DERLLAVE 
            {
              Object RESULT =null;

              CUP$ParserDashb$result = parser.getSymbolFactory().newSymbol("chart",70, ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-7)), ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), RESULT);
            }
          return CUP$ParserDashb$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // pastelXtChart ::= KD_CHART IZQLLAVE title COMA legend DERLLAVE 
            {
              Object RESULT =null;

              CUP$ParserDashb$result = parser.getSymbolFactory().newSymbol("pastelXtChart",26, ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-5)), ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), RESULT);
            }
          return CUP$ParserDashb$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // keywords ::= KD_KEYWORDS IZQCORCH keywordList DERCORCH 
            {
              Object RESULT =null;

              CUP$ParserDashb$result = parser.getSymbolFactory().newSymbol("keywords",71, ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-3)), ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), RESULT);
            }
          return CUP$ParserDashb$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // keywordList ::= 
            {
              Object RESULT =null;

              CUP$ParserDashb$result = parser.getSymbolFactory().newSymbol("keywordList",72, ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), RESULT);
            }
          return CUP$ParserDashb$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // keywordList ::= MI_TEXTO 
            {
              Object RESULT =null;

              CUP$ParserDashb$result = parser.getSymbolFactory().newSymbol("keywordList",72, ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), RESULT);
            }
          return CUP$ParserDashb$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // keywordList ::= keywordList2 MI_TEXTO 
            {
              Object RESULT =null;

              CUP$ParserDashb$result = parser.getSymbolFactory().newSymbol("keywordList",72, ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-1)), ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), RESULT);
            }
          return CUP$ParserDashb$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // keywordList2 ::= MI_TEXTO COMA 
            {
              Object RESULT =null;

              CUP$ParserDashb$result = parser.getSymbolFactory().newSymbol("keywordList2",73, ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-1)), ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), RESULT);
            }
          return CUP$ParserDashb$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // keywordList2 ::= keywordList2 MI_TEXTO COMA 
            {
              Object RESULT =null;

              CUP$ParserDashb$result = parser.getSymbolFactory().newSymbol("keywordList2",73, ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-2)), ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), RESULT);
            }
          return CUP$ParserDashb$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // points ::= KD_PONTS IZQCORCH pointList DERCORCH 
            {
              Object RESULT =null;

              CUP$ParserDashb$result = parser.getSymbolFactory().newSymbol("points",74, ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-3)), ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), RESULT);
            }
          return CUP$ParserDashb$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // pointList ::= pointValue 
            {
              Object RESULT =null;

              CUP$ParserDashb$result = parser.getSymbolFactory().newSymbol("pointList",75, ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), RESULT);
            }
          return CUP$ParserDashb$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // pointList ::= pointList2 pointValue 
            {
              Object RESULT =null;

              CUP$ParserDashb$result = parser.getSymbolFactory().newSymbol("pointList",75, ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-1)), ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), RESULT);
            }
          return CUP$ParserDashb$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // pointValue ::= IZQLLAVE xValue COMA yValue DERLLAVE 
            {
              Object RESULT =null;

              CUP$ParserDashb$result = parser.getSymbolFactory().newSymbol("pointValue",76, ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-4)), ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), RESULT);
            }
          return CUP$ParserDashb$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // pointList2 ::= pointValue COMA 
            {
              Object RESULT =null;

              CUP$ParserDashb$result = parser.getSymbolFactory().newSymbol("pointList2",77, ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-1)), ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), RESULT);
            }
          return CUP$ParserDashb$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // pointList2 ::= pointList2 pointValue COMA 
            {
              Object RESULT =null;

              CUP$ParserDashb$result = parser.getSymbolFactory().newSymbol("pointList2",77, ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-2)), ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), RESULT);
            }
          return CUP$ParserDashb$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // pointsXt ::= KD_PONTS IZQCORCH pointXtList DERCORCH 
            {
              Object RESULT =null;

              CUP$ParserDashb$result = parser.getSymbolFactory().newSymbol("pointsXt",78, ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-3)), ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), RESULT);
            }
          return CUP$ParserDashb$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // pointXtList ::= pointXtValue 
            {
              Object RESULT =null;

              CUP$ParserDashb$result = parser.getSymbolFactory().newSymbol("pointXtList",79, ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), RESULT);
            }
          return CUP$ParserDashb$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // pointXtList ::= pointXtList2 pointXtValue 
            {
              Object RESULT =null;

              CUP$ParserDashb$result = parser.getSymbolFactory().newSymbol("pointXtList",79, ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-1)), ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), RESULT);
            }
          return CUP$ParserDashb$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // pointXtList2 ::= pointXtValue COMA 
            {
              Object RESULT =null;

              CUP$ParserDashb$result = parser.getSymbolFactory().newSymbol("pointXtList2",80, ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-1)), ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), RESULT);
            }
          return CUP$ParserDashb$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // pointXtList2 ::= pointXtList2 pointXtValue COMA 
            {
              Object RESULT =null;

              CUP$ParserDashb$result = parser.getSymbolFactory().newSymbol("pointXtList2",80, ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-2)), ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), RESULT);
            }
          return CUP$ParserDashb$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // pointXtValue ::= IZQLLAVE xValue COMA yValue COMA label DERLLAVE 
            {
              Object RESULT =null;

              CUP$ParserDashb$result = parser.getSymbolFactory().newSymbol("pointXtValue",81, ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-6)), ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), RESULT);
            }
          return CUP$ParserDashb$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$ParserDashb$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$ParserDashb$do_action(
    int                        CUP$ParserDashb$act_num,
    java_cup.runtime.lr_parser CUP$ParserDashb$parser,
    java.util.Stack            CUP$ParserDashb$stack,
    int                        CUP$ParserDashb$top)
    throws java.lang.Exception
    {
              return CUP$ParserDashb$do_action_part00000000(
                               CUP$ParserDashb$act_num,
                               CUP$ParserDashb$parser,
                               CUP$ParserDashb$stack,
                               CUP$ParserDashb$top);
    }
}

}
