
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package josq.lenguajes.automatas;

import java.util.ArrayList;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class ParserDashb extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return ParserDashbSym.class;
}

  /** Default constructor. */
  @Deprecated
  public ParserDashb() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public ParserDashb(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public ParserDashb(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\200\000\002\002\004\000\002\002\006\000\002\003" +
    "\003\000\002\003\004\000\002\004\003\000\002\004\003" +
    "\000\002\004\003\000\002\004\003\000\002\004\003\000" +
    "\002\004\003\000\002\004\003\000\002\004\003\000\002" +
    "\005\004\000\002\005\005\000\002\006\003\000\002\006" +
    "\004\000\002\007\003\000\002\007\003\000\002\007\003" +
    "\000\002\007\003\000\002\007\003\000\002\007\003\000" +
    "\002\007\003\000\002\007\003\000\002\007\003\000\002" +
    "\007\003\000\002\007\004\000\002\010\005\000\002\011" +
    "\006\000\002\012\003\000\002\012\004\000\002\013\007" +
    "\000\002\014\004\000\002\014\005\000\002\015\007\000" +
    "\002\016\006\000\002\017\003\000\002\017\004\000\002" +
    "\021\011\000\002\020\004\000\002\020\005\000\002\022" +
    "\005\000\002\023\006\000\002\024\003\000\002\024\004" +
    "\000\002\026\007\000\002\025\004\000\002\025\005\000" +
    "\002\027\007\000\002\030\006\000\002\031\003\000\002" +
    "\031\004\000\002\033\011\000\002\032\004\000\002\032" +
    "\005\000\002\035\005\000\002\036\006\000\002\037\003" +
    "\000\002\037\004\000\002\041\007\000\002\040\004\000" +
    "\002\040\005\000\002\042\007\000\002\043\006\000\002" +
    "\044\003\000\002\044\004\000\002\046\013\000\002\045" +
    "\004\000\002\045\005\000\002\047\007\000\002\050\006" +
    "\000\002\051\003\000\002\051\004\000\002\052\007\000" +
    "\002\053\004\000\002\053\005\000\002\054\007\000\002" +
    "\055\006\000\002\056\003\000\002\056\004\000\002\057" +
    "\013\000\002\060\004\000\002\060\005\000\002\061\005" +
    "\000\002\062\012\000\002\063\020\000\002\124\004\000" +
    "\002\125\004\000\002\064\004\000\002\065\004\000\002" +
    "\066\004\000\002\067\004\000\002\070\004\000\002\071" +
    "\004\000\002\072\004\000\002\073\004\000\002\074\004" +
    "\000\002\075\004\000\002\076\004\000\002\077\004\000" +
    "\002\100\004\000\002\101\004\000\002\102\004\000\002" +
    "\103\004\000\002\104\004\000\002\105\004\000\002\106" +
    "\006\000\002\107\006\000\002\110\012\000\002\034\010" +
    "\000\002\111\006\000\002\112\002\000\002\112\003\000" +
    "\002\112\004\000\002\113\004\000\002\113\005\000\002" +
    "\114\006\000\002\115\003\000\002\115\004\000\002\116" +
    "\007\000\002\117\004\000\002\117\005\000\002\120\006" +
    "\000\002\121\003\000\002\121\004\000\002\122\004\000" +
    "\002\122\005\000\002\123\011" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0139\000\004\010\005\001\002\000\004\002\u013b\001" +
    "\002\000\022\020\012\021\017\023\027\024\011\025\013" +
    "\041\010\042\006\043\024\001\002\000\004\010\u0136\001" +
    "\002\000\012\003\ufff6\010\ufff6\014\ufff6\015\ufff6\001\002" +
    "\000\004\010\u0133\001\002\000\004\004\u0132\001\002\000" +
    "\004\004\u0131\001\002\000\004\004\u0130\001\002\000\012" +
    "\003\uffff\010\uffff\014\u012f\015\uffff\001\002\000\010\003" +
    "\061\010\051\015\055\001\002\000\012\003\ufff8\010\ufff8" +
    "\014\ufff8\015\ufff8\001\002\000\004\004\044\001\002\000" +
    "\012\003\ufffb\010\ufffb\014\ufffb\015\ufffb\001\002\000\022" +
    "\020\012\021\017\023\027\024\011\025\013\041\010\042" +
    "\006\043\024\001\002\000\012\003\ufff9\010\ufff9\014\ufff9" +
    "\015\ufff9\001\002\000\012\003\ufff7\010\ufff7\014\ufff7\015" +
    "\ufff7\001\002\000\004\012\032\001\002\000\012\003\ufffc" +
    "\010\ufffc\014\ufffc\015\ufffc\001\002\000\012\003\ufffa\010" +
    "\ufffa\014\ufffa\015\ufffa\001\002\000\004\007\031\001\002" +
    "\000\012\003\ufffd\010\ufffd\014\ufffd\015\ufffd\001\002\000" +
    "\012\003\uffa3\010\uffa3\014\uffa3\015\uffa3\001\002\000\006" +
    "\004\035\013\uff92\001\002\000\004\004\040\001\002\000" +
    "\004\013\037\001\002\000\006\013\uff91\014\036\001\002" +
    "\000\004\004\uff8f\001\002\000\012\003\uff93\010\uff93\014" +
    "\uff93\015\uff93\001\002\000\006\013\uff90\014\041\001\002" +
    "\000\004\004\uff8e\001\002\000\012\003\ufffe\010\ufffe\014" +
    "\043\015\ufffe\001\002\000\022\020\ufff4\021\ufff4\023\ufff4" +
    "\024\ufff4\025\ufff4\041\ufff4\042\ufff4\043\ufff4\001\002\000" +
    "\014\003\uffa5\010\uffa5\011\uffa5\014\uffa5\015\uffa5\001\002" +
    "\000\012\003\uffed\010\uffed\011\uffed\015\uffed\001\002\000" +
    "\012\003\uffee\010\uffee\011\uffee\015\uffee\001\002\000\012" +
    "\003\ufff0\010\ufff0\011\ufff0\015\ufff0\001\002\000\012\003" +
    "\uffef\010\uffef\011\uffef\015\uffef\001\002\000\004\015\122" +
    "\001\002\000\012\003\uffec\010\uffec\011\uffec\015\uffec\001" +
    "\002\000\012\003\ufff3\010\ufff3\011\ufff3\015\ufff3\001\002" +
    "\000\012\003\uffe8\010\uffe8\011\uffe8\015\uffe8\001\002\000" +
    "\004\010\067\001\002\000\012\003\uffeb\010\uffeb\011\uffeb" +
    "\015\uffeb\001\002\000\012\003\uffe9\010\uffe9\011\uffe9\015" +
    "\uffe9\001\002\000\012\003\uffea\010\uffea\011\uffea\015\uffea" +
    "\001\002\000\004\011\066\001\002\000\012\003\061\010" +
    "\051\011\064\015\055\001\002\000\012\003\ufff1\010\ufff1" +
    "\011\ufff1\015\ufff1\001\002\000\004\002\000\001\002\000" +
    "\012\003\ufff2\010\ufff2\011\ufff2\015\ufff2\001\002\000\012" +
    "\003\uffe7\010\uffe7\011\uffe7\015\uffe7\001\002\000\004\027" +
    "\070\001\002\000\004\006\115\001\002\000\004\014\072" +
    "\001\002\000\004\017\074\001\002\000\004\014\076\001" +
    "\002\000\004\004\075\001\002\000\006\011\uffa9\014\uffa9" +
    "\001\002\000\004\021\017\001\002\000\004\014\100\001" +
    "\002\000\004\031\102\001\002\000\004\014\104\001\002" +
    "\000\004\004\103\001\002\000\004\014\uffa8\001\002\000" +
    "\004\030\106\001\002\000\004\014\110\001\002\000\004" +
    "\007\107\001\002\000\006\011\uff9e\014\uff9e\001\002\000" +
    "\004\032\112\001\002\000\004\011\114\001\002\000\004" +
    "\005\113\001\002\000\004\011\uffa7\001\002\000\012\003" +
    "\uffac\010\uffac\011\uffac\015\uffac\001\002\000\006\011\uff9f" +
    "\014\uff9f\001\002\000\004\014\u012c\001\002\000\004\011" +
    "\u012b\001\002\000\004\014\u0120\001\002\000\004\014\u011d" +
    "\001\002\000\006\010\156\012\155\001\002\000\004\011" +
    "\154\001\002\000\004\011\153\001\002\000\004\011\152" +
    "\001\002\000\004\014\147\001\002\000\004\014\130\001" +
    "\002\000\004\016\132\001\002\000\004\011\146\001\002" +
    "\000\004\010\133\001\002\000\004\020\012\001\002\000" +
    "\004\014\135\001\002\000\004\033\137\001\002\000\004" +
    "\014\141\001\002\000\004\004\140\001\002\000\004\014" +
    "\uff9d\001\002\000\004\034\143\001\002\000\004\011\145" +
    "\001\002\000\004\004\144\001\002\000\004\011\uff9c\001" +
    "\002\000\004\011\uff95\001\002\000\012\003\uffc3\010\uffc3" +
    "\011\uffc3\015\uffc3\001\002\000\004\016\132\001\002\000" +
    "\004\011\151\001\002\000\012\003\uffb5\010\uffb5\011\uffb5" +
    "\015\uffb5\001\002\000\012\003\uffca\010\uffca\011\uffca\015" +
    "\uffca\001\002\000\012\003\uffd8\010\uffd8\011\uffd8\015\uffd8" +
    "\001\002\000\012\003\uffae\010\uffae\011\uffae\015\uffae\001" +
    "\002\000\004\010\214\001\002\000\004\027\070\001\002" +
    "\000\004\014\160\001\002\000\004\017\074\001\002\000" +
    "\004\014\162\001\002\000\004\021\017\001\002\000\004" +
    "\011\164\001\002\000\004\011\uffad\001\002\000\004\010" +
    "\u0117\001\002\000\004\010\u0112\001\002\000\006\013\uffd6" +
    "\014\u0110\001\002\000\004\013\u010f\001\002\000\004\010" +
    "\u0109\001\002\000\004\010\u0103\001\002\000\004\010\374" +
    "\001\002\000\004\010\365\001\002\000\006\013\uffe4\014" +
    "\364\001\002\000\004\013\363\001\002\000\006\013\uffc8" +
    "\014\362\001\002\000\004\013\361\001\002\000\004\013" +
    "\360\001\002\000\004\013\357\001\002\000\006\013\uffba" +
    "\014\356\001\002\000\006\013\uffcf\014\355\001\002\000" +
    "\004\013\354\001\002\000\004\013\353\001\002\000\004" +
    "\010\346\001\002\000\004\013\344\001\002\000\006\013" +
    "\uffdd\014\343\001\002\000\004\010\336\001\002\000\006" +
    "\013\uffb3\014\334\001\002\000\012\017\074\026\217\036" +
    "\220\046\225\001\002\000\006\013\uffc1\014\216\001\002" +
    "\000\004\010\uffbe\001\002\000\004\004\333\001\002\000" +
    "\004\006\332\001\002\000\004\014\324\001\002\000\004" +
    "\014\251\001\002\000\004\014\235\001\002\000\004\014" +
    "\227\001\002\000\004\004\226\001\002\000\004\014\uffaa" +
    "\001\002\000\004\027\070\001\002\000\006\011\232\014" +
    "\231\001\002\000\004\030\106\001\002\000\006\013\uffe2" +
    "\014\uffe2\001\002\000\004\011\234\001\002\000\006\013" +
    "\uffdb\014\uffdb\001\002\000\004\037\237\001\002\000\006" +
    "\011\242\014\241\001\002\000\004\006\240\001\002\000" +
    "\006\011\uff99\014\uff99\001\002\000\004\040\244\001\002" +
    "\000\006\013\uffc6\014\uffc6\001\002\000\004\014\246\001" +
    "\002\000\004\006\245\001\002\000\004\014\uff98\001\002" +
    "\000\004\030\106\001\002\000\004\011\250\001\002\000" +
    "\006\013\uffbf\014\uffbf\001\002\000\004\044\254\001\002" +
    "\000\004\014\315\001\002\000\004\011\314\001\002\000" +
    "\004\012\255\001\002\000\004\010\262\001\002\000\004" +
    "\013\313\001\002\000\004\010\305\001\002\000\004\010" +
    "\277\001\002\000\004\013\276\001\002\000\004\036\220" +
    "\001\002\000\006\013\uff8c\014\266\001\002\000\006\013" +
    "\uff86\014\265\001\002\000\004\010\uff84\001\002\000\004" +
    "\010\uff89\001\002\000\004\014\270\001\002\000\004\037" +
    "\237\001\002\000\006\011\273\014\272\001\002\000\004" +
    "\017\074\001\002\000\006\013\uff8a\014\uff8a\001\002\000" +
    "\004\011\275\001\002\000\006\013\uff82\014\uff82\001\002" +
    "\000\004\014\uff87\001\002\000\004\036\220\001\002\000" +
    "\006\013\uff85\014\301\001\002\000\004\010\uff83\001\002" +
    "\000\004\014\303\001\002\000\004\037\237\001\002\000" +
    "\004\014\272\001\002\000\004\036\220\001\002\000\006" +
    "\013\uff8b\014\307\001\002\000\004\010\uff88\001\002\000" +
    "\004\014\311\001\002\000\004\037\237\001\002\000\004" +
    "\011\273\001\002\000\004\011\uff8d\001\002\000\006\013" +
    "\uffb8\014\uffb8\001\002\000\004\030\106\001\002\000\004" +
    "\014\317\001\002\000\004\045\321\001\002\000\004\011" +
    "\323\001\002\000\004\004\322\001\002\000\004\011\uffab" +
    "\001\002\000\006\013\uffb1\014\uffb1\001\002\000\004\027" +
    "\070\001\002\000\006\011\327\014\326\001\002\000\004" +
    "\030\106\001\002\000\006\013\uffd4\014\uffd4\001\002\000" +
    "\004\011\331\001\002\000\006\013\uffcd\014\uffcd\001\002" +
    "\000\004\014\uff9a\001\002\000\004\014\uffa0\001\002\000" +
    "\004\010\uffb0\001\002\000\006\013\uffd5\014\342\001\002" +
    "\000\004\017\074\001\002\000\004\014\340\001\002\000" +
    "\004\027\070\001\002\000\004\011\327\001\002\000\004" +
    "\010\uffd2\001\002\000\004\010\uffda\001\002\000\004\014" +
    "\uffb4\001\002\000\006\013\uffc0\014\352\001\002\000\004" +
    "\036\220\001\002\000\004\014\350\001\002\000\004\037" +
    "\237\001\002\000\004\014\241\001\002\000\004\010\uffbd" +
    "\001\002\000\004\011\uffc9\001\002\000\004\014\uffc2\001" +
    "\002\000\004\010\uffcc\001\002\000\004\010\uffb7\001\002" +
    "\000\004\014\uffbb\001\002\000\004\014\uffd0\001\002\000" +
    "\004\011\uffd7\001\002\000\004\010\uffc5\001\002\000\004" +
    "\014\uffde\001\002\000\004\010\uffe1\001\002\000\004\046" +
    "\225\001\002\000\006\013\uffb2\014\367\001\002\000\004" +
    "\010\uffaf\001\002\000\004\014\371\001\002\000\004\044" +
    "\372\001\002\000\004\012\373\001\002\000\004\010\277" +
    "\001\002\000\004\026\217\001\002\000\006\013\uffdc\014" +
    "\376\001\002\000\004\010\uffd9\001\002\000\004\014\u0100" +
    "\001\002\000\004\027\070\001\002\000\004\014\231\001" +
    "\002\000\006\013\uffce\014\u0107\001\002\000\004\017\074" +
    "\001\002\000\004\014\u0105\001\002\000\004\027\070\001" +
    "\002\000\004\014\326\001\002\000\004\010\uffcb\001\002" +
    "\000\006\013\uffb9\014\u010e\001\002\000\004\046\225\001" +
    "\002\000\004\014\u010b\001\002\000\004\044\u010c\001\002" +
    "\000\004\012\u010d\001\002\000\004\010\305\001\002\000" +
    "\004\010\uffb6\001\002\000\004\011\uffe5\001\002\000\004" +
    "\010\uffd3\001\002\000\006\013\uffc7\014\u0116\001\002\000" +
    "\004\036\220\001\002\000\004\014\u0114\001\002\000\004" +
    "\037\237\001\002\000\004\011\242\001\002\000\004\010" +
    "\uffc4\001\002\000\004\026\217\001\002\000\006\013\uffe3" +
    "\014\u0119\001\002\000\004\010\uffe0\001\002\000\004\014" +
    "\u011b\001\002\000\004\027\070\001\002\000\004\011\232" +
    "\001\002\000\004\016\132\001\002\000\004\011\u011f\001" +
    "\002\000\012\003\uffbc\010\uffbc\011\uffbc\015\uffbc\001\002" +
    "\000\004\016\u0122\001\002\000\004\011\u012a\001\002\000" +
    "\004\010\u0123\001\002\000\004\020\012\001\002\000\004" +
    "\014\u0125\001\002\000\004\035\u0127\001\002\000\004\011" +
    "\u0129\001\002\000\004\004\u0128\001\002\000\004\011\uff9b" +
    "\001\002\000\004\011\uff94\001\002\000\012\003\uffd1\010" +
    "\uffd1\011\uffd1\015\uffd1\001\002\000\012\003\uffe6\010\uffe6" +
    "\011\uffe6\015\uffe6\001\002\000\004\016\132\001\002\000" +
    "\004\011\u012e\001\002\000\012\003\uffdf\010\uffdf\011\uffdf" +
    "\015\uffdf\001\002\000\022\020\ufff5\021\ufff5\023\ufff5\024" +
    "\ufff5\025\ufff5\041\ufff5\042\ufff5\043\ufff5\001\002\000\012" +
    "\003\uffa1\010\uffa1\014\uffa1\015\uffa1\001\002\000\014\003" +
    "\uffa6\010\uffa6\011\uffa6\014\uffa6\015\uffa6\001\002\000\012" +
    "\003\uffa2\010\uffa2\014\uffa2\015\uffa2\001\002\000\004\020" +
    "\012\001\002\000\004\011\u0135\001\002\000\012\003\uff97" +
    "\010\uff97\014\uff97\015\uff97\001\002\000\004\022\u0137\001" +
    "\002\000\004\004\u013a\001\002\000\004\011\u0139\001\002" +
    "\000\012\003\uff96\010\uff96\014\uff96\015\uff96\001\002\000" +
    "\004\011\uffa4\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0139\000\004\002\003\001\001\000\002\001\001\000" +
    "\030\003\014\004\013\005\020\067\027\070\024\072\015" +
    "\073\022\074\006\106\025\107\021\111\017\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\032\006\061\007\052\010\062\015\046\022\047" +
    "\027\045\035\044\042\051\047\055\054\057\061\056\063" +
    "\053\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\024\004\041\067\027\070\024\072\015\073" +
    "\022\074\006\106\025\107\021\111\017\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\112\033\113\032\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\024\011\116\016\115\023\123\030\117" +
    "\036\124\043\126\050\120\055\125\062\122\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\030\007\064\010\062\015\046" +
    "\022\047\027\045\035\044\042\051\047\055\054\057\061" +
    "\056\063\053\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\076\070\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\064\072" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\070\076\001\001\000\002\001\001\000\004" +
    "\065\100\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\077\104\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\066\110\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\110\130" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\067" +
    "\133\001\001\000\002\001\001\000\004\100\135\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\101\141\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\110\147\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\062\012\167\013\174\014\164\017\175\020\172\021\210" +
    "\024\177\025\211\026\166\031\200\032\171\033\203\037" +
    "\205\040\165\041\176\044\204\045\206\046\214\051\201" +
    "\052\202\053\170\056\207\057\212\060\173\001\001\000" +
    "\004\076\156\001\001\000\002\001\001\000\004\064\160" +
    "\001\001\000\002\001\001\000\004\070\162\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\013\u0117\001\001" +
    "\000\004\041\u0110\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\052\u0107\001\001\000\004\033\u0101\001\001" +
    "\000\004\021\374\001\001\000\004\057\365\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\046\344\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\026\334\001\001\000\002\001\001\000\012" +
    "\064\220\075\223\103\222\125\221\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\076\227\001\001\000\002\001\001\000\004\077\232\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\104\235\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\105\242\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\077\246\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\114\252\120\251\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\016\115\255" +
    "\116\262\117\256\121\260\122\257\123\263\001\001\000" +
    "\002\001\001\000\004\116\305\001\001\000\004\123\277" +
    "\001\001\000\002\001\001\000\004\103\266\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\104\270\001\001\000" +
    "\002\001\001\000\004\064\273\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\103\301\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\104\303\001\001\000\002\001" +
    "\001\000\004\103\307\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\104\311\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\077\315\001\001\000\002\001\001\000\004\124\317\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\076\324\001\001\000\002\001" +
    "\001\000\004\077\327\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\064\336" +
    "\001\001\000\002\001\001\000\004\076\340\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\103\346\001\001\000" +
    "\002\001\001\000\004\104\350\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\125\367\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\120" +
    "\251\001\001\000\002\001\001\000\010\121\260\122\257" +
    "\123\263\001\001\000\004\075\376\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\076\u0100" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\064" +
    "\u0103\001\001\000\002\001\001\000\004\076\u0105\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\125\u0109\001\001\000\002\001\001\000\004\114\252" +
    "\001\001\000\002\001\001\000\010\115\255\116\262\117" +
    "\256\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\103\u0112\001\001\000" +
    "\002\001\001\000\004\104\u0114\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\075\u0119\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\076\u011b" +
    "\001\001\000\002\001\001\000\004\110\u011d\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\034\u0120\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\067\u0123\001" +
    "\001\000\002\001\001\000\004\102\u0125\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\110\u012c" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\067\u0133\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\071\u0137\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$ParserDashb$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$ParserDashb$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$ParserDashb$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$ParserDashb$actions {


    private void print(String texto){ System.out.print(texto); } 

  private final ParserDashb parser;

  /** Constructor */
  CUP$ParserDashb$actions(ParserDashb parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$ParserDashb$do_action_part00000000(
    int                        CUP$ParserDashb$act_num,
    java_cup.runtime.lr_parser CUP$ParserDashb$parser,
    java.util.Stack            CUP$ParserDashb$stack,
    int                        CUP$ParserDashb$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$ParserDashb$result;

      /* select the action based on the action number */
      switch (CUP$ParserDashb$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= dashboard EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-1)).value;
		RESULT = start_val;
              CUP$ParserDashb$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-1)), ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$ParserDashb$parser.done_parsing();
          return CUP$ParserDashb$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // dashboard ::= IZQLLAVE properties graficos DERLLAVE 
            {
              Object RESULT =null;

              CUP$ParserDashb$result = parser.getSymbolFactory().newSymbol("dashboard",0, ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-3)), ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), RESULT);
            }
          return CUP$ParserDashb$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // properties ::= property 
            {
              Object RESULT =null;

              CUP$ParserDashb$result = parser.getSymbolFactory().newSymbol("properties",1, ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), RESULT);
            }
          return CUP$ParserDashb$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // properties ::= propertyList property 
            {
              Object RESULT =null;

              CUP$ParserDashb$result = parser.getSymbolFactory().newSymbol("properties",1, ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-1)), ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), RESULT);
            }
          return CUP$ParserDashb$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // property ::= title 
            {
              Object RESULT =null;

              CUP$ParserDashb$result = parser.getSymbolFactory().newSymbol("property",2, ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), RESULT);
            }
          return CUP$ParserDashb$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // property ::= description 
            {
              Object RESULT =null;

              CUP$ParserDashb$result = parser.getSymbolFactory().newSymbol("property",2, ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), RESULT);
            }
          return CUP$ParserDashb$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // property ::= keywords 
            {
              Object RESULT =null;

              CUP$ParserDashb$result = parser.getSymbolFactory().newSymbol("property",2, ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), RESULT);
            }
          return CUP$ParserDashb$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // property ::= header 
            {
              Object RESULT =null;

              CUP$ParserDashb$result = parser.getSymbolFactory().newSymbol("property",2, ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), RESULT);
            }
          return CUP$ParserDashb$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // property ::= footer 
            {
              Object RESULT =null;

              CUP$ParserDashb$result = parser.getSymbolFactory().newSymbol("property",2, ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), RESULT);
            }
          return CUP$ParserDashb$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // property ::= backgr 
            {
              Object RESULT =null;

              CUP$ParserDashb$result = parser.getSymbolFactory().newSymbol("property",2, ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), RESULT);
            }
          return CUP$ParserDashb$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // property ::= fontFam 
            {
              Object RESULT =null;

              CUP$ParserDashb$result = parser.getSymbolFactory().newSymbol("property",2, ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), RESULT);
            }
          return CUP$ParserDashb$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // property ::= fontSize 
            {
              Object RESULT =null;

              CUP$ParserDashb$result = parser.getSymbolFactory().newSymbol("property",2, ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), RESULT);
            }
          return CUP$ParserDashb$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // propertyList ::= property COMA 
            {
              Object RESULT =null;

              CUP$ParserDashb$result = parser.getSymbolFactory().newSymbol("propertyList",3, ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-1)), ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), RESULT);
            }
          return CUP$ParserDashb$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // propertyList ::= propertyList property COMA 
            {
              Object RESULT =null;

              CUP$ParserDashb$result = parser.getSymbolFactory().newSymbol("propertyList",3, ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-2)), ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), RESULT);
            }
          return CUP$ParserDashb$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // graficos ::= grafico 
            {
              Object RESULT =null;

              CUP$ParserDashb$result = parser.getSymbolFactory().newSymbol("graficos",4, ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), RESULT);
            }
          return CUP$ParserDashb$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // graficos ::= graficos grafico 
            {
              Object RESULT =null;

              CUP$ParserDashb$result = parser.getSymbolFactory().newSymbol("graficos",4, ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-1)), ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), RESULT);
            }
          return CUP$ParserDashb$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // grafico ::= barras 
            {
              Object RESULT =null;

              CUP$ParserDashb$result = parser.getSymbolFactory().newSymbol("grafico",5, ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), RESULT);
            }
          return CUP$ParserDashb$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // grafico ::= barrasXt 
            {
              Object RESULT =null;

              CUP$ParserDashb$result = parser.getSymbolFactory().newSymbol("grafico",5, ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), RESULT);
            }
          return CUP$ParserDashb$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // grafico ::= pastel 
            {
              Object RESULT =null;

              CUP$ParserDashb$result = parser.getSymbolFactory().newSymbol("grafico",5, ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), RESULT);
            }
          return CUP$ParserDashb$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // grafico ::= pastelXt 
            {
              Object RESULT =null;

              CUP$ParserDashb$result = parser.getSymbolFactory().newSymbol("grafico",5, ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), RESULT);
            }
          return CUP$ParserDashb$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // grafico ::= puntos 
            {
              Object RESULT =null;

              CUP$ParserDashb$result = parser.getSymbolFactory().newSymbol("grafico",5, ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), RESULT);
            }
          return CUP$ParserDashb$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // grafico ::= puntosXt 
            {
              Object RESULT =null;

              CUP$ParserDashb$result = parser.getSymbolFactory().newSymbol("grafico",5, ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), RESULT);
            }
          return CUP$ParserDashb$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // grafico ::= lineas 
            {
              Object RESULT =null;

              CUP$ParserDashb$result = parser.getSymbolFactory().newSymbol("grafico",5, ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), RESULT);
            }
          return CUP$ParserDashb$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // grafico ::= lineasXt 
            {
              Object RESULT =null;

              CUP$ParserDashb$result = parser.getSymbolFactory().newSymbol("grafico",5, ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), RESULT);
            }
          return CUP$ParserDashb$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // grafico ::= tarjeta 
            {
              Object RESULT =null;

              CUP$ParserDashb$result = parser.getSymbolFactory().newSymbol("grafico",5, ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), RESULT);
            }
          return CUP$ParserDashb$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // grafico ::= tarjetaXt 
            {
              Object RESULT =null;

              CUP$ParserDashb$result = parser.getSymbolFactory().newSymbol("grafico",5, ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), RESULT);
            }
          return CUP$ParserDashb$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // grafico ::= error DERLLAVE 
            {
              Object RESULT =null;

              CUP$ParserDashb$result = parser.getSymbolFactory().newSymbol("grafico",5, ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-1)), ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), RESULT);
            }
          return CUP$ParserDashb$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // barras ::= IZQLLAVE barrasData DERLLAVE 
            {
              Object RESULT =null;

              CUP$ParserDashb$result = parser.getSymbolFactory().newSymbol("barras",6, ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-2)), ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), RESULT);
            }
          return CUP$ParserDashb$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // barrasData ::= KD_DATA IZQCORCH barrasDataList DERCORCH 
            {
              Object RESULT =null;

              CUP$ParserDashb$result = parser.getSymbolFactory().newSymbol("barrasData",7, ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-3)), ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), RESULT);
            }
          return CUP$ParserDashb$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // barrasDataList ::= barrasDataValue 
            {
              Object RESULT =null;

              CUP$ParserDashb$result = parser.getSymbolFactory().newSymbol("barrasDataList",8, ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), RESULT);
            }
          return CUP$ParserDashb$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // barrasDataList ::= barrasDataList2 barrasDataValue 
            {
              Object RESULT =null;

              CUP$ParserDashb$result = parser.getSymbolFactory().newSymbol("barrasDataList",8, ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-1)), ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), RESULT);
            }
          return CUP$ParserDashb$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // barrasDataValue ::= IZQLLAVE category COMA value DERLLAVE 
            {
              Object RESULT =null;

              CUP$ParserDashb$result = parser.getSymbolFactory().newSymbol("barrasDataValue",9, ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-4)), ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), RESULT);
            }
          return CUP$ParserDashb$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // barrasDataList2 ::= barrasDataValue COMA 
            {
              Object RESULT =null;

              CUP$ParserDashb$result = parser.getSymbolFactory().newSymbol("barrasDataList2",10, ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-1)), ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), RESULT);
            }
          return CUP$ParserDashb$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // barrasDataList2 ::= barrasDataList2 barrasDataValue COMA 
            {
              Object RESULT =null;

              CUP$ParserDashb$result = parser.getSymbolFactory().newSymbol("barrasDataList2",10, ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-2)), ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), RESULT);
            }
          return CUP$ParserDashb$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // barrasXt ::= IZQLLAVE barrasXtData COMA chart DERLLAVE 
            {
              Object RESULT =null;

              CUP$ParserDashb$result = parser.getSymbolFactory().newSymbol("barrasXt",11, ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-4)), ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), RESULT);
            }
          return CUP$ParserDashb$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // barrasXtData ::= KD_DATA IZQCORCH barrasXtDataList DERCORCH 
            {
              Object RESULT =null;

              CUP$ParserDashb$result = parser.getSymbolFactory().newSymbol("barrasXtData",12, ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-3)), ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), RESULT);
            }
          return CUP$ParserDashb$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // barrasXtDataList ::= barrasXtDataValue 
            {
              Object RESULT =null;

              CUP$ParserDashb$result = parser.getSymbolFactory().newSymbol("barrasXtDataList",13, ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), RESULT);
            }
          return CUP$ParserDashb$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // barrasXtDataList ::= barrasXtDataList2 barrasXtDataValue 
            {
              Object RESULT =null;

              CUP$ParserDashb$result = parser.getSymbolFactory().newSymbol("barrasXtDataList",13, ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-1)), ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), RESULT);
            }
          return CUP$ParserDashb$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // barrasXtDataValue ::= IZQLLAVE category COMA value COMA color DERLLAVE 
            {
              Object RESULT =null;

              CUP$ParserDashb$result = parser.getSymbolFactory().newSymbol("barrasXtDataValue",15, ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-6)), ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), RESULT);
            }
          return CUP$ParserDashb$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // barrasXtDataList2 ::= barrasXtDataValue COMA 
            {
              Object RESULT =null;

              CUP$ParserDashb$result = parser.getSymbolFactory().newSymbol("barrasXtDataList2",14, ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-1)), ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), RESULT);
            }
          return CUP$ParserDashb$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // barrasXtDataList2 ::= barrasXtDataList2 barrasXtDataValue COMA 
            {
              Object RESULT =null;

              CUP$ParserDashb$result = parser.getSymbolFactory().newSymbol("barrasXtDataList2",14, ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-2)), ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), RESULT);
            }
          return CUP$ParserDashb$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // pastel ::= IZQLLAVE pastelData DERLLAVE 
            {
              Object RESULT =null;

              CUP$ParserDashb$result = parser.getSymbolFactory().newSymbol("pastel",16, ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-2)), ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), RESULT);
            }
          return CUP$ParserDashb$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // pastelData ::= KD_DATA IZQCORCH pastelDataList DERCORCH 
            {
              Object RESULT =null;

              CUP$ParserDashb$result = parser.getSymbolFactory().newSymbol("pastelData",17, ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-3)), ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), RESULT);
            }
          return CUP$ParserDashb$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // pastelDataList ::= pastelDataValue 
            {
              Object RESULT =null;

              CUP$ParserDashb$result = parser.getSymbolFactory().newSymbol("pastelDataList",18, ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), RESULT);
            }
          return CUP$ParserDashb$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // pastelDataList ::= pastelDataList2 pastelDataValue 
            {
              Object RESULT =null;

              CUP$ParserDashb$result = parser.getSymbolFactory().newSymbol("pastelDataList",18, ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-1)), ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), RESULT);
            }
          return CUP$ParserDashb$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // pastelDataValue ::= IZQLLAVE label COMA value DERLLAVE 
            {
              Object RESULT =null;

              CUP$ParserDashb$result = parser.getSymbolFactory().newSymbol("pastelDataValue",20, ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-4)), ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), RESULT);
            }
          return CUP$ParserDashb$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // pastelDataList2 ::= pastelDataValue COMA 
            {
              Object RESULT =null;

              CUP$ParserDashb$result = parser.getSymbolFactory().newSymbol("pastelDataList2",19, ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-1)), ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), RESULT);
            }
          return CUP$ParserDashb$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // pastelDataList2 ::= pastelDataList2 pastelDataValue COMA 
            {
              Object RESULT =null;

              CUP$ParserDashb$result = parser.getSymbolFactory().newSymbol("pastelDataList2",19, ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-2)), ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), RESULT);
            }
          return CUP$ParserDashb$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // pastelXt ::= IZQLLAVE pastelXtData COMA pastelXtChart DERLLAVE 
            {
              Object RESULT =null;

              CUP$ParserDashb$result = parser.getSymbolFactory().newSymbol("pastelXt",21, ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-4)), ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), RESULT);
            }
          return CUP$ParserDashb$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // pastelXtData ::= KD_DATA IZQCORCH pastelXtDataList DERCORCH 
            {
              Object RESULT =null;

              CUP$ParserDashb$result = parser.getSymbolFactory().newSymbol("pastelXtData",22, ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-3)), ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), RESULT);
            }
          return CUP$ParserDashb$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // pastelXtDataList ::= pastelXtDataValue 
            {
              Object RESULT =null;

              CUP$ParserDashb$result = parser.getSymbolFactory().newSymbol("pastelXtDataList",23, ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), RESULT);
            }
          return CUP$ParserDashb$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // pastelXtDataList ::= pastelXtDataList2 pastelXtDataValue 
            {
              Object RESULT =null;

              CUP$ParserDashb$result = parser.getSymbolFactory().newSymbol("pastelXtDataList",23, ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-1)), ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), RESULT);
            }
          return CUP$ParserDashb$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // pastelXtDataValue ::= IZQLLAVE label COMA value COMA color DERLLAVE 
            {
              Object RESULT =null;

              CUP$ParserDashb$result = parser.getSymbolFactory().newSymbol("pastelXtDataValue",25, ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-6)), ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), RESULT);
            }
          return CUP$ParserDashb$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // pastelXtDataList2 ::= pastelXtDataValue COMA 
            {
              Object RESULT =null;

              CUP$ParserDashb$result = parser.getSymbolFactory().newSymbol("pastelXtDataList2",24, ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-1)), ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), RESULT);
            }
          return CUP$ParserDashb$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // pastelXtDataList2 ::= pastelXtDataList2 pastelXtDataValue COMA 
            {
              Object RESULT =null;

              CUP$ParserDashb$result = parser.getSymbolFactory().newSymbol("pastelXtDataList2",24, ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-2)), ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), RESULT);
            }
          return CUP$ParserDashb$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // puntos ::= IZQLLAVE puntosData DERLLAVE 
            {
              Object RESULT =null;

              CUP$ParserDashb$result = parser.getSymbolFactory().newSymbol("puntos",27, ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-2)), ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), RESULT);
            }
          return CUP$ParserDashb$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // puntosData ::= KD_DATA IZQCORCH puntosDataList DERCORCH 
            {
              Object RESULT =null;

              CUP$ParserDashb$result = parser.getSymbolFactory().newSymbol("puntosData",28, ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-3)), ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), RESULT);
            }
          return CUP$ParserDashb$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // puntosDataList ::= puntosDataValue 
            {
              Object RESULT =null;

              CUP$ParserDashb$result = parser.getSymbolFactory().newSymbol("puntosDataList",29, ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), RESULT);
            }
          return CUP$ParserDashb$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // puntosDataList ::= puntosDataList2 puntosDataValue 
            {
              Object RESULT =null;

              CUP$ParserDashb$result = parser.getSymbolFactory().newSymbol("puntosDataList",29, ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-1)), ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), RESULT);
            }
          return CUP$ParserDashb$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // puntosDataValue ::= IZQLLAVE xValue COMA yValue DERLLAVE 
            {
              Object RESULT =null;

              CUP$ParserDashb$result = parser.getSymbolFactory().newSymbol("puntosDataValue",31, ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-4)), ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), RESULT);
            }
          return CUP$ParserDashb$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // puntosDataList2 ::= puntosDataValue COMA 
            {
              Object RESULT =null;

              CUP$ParserDashb$result = parser.getSymbolFactory().newSymbol("puntosDataList2",30, ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-1)), ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), RESULT);
            }
          return CUP$ParserDashb$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // puntosDataList2 ::= puntosDataList2 puntosDataValue COMA 
            {
              Object RESULT =null;

              CUP$ParserDashb$result = parser.getSymbolFactory().newSymbol("puntosDataList2",30, ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-2)), ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), RESULT);
            }
          return CUP$ParserDashb$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // puntosXt ::= IZQLLAVE puntosXtData COMA chart DERLLAVE 
            {
              Object RESULT =null;

              CUP$ParserDashb$result = parser.getSymbolFactory().newSymbol("puntosXt",32, ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-4)), ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), RESULT);
            }
          return CUP$ParserDashb$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // puntosXtData ::= KD_DATA IZQCORCH puntosXtDataList DERCORCH 
            {
              Object RESULT =null;

              CUP$ParserDashb$result = parser.getSymbolFactory().newSymbol("puntosXtData",33, ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-3)), ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), RESULT);
            }
          return CUP$ParserDashb$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // puntosXtDataList ::= puntosXtDataValue 
            {
              Object RESULT =null;

              CUP$ParserDashb$result = parser.getSymbolFactory().newSymbol("puntosXtDataList",34, ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), RESULT);
            }
          return CUP$ParserDashb$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // puntosXtDataList ::= puntosXtDataList2 puntosXtDataValue 
            {
              Object RESULT =null;

              CUP$ParserDashb$result = parser.getSymbolFactory().newSymbol("puntosXtDataList",34, ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-1)), ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), RESULT);
            }
          return CUP$ParserDashb$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // puntosXtDataValue ::= IZQLLAVE xValue COMA yValue COMA size COMA color DERLLAVE 
            {
              Object RESULT =null;

              CUP$ParserDashb$result = parser.getSymbolFactory().newSymbol("puntosXtDataValue",36, ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-8)), ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), RESULT);
            }
          return CUP$ParserDashb$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // puntosXtDataList2 ::= puntosXtDataValue COMA 
            {
              Object RESULT =null;

              CUP$ParserDashb$result = parser.getSymbolFactory().newSymbol("puntosXtDataList2",35, ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-1)), ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), RESULT);
            }
          return CUP$ParserDashb$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // puntosXtDataList2 ::= puntosXtDataList2 puntosXtDataValue COMA 
            {
              Object RESULT =null;

              CUP$ParserDashb$result = parser.getSymbolFactory().newSymbol("puntosXtDataList2",35, ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-2)), ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), RESULT);
            }
          return CUP$ParserDashb$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // lineas ::= IZQLLAVE lineasData COMA chart DERLLAVE 
            {
              Object RESULT =null;

              CUP$ParserDashb$result = parser.getSymbolFactory().newSymbol("lineas",37, ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-4)), ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), RESULT);
            }
          return CUP$ParserDashb$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // lineasData ::= KD_DATA IZQCORCH lineasDataList DERCORCH 
            {
              Object RESULT =null;

              CUP$ParserDashb$result = parser.getSymbolFactory().newSymbol("lineasData",38, ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-3)), ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), RESULT);
            }
          return CUP$ParserDashb$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // lineasDataList ::= lineasDataValue 
            {
              Object RESULT =null;

              CUP$ParserDashb$result = parser.getSymbolFactory().newSymbol("lineasDataList",39, ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), RESULT);
            }
          return CUP$ParserDashb$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // lineasDataList ::= lineasDataList2 lineasDataValue 
            {
              Object RESULT =null;

              CUP$ParserDashb$result = parser.getSymbolFactory().newSymbol("lineasDataList",39, ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-1)), ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), RESULT);
            }
          return CUP$ParserDashb$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // lineasDataValue ::= IZQLLAVE name COMA points DERLLAVE 
            {
              Object RESULT =null;

              CUP$ParserDashb$result = parser.getSymbolFactory().newSymbol("lineasDataValue",40, ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-4)), ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), RESULT);
            }
          return CUP$ParserDashb$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // lineasDataList2 ::= lineasDataValue COMA 
            {
              Object RESULT =null;

              CUP$ParserDashb$result = parser.getSymbolFactory().newSymbol("lineasDataList2",41, ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-1)), ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), RESULT);
            }
          return CUP$ParserDashb$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // lineasDataList2 ::= lineasDataList2 lineasDataValue COMA 
            {
              Object RESULT =null;

              CUP$ParserDashb$result = parser.getSymbolFactory().newSymbol("lineasDataList2",41, ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-2)), ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), RESULT);
            }
          return CUP$ParserDashb$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // lineasXt ::= IZQLLAVE lineasXtData COMA chart DERLLAVE 
            {
              Object RESULT =null;

              CUP$ParserDashb$result = parser.getSymbolFactory().newSymbol("lineasXt",42, ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-4)), ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), RESULT);
            }
          return CUP$ParserDashb$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // lineasXtData ::= KD_DATA IZQCORCH lineasXtDataList DERCORCH 
            {
              Object RESULT =null;

              CUP$ParserDashb$result = parser.getSymbolFactory().newSymbol("lineasXtData",43, ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-3)), ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), RESULT);
            }
          return CUP$ParserDashb$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // lineasXtDataList ::= lineasXtDataValue 
            {
              Object RESULT =null;

              CUP$ParserDashb$result = parser.getSymbolFactory().newSymbol("lineasXtDataList",44, ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), RESULT);
            }
          return CUP$ParserDashb$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // lineasXtDataList ::= lineasXtDataList2 lineasXtDataValue 
            {
              Object RESULT =null;

              CUP$ParserDashb$result = parser.getSymbolFactory().newSymbol("lineasXtDataList",44, ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-1)), ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), RESULT);
            }
          return CUP$ParserDashb$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // lineasXtDataValue ::= IZQLLAVE name COMA pointsXt COMA color COMA lineStyle DERLLAVE 
            {
              Object RESULT =null;

              CUP$ParserDashb$result = parser.getSymbolFactory().newSymbol("lineasXtDataValue",45, ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-8)), ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), RESULT);
            }
          return CUP$ParserDashb$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // lineasXtDataList2 ::= lineasXtDataValue COMA 
            {
              Object RESULT =null;

              CUP$ParserDashb$result = parser.getSymbolFactory().newSymbol("lineasXtDataList2",46, ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-1)), ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), RESULT);
            }
          return CUP$ParserDashb$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // lineasXtDataList2 ::= lineasXtDataList2 lineasXtDataValue COMA 
            {
              Object RESULT =null;

              CUP$ParserDashb$result = parser.getSymbolFactory().newSymbol("lineasXtDataList2",46, ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-2)), ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), RESULT);
            }
          return CUP$ParserDashb$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // tarjeta ::= IZQLLAVE tarjetaData DERLLAVE 
            {
              Object RESULT =null;

              CUP$ParserDashb$result = parser.getSymbolFactory().newSymbol("tarjeta",47, ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-2)), ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), RESULT);
            }
          return CUP$ParserDashb$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // tarjetaData ::= KD_DATA IZQLLAVE value COMA label COMA description DERLLAVE 
            {
              Object RESULT =null;

              CUP$ParserDashb$result = parser.getSymbolFactory().newSymbol("tarjetaData",48, ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-7)), ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), RESULT);
            }
          return CUP$ParserDashb$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // tarjetaXt ::= KD_DATA IZQLLAVE value COMA label COMA description COMA icon COMA color COMA link DERLLAVE 
            {
              Object RESULT =null;

              CUP$ParserDashb$result = parser.getSymbolFactory().newSymbol("tarjetaXt",49, ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-13)), ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), RESULT);
            }
          return CUP$ParserDashb$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // lineStyle ::= KD_LINE MI_TEXTO 
            {
              Object RESULT =null;

              CUP$ParserDashb$result = parser.getSymbolFactory().newSymbol("lineStyle",82, ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-1)), ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), RESULT);
            }
          return CUP$ParserDashb$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // name ::= KD_NAME MI_TEXTO 
            {
              Object RESULT =null;

              CUP$ParserDashb$result = parser.getSymbolFactory().newSymbol("name",83, ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-1)), ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), RESULT);
            }
          return CUP$ParserDashb$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // label ::= KD_LABEL MI_TEXTO 
            {
              Object RESULT =null;

              CUP$ParserDashb$result = parser.getSymbolFactory().newSymbol("label",50, ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-1)), ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), RESULT);
            }
          return CUP$ParserDashb$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // icon ::= KD_ICON MI_TEXTO 
            {
              Object RESULT =null;

              CUP$ParserDashb$result = parser.getSymbolFactory().newSymbol("icon",51, ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-1)), ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), RESULT);
            }
          return CUP$ParserDashb$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // link ::= KD_LINK MI_URL 
            {
              Object RESULT =null;

              CUP$ParserDashb$result = parser.getSymbolFactory().newSymbol("link",52, ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-1)), ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), RESULT);
            }
          return CUP$ParserDashb$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // title ::= KD_TITLE MI_TEXTO 
            {
              Object RESULT =null;

              CUP$ParserDashb$result = parser.getSymbolFactory().newSymbol("title",53, ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-1)), ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), RESULT);
            }
          return CUP$ParserDashb$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // description ::= KD_DESCRIP MI_TEXTO 
            {
              Object RESULT =null;

              CUP$ParserDashb$result = parser.getSymbolFactory().newSymbol("description",54, ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-1)), ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), RESULT);
            }
          return CUP$ParserDashb$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // copyright ::= KD_COPYR MI_TEXTO 
            {
              Object RESULT =null;

              CUP$ParserDashb$result = parser.getSymbolFactory().newSymbol("copyright",55, ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-1)), ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), RESULT);
            }
          return CUP$ParserDashb$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // backgr ::= KD_BACKGR MI_COLOR 
            {
              Object RESULT =null;

              CUP$ParserDashb$result = parser.getSymbolFactory().newSymbol("backgr",56, ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-1)), ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), RESULT);
            }
          return CUP$ParserDashb$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // fontFam ::= KD_FONTFAM MI_TEXTO 
            {
              Object RESULT =null;

              CUP$ParserDashb$result = parser.getSymbolFactory().newSymbol("fontFam",57, ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-1)), ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), RESULT);
            }
          return CUP$ParserDashb$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // fontSize ::= KD_FONTSIZE MI_TEXTO 
            {
              Object RESULT =null;

              CUP$ParserDashb$result = parser.getSymbolFactory().newSymbol("fontSize",58, ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-1)), ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), RESULT);
            }
          return CUP$ParserDashb$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // category ::= KD_CATEGORY MI_TEXTO 
            {
              Object RESULT =null;

              CUP$ParserDashb$result = parser.getSymbolFactory().newSymbol("category",59, ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-1)), ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), RESULT);
            }
          return CUP$ParserDashb$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // value ::= KD_VALUE MI_INTEGER 
            {
              Object RESULT =null;

              CUP$ParserDashb$result = parser.getSymbolFactory().newSymbol("value",60, ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-1)), ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), RESULT);
            }
          return CUP$ParserDashb$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // color ::= KD_COLOR MI_COLOR 
            {
              Object RESULT =null;

              CUP$ParserDashb$result = parser.getSymbolFactory().newSymbol("color",61, ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-1)), ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), RESULT);
            }
          return CUP$ParserDashb$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // xLabel ::= KD_XLABEL MI_TEXTO 
            {
              Object RESULT =null;

              CUP$ParserDashb$result = parser.getSymbolFactory().newSymbol("xLabel",62, ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-1)), ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), RESULT);
            }
          return CUP$ParserDashb$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // yLabel ::= KD_YLABEL MI_TEXTO 
            {
              Object RESULT =null;

              CUP$ParserDashb$result = parser.getSymbolFactory().newSymbol("yLabel",63, ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-1)), ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), RESULT);
            }
          return CUP$ParserDashb$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // legend ::= KD_LEGEND MI_TEXTO 
            {
              Object RESULT =null;

              CUP$ParserDashb$result = parser.getSymbolFactory().newSymbol("legend",64, ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-1)), ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), RESULT);
            }
          return CUP$ParserDashb$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // xValue ::= KD_X MI_INTEGER 
            {
              Object RESULT =null;

              CUP$ParserDashb$result = parser.getSymbolFactory().newSymbol("xValue",65, ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-1)), ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), RESULT);
            }
          return CUP$ParserDashb$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // yValue ::= KD_Y MI_INTEGER 
            {
              Object RESULT =null;

              CUP$ParserDashb$result = parser.getSymbolFactory().newSymbol("yValue",66, ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-1)), ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), RESULT);
            }
          return CUP$ParserDashb$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // size ::= KD_SIZE MI_INTEGER 
            {
              Object RESULT =null;

              CUP$ParserDashb$result = parser.getSymbolFactory().newSymbol("size",67, ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-1)), ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), RESULT);
            }
          return CUP$ParserDashb$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // header ::= KD_HEADER IZQLLAVE title DERLLAVE 
            {
              Object RESULT =null;

              CUP$ParserDashb$result = parser.getSymbolFactory().newSymbol("header",68, ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-3)), ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), RESULT);
            }
          return CUP$ParserDashb$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // footer ::= KD_FOOTER IZQLLAVE copyright DERLLAVE 
            {
              Object RESULT =null;

              CUP$ParserDashb$result = parser.getSymbolFactory().newSymbol("footer",69, ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-3)), ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), RESULT);
            }
          return CUP$ParserDashb$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // chart ::= KD_CHART IZQLLAVE title COMA xLabel COMA yLabel DERLLAVE 
            {
              Object RESULT =null;

              CUP$ParserDashb$result = parser.getSymbolFactory().newSymbol("chart",70, ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-7)), ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), RESULT);
            }
          return CUP$ParserDashb$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // pastelXtChart ::= KD_CHART IZQLLAVE title COMA legend DERLLAVE 
            {
              Object RESULT =null;

              CUP$ParserDashb$result = parser.getSymbolFactory().newSymbol("pastelXtChart",26, ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-5)), ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), RESULT);
            }
          return CUP$ParserDashb$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // keywords ::= KD_KEYWORDS IZQCORCH keywordList DERCORCH 
            {
              Object RESULT =null;

              CUP$ParserDashb$result = parser.getSymbolFactory().newSymbol("keywords",71, ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-3)), ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), RESULT);
            }
          return CUP$ParserDashb$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // keywordList ::= 
            {
              Object RESULT =null;

              CUP$ParserDashb$result = parser.getSymbolFactory().newSymbol("keywordList",72, ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), RESULT);
            }
          return CUP$ParserDashb$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // keywordList ::= MI_TEXTO 
            {
              Object RESULT =null;

              CUP$ParserDashb$result = parser.getSymbolFactory().newSymbol("keywordList",72, ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), RESULT);
            }
          return CUP$ParserDashb$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // keywordList ::= keywordList2 MI_TEXTO 
            {
              Object RESULT =null;

              CUP$ParserDashb$result = parser.getSymbolFactory().newSymbol("keywordList",72, ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-1)), ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), RESULT);
            }
          return CUP$ParserDashb$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // keywordList2 ::= MI_TEXTO COMA 
            {
              Object RESULT =null;

              CUP$ParserDashb$result = parser.getSymbolFactory().newSymbol("keywordList2",73, ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-1)), ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), RESULT);
            }
          return CUP$ParserDashb$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // keywordList2 ::= keywordList2 MI_TEXTO COMA 
            {
              Object RESULT =null;

              CUP$ParserDashb$result = parser.getSymbolFactory().newSymbol("keywordList2",73, ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-2)), ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), RESULT);
            }
          return CUP$ParserDashb$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // points ::= KD_PONTS IZQCORCH pointList DERCORCH 
            {
              Object RESULT =null;

              CUP$ParserDashb$result = parser.getSymbolFactory().newSymbol("points",74, ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-3)), ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), RESULT);
            }
          return CUP$ParserDashb$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // pointList ::= pointValue 
            {
              Object RESULT =null;

              CUP$ParserDashb$result = parser.getSymbolFactory().newSymbol("pointList",75, ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), RESULT);
            }
          return CUP$ParserDashb$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // pointList ::= pointList2 pointValue 
            {
              Object RESULT =null;

              CUP$ParserDashb$result = parser.getSymbolFactory().newSymbol("pointList",75, ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-1)), ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), RESULT);
            }
          return CUP$ParserDashb$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // pointValue ::= IZQLLAVE xValue COMA yValue DERLLAVE 
            {
              Object RESULT =null;

              CUP$ParserDashb$result = parser.getSymbolFactory().newSymbol("pointValue",76, ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-4)), ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), RESULT);
            }
          return CUP$ParserDashb$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // pointList2 ::= pointValue COMA 
            {
              Object RESULT =null;

              CUP$ParserDashb$result = parser.getSymbolFactory().newSymbol("pointList2",77, ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-1)), ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), RESULT);
            }
          return CUP$ParserDashb$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // pointList2 ::= pointList2 pointValue COMA 
            {
              Object RESULT =null;

              CUP$ParserDashb$result = parser.getSymbolFactory().newSymbol("pointList2",77, ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-2)), ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), RESULT);
            }
          return CUP$ParserDashb$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // pointsXt ::= KD_PONTS IZQCORCH pointXtList DERCORCH 
            {
              Object RESULT =null;

              CUP$ParserDashb$result = parser.getSymbolFactory().newSymbol("pointsXt",78, ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-3)), ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), RESULT);
            }
          return CUP$ParserDashb$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // pointXtList ::= pointXtValue 
            {
              Object RESULT =null;

              CUP$ParserDashb$result = parser.getSymbolFactory().newSymbol("pointXtList",79, ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), RESULT);
            }
          return CUP$ParserDashb$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // pointXtList ::= pointXtList2 pointXtValue 
            {
              Object RESULT =null;

              CUP$ParserDashb$result = parser.getSymbolFactory().newSymbol("pointXtList",79, ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-1)), ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), RESULT);
            }
          return CUP$ParserDashb$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // pointXtList2 ::= pointXtValue COMA 
            {
              Object RESULT =null;

              CUP$ParserDashb$result = parser.getSymbolFactory().newSymbol("pointXtList2",80, ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-1)), ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), RESULT);
            }
          return CUP$ParserDashb$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // pointXtList2 ::= pointXtList2 pointXtValue COMA 
            {
              Object RESULT =null;

              CUP$ParserDashb$result = parser.getSymbolFactory().newSymbol("pointXtList2",80, ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-2)), ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), RESULT);
            }
          return CUP$ParserDashb$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // pointXtValue ::= IZQLLAVE xValue COMA yValue COMA label DERLLAVE 
            {
              Object RESULT =null;

              CUP$ParserDashb$result = parser.getSymbolFactory().newSymbol("pointXtValue",81, ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-6)), ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), RESULT);
            }
          return CUP$ParserDashb$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$ParserDashb$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$ParserDashb$do_action(
    int                        CUP$ParserDashb$act_num,
    java_cup.runtime.lr_parser CUP$ParserDashb$parser,
    java.util.Stack            CUP$ParserDashb$stack,
    int                        CUP$ParserDashb$top)
    throws java.lang.Exception
    {
              return CUP$ParserDashb$do_action_part00000000(
                               CUP$ParserDashb$act_num,
                               CUP$ParserDashb$parser,
                               CUP$ParserDashb$stack,
                               CUP$ParserDashb$top);
    }
}

}
