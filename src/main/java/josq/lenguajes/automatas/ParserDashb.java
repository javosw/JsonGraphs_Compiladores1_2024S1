
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package josq.lenguajes.automatas;

import java.util.ArrayList;
import josq.lenguajes.modelos.Barras;
import josq.lenguajes.modelos.BarrasXt;
import josq.lenguajes.modelos.Chart1;
import josq.lenguajes.modelos.Index;
import josq.lenguajes.modelos.Par;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class ParserDashb extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return ParserDashbSym.class;
}

  /** Default constructor. */
  @Deprecated
  public ParserDashb() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public ParserDashb(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public ParserDashb(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\214\000\002\002\004\000\002\012\005\000\002\013" +
    "\004\000\002\013\004\000\002\014\003\000\002\014\005" +
    "\000\002\015\003\000\002\015\005\000\002\016\003\000" +
    "\002\016\004\000\002\020\003\000\002\020\003\000\002" +
    "\020\003\000\002\020\003\000\002\020\003\000\002\020" +
    "\003\000\002\020\003\000\002\020\003\000\002\017\004" +
    "\000\002\017\005\000\002\022\003\000\002\022\004\000" +
    "\002\021\003\000\002\021\003\000\002\021\003\000\002" +
    "\021\003\000\002\021\003\000\002\021\003\000\002\021" +
    "\003\000\002\021\003\000\002\021\003\000\002\021\003" +
    "\000\002\021\004\000\002\023\005\000\002\025\006\000" +
    "\002\026\003\000\002\026\004\000\002\024\007\000\002" +
    "\024\007\000\002\027\004\000\002\027\005\000\002\030" +
    "\007\000\002\032\006\000\002\033\003\000\002\033\004" +
    "\000\002\031\011\000\002\031\011\000\002\031\011\000" +
    "\002\031\011\000\002\031\011\000\002\031\011\000\002" +
    "\034\004\000\002\034\005\000\002\035\005\000\002\036" +
    "\006\000\002\037\003\000\002\037\004\000\002\041\007" +
    "\000\002\040\004\000\002\040\005\000\002\042\007\000" +
    "\002\043\006\000\002\044\003\000\002\044\004\000\002" +
    "\046\011\000\002\045\004\000\002\045\005\000\002\050" +
    "\005\000\002\051\006\000\002\052\003\000\002\052\004" +
    "\000\002\054\007\000\002\053\004\000\002\053\005\000" +
    "\002\055\007\000\002\056\006\000\002\057\003\000\002" +
    "\057\004\000\002\061\013\000\002\060\004\000\002\060" +
    "\005\000\002\062\007\000\002\063\006\000\002\064\003" +
    "\000\002\064\004\000\002\065\007\000\002\066\004\000" +
    "\002\066\005\000\002\067\007\000\002\070\006\000\002" +
    "\071\003\000\002\071\004\000\002\072\013\000\002\073" +
    "\004\000\002\073\005\000\002\074\005\000\002\075\012" +
    "\000\002\076\020\000\002\002\004\000\002\003\004\000" +
    "\002\005\006\000\002\006\006\000\002\007\004\000\002" +
    "\010\004\000\002\011\004\000\002\077\004\000\002\100" +
    "\004\000\002\104\004\000\002\130\004\000\002\110\004" +
    "\000\002\112\004\000\002\113\004\000\002\114\004\000" +
    "\002\115\004\000\002\102\004\000\002\103\004\000\002" +
    "\105\004\000\002\106\004\000\002\107\004\000\002\111" +
    "\004\000\002\101\012\000\002\047\010\000\002\004\006" +
    "\000\002\116\002\000\002\116\003\000\002\116\004\000" +
    "\002\117\004\000\002\117\005\000\002\120\006\000\002" +
    "\121\003\000\002\121\004\000\002\122\007\000\002\123" +
    "\004\000\002\123\005\000\002\124\006\000\002\125\003" +
    "\000\002\125\004\000\002\126\004\000\002\126\005\000" +
    "\002\127\011" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0161\000\004\010\005\001\002\000\004\002\u0163\001" +
    "\002\000\030\003\035\010\046\015\017\020\015\021\024" +
    "\023\043\024\014\025\016\041\013\042\007\043\037\001" +
    "\002\000\032\003\uffe4\010\uffe4\011\uffe4\015\uffe4\020\uffe4" +
    "\021\uffe4\023\uffe4\024\uffe4\025\uffe4\041\uffe4\042\uffe4\043" +
    "\uffe4\001\002\000\004\010\u015e\001\002\000\032\003\uffe2" +
    "\010\uffe2\011\uffe2\015\uffe2\020\uffe2\021\uffe2\023\uffe2\024" +
    "\uffe2\025\uffe2\041\uffe2\042\uffe2\043\uffe2\001\002\000\014" +
    "\003\ufff0\010\ufff0\011\ufff0\014\ufff0\015\ufff0\001\002\000" +
    "\032\003\uffe8\010\uffe8\011\uffe8\015\uffe8\020\uffe8\021\uffe8" +
    "\023\uffe8\024\uffe8\025\uffe8\041\uffe8\042\uffe8\043\uffe8\001" +
    "\002\000\004\010\u015b\001\002\000\004\004\u015a\001\002" +
    "\000\004\004\u0159\001\002\000\004\004\u0158\001\002\000" +
    "\004\010\u0147\001\002\000\032\003\uffed\010\uffed\011\uffed" +
    "\015\uffed\020\uffed\021\uffed\023\uffed\024\uffed\025\uffed\041" +
    "\uffed\042\uffed\043\uffed\001\002\000\014\003\ufff9\010\ufff9" +
    "\011\ufff9\014\u0146\015\ufff9\001\002\000\010\003\035\010" +
    "\046\015\017\001\002\000\014\003\ufff2\010\ufff2\011\ufff2" +
    "\014\ufff2\015\ufff2\001\002\000\004\004\u0141\001\002\000" +
    "\014\003\ufff5\010\ufff5\011\ufff5\014\ufff5\015\ufff5\001\002" +
    "\000\022\020\015\021\024\023\043\024\014\025\016\041" +
    "\013\042\007\043\037\001\002\000\032\003\uffeb\010\uffeb" +
    "\011\uffeb\015\uffeb\020\uffeb\021\uffeb\023\uffeb\024\uffeb\025" +
    "\uffeb\041\uffeb\042\uffeb\043\uffeb\001\002\000\032\003\uffea" +
    "\010\uffea\011\uffea\015\uffea\020\uffea\021\uffea\023\uffea\024" +
    "\uffea\025\uffea\041\uffea\042\uffea\043\uffea\001\002\000\030" +
    "\003\035\010\046\015\017\020\015\021\024\023\043\024" +
    "\014\025\016\041\013\042\007\043\037\001\002\000\032" +
    "\003\uffe6\010\uffe6\011\uffe6\015\uffe6\020\uffe6\021\uffe6\023" +
    "\uffe6\024\uffe6\025\uffe6\041\uffe6\042\uffe6\043\uffe6\001\002" +
    "\000\014\003\ufff1\010\ufff1\011\ufff1\014\ufff1\015\ufff1\001" +
    "\002\000\014\003\ufff3\010\ufff3\011\ufff3\014\ufff3\015\ufff3" +
    "\001\002\000\004\011\u0139\001\002\000\004\011\u0138\001" +
    "\002\000\004\012\u0130\001\002\000\014\003\ufff6\010\ufff6" +
    "\011\ufff6\014\ufff6\015\ufff6\001\002\000\014\003\ufff4\010" +
    "\ufff4\011\ufff4\014\ufff4\015\ufff4\001\002\000\032\003\uffe3" +
    "\010\uffe3\011\uffe3\015\uffe3\020\uffe3\021\uffe3\023\uffe3\024" +
    "\uffe3\025\uffe3\041\uffe3\042\uffe3\043\uffe3\001\002\000\004" +
    "\007\u012f\001\002\000\032\003\uffe7\010\uffe7\011\uffe7\015" +
    "\uffe7\020\uffe7\021\uffe7\023\uffe7\024\uffe7\025\uffe7\041\uffe7" +
    "\042\uffe7\043\uffe7\001\002\000\032\003\uffe5\010\uffe5\011" +
    "\uffe5\015\uffe5\020\uffe5\021\uffe5\023\uffe5\024\uffe5\025\uffe5" +
    "\041\uffe5\042\uffe5\043\uffe5\001\002\000\004\015\055\001" +
    "\002\000\032\003\uffe9\010\uffe9\011\uffe9\015\uffe9\020\uffe9" +
    "\021\uffe9\023\uffe9\024\uffe9\025\uffe9\041\uffe9\042\uffe9\043" +
    "\uffe9\001\002\000\014\003\ufff7\010\ufff7\011\ufff7\014\ufff7" +
    "\015\ufff7\001\002\000\004\014\u012c\001\002\000\004\011" +
    "\u012b\001\002\000\004\014\u0120\001\002\000\004\014\u011d" +
    "\001\002\000\006\010\111\012\110\001\002\000\004\011" +
    "\107\001\002\000\004\011\106\001\002\000\004\011\105" +
    "\001\002\000\004\014\102\001\002\000\004\014\063\001" +
    "\002\000\004\016\065\001\002\000\004\011\101\001\002" +
    "\000\004\010\066\001\002\000\004\020\015\001\002\000" +
    "\004\014\070\001\002\000\004\033\072\001\002\000\004" +
    "\014\074\001\002\000\004\004\073\001\002\000\004\014" +
    "\uff8f\001\002\000\004\034\076\001\002\000\004\011\100" +
    "\001\002\000\004\004\077\001\002\000\004\011\uff8e\001" +
    "\002\000\004\011\uff89\001\002\000\032\003\uffb7\010\uffb7" +
    "\011\uffb7\015\uffb7\020\uffb7\021\uffb7\023\uffb7\024\uffb7\025" +
    "\uffb7\041\uffb7\042\uffb7\043\uffb7\001\002\000\004\016\065" +
    "\001\002\000\004\011\104\001\002\000\032\003\uffa9\010" +
    "\uffa9\011\uffa9\015\uffa9\020\uffa9\021\uffa9\023\uffa9\024\uffa9" +
    "\025\uffa9\041\uffa9\042\uffa9\043\uffa9\001\002\000\032\003" +
    "\uffbe\010\uffbe\011\uffbe\015\uffbe\020\uffbe\021\uffbe\023\uffbe" +
    "\024\uffbe\025\uffbe\041\uffbe\042\uffbe\043\uffbe\001\002\000" +
    "\032\003\uffcc\010\uffcc\011\uffcc\015\uffcc\020\uffcc\021\uffcc" +
    "\023\uffcc\024\uffcc\025\uffcc\041\uffcc\042\uffcc\043\uffcc\001" +
    "\002\000\032\003\uffa2\010\uffa2\011\uffa2\015\uffa2\020\uffa2" +
    "\021\uffa2\023\uffa2\024\uffa2\025\uffa2\041\uffa2\042\uffa2\043" +
    "\uffa2\001\002\000\004\010\153\001\002\000\004\027\112" +
    "\001\002\000\004\006\123\001\002\000\004\014\114\001" +
    "\002\000\004\017\116\001\002\000\004\014\120\001\002" +
    "\000\004\004\117\001\002\000\006\011\uff93\014\uff93\001" +
    "\002\000\004\021\024\001\002\000\004\011\122\001\002" +
    "\000\004\011\uffa1\001\002\000\006\011\uff97\014\uff97\001" +
    "\002\000\004\010\u0114\001\002\000\004\010\u010f\001\002" +
    "\000\006\013\uffca\014\u010d\001\002\000\004\013\u010c\001" +
    "\002\000\004\010\u0107\001\002\000\004\010\u0100\001\002" +
    "\000\004\010\366\001\002\000\006\013\uffde\014\365\001" +
    "\002\000\004\010\356\001\002\000\004\013\355\001\002" +
    "\000\006\013\uffbc\014\354\001\002\000\004\013\353\001" +
    "\002\000\004\013\352\001\002\000\004\013\351\001\002" +
    "\000\006\013\uffae\014\350\001\002\000\006\013\uffc3\014" +
    "\347\001\002\000\004\013\346\001\002\000\004\013\345" +
    "\001\002\000\004\010\340\001\002\000\004\013\336\001" +
    "\002\000\004\010\331\001\002\000\006\013\uffd6\014\327" +
    "\001\002\000\006\013\uffa7\014\326\001\002\000\016\017" +
    "\116\026\164\027\112\030\165\036\162\046\157\001\002" +
    "\000\006\013\uffb5\014\155\001\002\000\004\010\uffb2\001" +
    "\002\000\004\014\253\001\002\000\004\004\252\001\002" +
    "\000\004\014\240\001\002\000\004\014\227\001\002\000" +
    "\004\006\226\001\002\000\004\014\212\001\002\000\004" +
    "\004\211\001\002\000\004\007\210\001\002\000\004\014" +
    "\202\001\002\000\004\014\170\001\002\000\006\026\164" +
    "\030\165\001\002\000\004\014\177\001\002\000\006\011" +
    "\174\014\173\001\002\000\004\030\165\001\002\000\006" +
    "\013\uffdb\014\uffdb\001\002\000\004\011\176\001\002\000" +
    "\006\013\uffd2\014\uffd2\001\002\000\004\026\164\001\002" +
    "\000\004\011\201\001\002\000\006\013\uffd1\014\uffd1\001" +
    "\002\000\004\027\112\001\002\000\006\011\205\014\204" +
    "\001\002\000\004\030\165\001\002\000\006\013\uffc8\014" +
    "\uffc8\001\002\000\004\011\207\001\002\000\006\013\uffc1" +
    "\014\uffc1\001\002\000\006\011\uff96\014\uff96\001\002\000" +
    "\006\011\uff98\014\uff98\001\002\000\004\037\214\001\002" +
    "\000\006\011\217\014\216\001\002\000\004\006\215\001" +
    "\002\000\006\011\uff8b\014\uff8b\001\002\000\004\040\221" +
    "\001\002\000\006\013\uffba\014\uffba\001\002\000\004\014" +
    "\223\001\002\000\004\006\222\001\002\000\004\014\uff8a" +
    "\001\002\000\004\030\165\001\002\000\004\011\225\001" +
    "\002\000\006\013\uffb3\014\uffb3\001\002\000\004\014\uff8c" +
    "\001\002\000\006\026\164\027\112\001\002\000\004\014" +
    "\235\001\002\000\004\014\232\001\002\000\004\026\164" +
    "\001\002\000\004\011\234\001\002\000\006\013\uffd0\014" +
    "\uffd0\001\002\000\004\027\112\001\002\000\004\011\237" +
    "\001\002\000\006\013\uffcf\014\uffcf\001\002\000\006\027" +
    "\112\030\165\001\002\000\004\014\247\001\002\000\006" +
    "\011\244\014\243\001\002\000\004\030\165\001\002\000" +
    "\006\013\uffdc\014\uffdc\001\002\000\004\011\246\001\002" +
    "\000\006\013\uffd4\014\uffd4\001\002\000\004\027\112\001" +
    "\002\000\004\011\251\001\002\000\006\013\uffd3\014\uffd3" +
    "\001\002\000\004\014\uff94\001\002\000\004\044\256\001" +
    "\002\000\004\014\317\001\002\000\004\011\316\001\002" +
    "\000\004\012\257\001\002\000\004\010\264\001\002\000" +
    "\004\013\315\001\002\000\004\010\307\001\002\000\004" +
    "\010\301\001\002\000\004\013\300\001\002\000\004\036" +
    "\162\001\002\000\006\013\uff80\014\270\001\002\000\006" +
    "\013\uff7a\014\267\001\002\000\004\010\uff78\001\002\000" +
    "\004\010\uff7d\001\002\000\004\014\272\001\002\000\004" +
    "\037\214\001\002\000\006\011\275\014\274\001\002\000" +
    "\004\017\116\001\002\000\006\013\uff7e\014\uff7e\001\002" +
    "\000\004\011\277\001\002\000\006\013\uff76\014\uff76\001" +
    "\002\000\004\014\uff7b\001\002\000\004\036\162\001\002" +
    "\000\006\013\uff79\014\303\001\002\000\004\010\uff77\001" +
    "\002\000\004\014\305\001\002\000\004\037\214\001\002" +
    "\000\004\014\274\001\002\000\004\036\162\001\002\000" +
    "\006\013\uff7f\014\311\001\002\000\004\010\uff7c\001\002" +
    "\000\004\014\313\001\002\000\004\037\214\001\002\000" +
    "\004\011\275\001\002\000\004\011\uff81\001\002\000\006" +
    "\013\uffac\014\uffac\001\002\000\004\030\165\001\002\000" +
    "\004\014\321\001\002\000\004\045\323\001\002\000\004" +
    "\011\325\001\002\000\004\004\324\001\002\000\004\011" +
    "\uff95\001\002\000\006\013\uffa5\014\uffa5\001\002\000\004" +
    "\010\uffa4\001\002\000\004\010\uffce\001\002\000\006\013" +
    "\uffc9\014\335\001\002\000\004\017\116\001\002\000\004" +
    "\014\333\001\002\000\004\027\112\001\002\000\004\011" +
    "\205\001\002\000\004\010\uffc6\001\002\000\004\014\uffa8" +
    "\001\002\000\006\013\uffb4\014\344\001\002\000\004\036" +
    "\162\001\002\000\004\014\342\001\002\000\004\037\214" +
    "\001\002\000\004\014\216\001\002\000\004\010\uffb1\001" +
    "\002\000\004\011\uffbd\001\002\000\004\014\uffb6\001\002" +
    "\000\004\010\uffc0\001\002\000\004\010\uffab\001\002\000" +
    "\004\014\uffaf\001\002\000\004\014\uffc4\001\002\000\004" +
    "\011\uffcb\001\002\000\004\010\uffb9\001\002\000\004\014" +
    "\uffd7\001\002\000\004\046\157\001\002\000\006\013\uffa6" +
    "\014\360\001\002\000\004\010\uffa3\001\002\000\004\014" +
    "\362\001\002\000\004\044\363\001\002\000\004\012\364" +
    "\001\002\000\004\010\301\001\002\000\004\010\uffda\001" +
    "\002\000\010\026\164\027\112\030\165\001\002\000\006" +
    "\013\uffd5\014\370\001\002\000\004\010\uffcd\001\002\000" +
    "\004\014\375\001\002\000\004\014\373\001\002\000\006" +
    "\026\164\030\165\001\002\000\004\014\173\001\002\000" +
    "\006\027\112\030\165\001\002\000\004\014\243\001\002" +
    "\000\006\013\uffad\014\u0105\001\002\000\004\046\157\001" +
    "\002\000\004\014\u0102\001\002\000\004\044\u0103\001\002" +
    "\000\004\012\u0104\001\002\000\004\010\307\001\002\000" +
    "\004\010\uffaa\001\002\000\006\013\uffc2\014\u010b\001\002" +
    "\000\004\017\116\001\002\000\004\014\u0109\001\002\000" +
    "\004\027\112\001\002\000\004\014\204\001\002\000\004" +
    "\010\uffbf\001\002\000\004\011\uffdf\001\002\000\004\010" +
    "\uffc7\001\002\000\006\013\uffbb\014\u0113\001\002\000\004" +
    "\036\162\001\002\000\004\014\u0111\001\002\000\004\037" +
    "\214\001\002\000\004\011\217\001\002\000\004\010\uffb8" +
    "\001\002\000\006\026\164\027\112\001\002\000\006\013" +
    "\uffdd\014\u0116\001\002\000\004\010\uffd9\001\002\000\004" +
    "\014\u011b\001\002\000\004\014\u0119\001\002\000\004\026" +
    "\164\001\002\000\004\011\174\001\002\000\004\027\112" +
    "\001\002\000\004\011\244\001\002\000\004\016\065\001" +
    "\002\000\004\011\u011f\001\002\000\032\003\uffb0\010\uffb0" +
    "\011\uffb0\015\uffb0\020\uffb0\021\uffb0\023\uffb0\024\uffb0\025" +
    "\uffb0\041\uffb0\042\uffb0\043\uffb0\001\002\000\004\016\u0122" +
    "\001\002\000\004\011\u012a\001\002\000\004\010\u0123\001" +
    "\002\000\004\020\015\001\002\000\004\014\u0125\001\002" +
    "\000\004\035\u0127\001\002\000\004\011\u0129\001\002\000" +
    "\004\004\u0128\001\002\000\004\011\uff8d\001\002\000\004" +
    "\011\uff88\001\002\000\032\003\uffc5\010\uffc5\011\uffc5\015" +
    "\uffc5\020\uffc5\021\uffc5\023\uffc5\024\uffc5\025\uffc5\041\uffc5" +
    "\042\uffc5\043\uffc5\001\002\000\032\003\uffe0\010\uffe0\011" +
    "\uffe0\015\uffe0\020\uffe0\021\uffe0\023\uffe0\024\uffe0\025\uffe0" +
    "\041\uffe0\042\uffe0\043\uffe0\001\002\000\004\016\065\001" +
    "\002\000\004\011\u012e\001\002\000\032\003\uffd8\010\uffd8" +
    "\011\uffd8\015\uffd8\020\uffd8\021\uffd8\023\uffd8\024\uffd8\025" +
    "\uffd8\041\uffd8\042\uffd8\043\uffd8\001\002\000\014\003\uff9b" +
    "\010\uff9b\011\uff9b\014\uff9b\015\uff9b\001\002\000\006\004" +
    "\u0133\013\uff86\001\002\000\004\004\u0136\001\002\000\004" +
    "\013\u0135\001\002\000\006\013\uff85\014\u0134\001\002\000" +
    "\004\004\uff83\001\002\000\014\003\uff87\010\uff87\011\uff87" +
    "\014\uff87\015\uff87\001\002\000\006\013\uff84\014\u0137\001" +
    "\002\000\004\004\uff82\001\002\000\004\002\000\001\002" +
    "\000\032\003\uffe1\010\uffe1\011\uffe1\015\uffe1\020\uffe1\021" +
    "\uffe1\023\uffe1\024\uffe1\025\uffe1\041\uffe1\042\uffe1\043\uffe1" +
    "\001\002\000\012\003\035\010\046\011\ufffe\015\017\001" +
    "\002\000\032\003\uffec\010\uffec\011\uffec\015\uffec\020\uffec" +
    "\021\uffec\023\uffec\024\uffec\025\uffec\041\uffec\042\uffec\043" +
    "\uffec\001\002\000\012\003\ufffb\010\ufffb\011\ufffb\015\ufffb" +
    "\001\002\000\030\003\035\010\046\015\017\020\015\021" +
    "\024\023\043\024\014\025\016\041\013\042\007\043\037" +
    "\001\002\000\012\003\ufffa\010\ufffa\011\ufffa\015\ufffa\001" +
    "\002\000\014\003\ufff8\010\ufff8\011\ufff8\014\u0140\015\ufff8" +
    "\001\002\000\022\020\uffee\021\uffee\023\uffee\024\uffee\025" +
    "\uffee\041\uffee\042\uffee\043\uffee\001\002\000\014\003\uff9e" +
    "\010\uff9e\011\uff9e\014\uff9e\015\uff9e\001\002\000\024\011" +
    "\uffff\020\015\021\024\023\043\024\014\025\016\041\013" +
    "\042\007\043\037\001\002\000\032\003\035\010\046\011" +
    "\ufffd\015\017\020\ufffd\021\ufffd\023\ufffd\024\ufffd\025\ufffd" +
    "\041\ufffd\042\ufffd\043\ufffd\001\002\000\010\003\035\010" +
    "\046\015\017\001\002\000\032\003\035\010\046\011\ufffc" +
    "\015\017\020\ufffc\021\ufffc\023\ufffc\024\ufffc\025\ufffc\041" +
    "\ufffc\042\ufffc\043\ufffc\001\002\000\022\020\uffef\021\uffef" +
    "\023\uffef\024\uffef\025\uffef\041\uffef\042\uffef\043\uffef\001" +
    "\002\000\004\027\112\001\002\000\004\014\u0149\001\002" +
    "\000\004\017\116\001\002\000\004\014\u014b\001\002\000" +
    "\004\021\024\001\002\000\004\014\u014d\001\002\000\004" +
    "\031\u014f\001\002\000\004\014\u0151\001\002\000\004\004" +
    "\u0150\001\002\000\004\014\uff92\001\002\000\004\030\165" +
    "\001\002\000\004\014\u0153\001\002\000\004\032\u0155\001" +
    "\002\000\004\011\u0157\001\002\000\004\005\u0156\001\002" +
    "\000\004\011\uff91\001\002\000\032\003\uffa0\010\uffa0\011" +
    "\uffa0\015\uffa0\020\uffa0\021\uffa0\023\uffa0\024\uffa0\025\uffa0" +
    "\041\uffa0\042\uffa0\043\uffa0\001\002\000\014\003\uff99\010" +
    "\uff99\011\uff99\014\uff99\015\uff99\001\002\000\014\003\uff9f" +
    "\010\uff9f\011\uff9f\014\uff9f\015\uff9f\001\002\000\014\003" +
    "\uff9a\010\uff9a\011\uff9a\014\uff9a\015\uff9a\001\002\000\004" +
    "\020\015\001\002\000\004\011\u015d\001\002\000\014\003" +
    "\uff9d\010\uff9d\011\uff9d\014\uff9d\015\uff9d\001\002\000\004" +
    "\022\u015f\001\002\000\004\004\u0162\001\002\000\004\011" +
    "\u0161\001\002\000\014\003\uff9c\010\uff9c\011\uff9c\014\uff9c" +
    "\015\uff9c\001\002\000\004\011\uff90\001\002\000\004\002" +
    "\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0161\000\004\012\003\001\001\000\002\001\001\000" +
    "\062\002\047\003\037\004\024\005\040\006\033\007\022" +
    "\010\032\011\010\013\035\016\021\017\025\020\020\021" +
    "\017\022\030\023\026\030\027\035\046\042\011\050\043" +
    "\055\031\062\044\067\005\074\041\076\007\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\034\014\u0141\021" +
    "\017\022\u0142\023\026\030\027\035\046\042\011\050\043" +
    "\055\031\062\044\067\005\074\041\076\007\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\024" +
    "\002\047\003\037\004\024\005\040\006\033\007\022\010" +
    "\032\011\010\020\u013e\001\001\000\002\001\001\000\002" +
    "\001\001\000\060\002\047\003\037\004\024\005\040\006" +
    "\033\007\022\010\032\011\010\015\u0139\016\u013b\017\025" +
    "\020\020\021\u013a\023\026\030\027\035\046\042\011\050" +
    "\043\055\031\062\044\067\005\074\041\076\007\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\024\025\051" +
    "\032\050\036\056\043\052\051\057\056\061\063\053\070" +
    "\060\075\055\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\101\063\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\002\066\001\001\000\002\001\001\000" +
    "\004\102\070\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\103\074\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\101\102\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\062\024\132\026\126\027\123\031" +
    "\150\033\134\034\131\037\136\040\147\041\125\044\137" +
    "\045\127\046\142\052\144\053\124\054\135\057\143\060" +
    "\145\061\153\064\140\065\141\066\130\071\146\072\151" +
    "\073\133\001\001\000\004\100\112\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\112\114\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\003" +
    "\120\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\024\u0114\001\001\000\004\054\u010d\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\046\u0105" +
    "\001\001\000\004\065\376\001\001\000\004\031\366\001" +
    "\001\000\002\001\001\000\004\072\356\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\061\336\001" +
    "\001\000\002\001\001\000\004\041\327\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\077\157\100\166\104" +
    "\160\106\162\110\155\112\165\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\077\171\104\170\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\104\174\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\077\177\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\100\202\001\001\000\002\001\001\000\004" +
    "\104\205\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\107\212\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\111\217\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\104\223\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\077\227\100\230\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\077\232\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\100\235\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\100\241" +
    "\104\240\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\104\244\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\100\247\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\120\254" +
    "\124\253\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\121\257\122\264\123\260\125\262" +
    "\126\261\127\265\001\001\000\002\001\001\000\004\122" +
    "\307\001\001\000\004\127\301\001\001\000\002\001\001" +
    "\000\004\106\270\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\107\272\001\001\000\002\001\001\000\004\112" +
    "\275\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\106\303\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\107\305\001\001\000\002\001\001\000\004\106\311\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\107\313\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\104\317\001\001\000\002" +
    "\001\001\000\004\130\321\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\112" +
    "\331\001\001\000\002\001\001\000\004\100\333\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\106\340\001\001\000\002\001\001" +
    "\000\004\107\342\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\110\360\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\124\253\001\001\000\002\001\001" +
    "\000\010\125\262\126\261\127\265\001\001\000\002\001" +
    "\001\000\010\077\370\100\371\104\160\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\077\373\104\170\001\001\000\002\001\001" +
    "\000\006\100\375\104\240\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\110\u0100\001\001\000\002\001\001" +
    "\000\004\120\254\001\001\000\002\001\001\000\010\121" +
    "\257\122\264\123\260\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\112\u0107\001\001\000\002\001\001\000" +
    "\004\100\u0109\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\106\u010f\001\001\000\002\001\001\000\004\107\u0111" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\077" +
    "\u0116\100\u0117\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\077\u0119\001" +
    "\001\000\002\001\001\000\004\100\u011b\001\001\000\002" +
    "\001\001\000\004\101\u011d\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\047\u0120\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\002\u0123\001\001\000\002\001" +
    "\001\000\004\105\u0125\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\101\u012c\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\116" +
    "\u0131\117\u0130\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\032\021\017\022\u013c\023\026\030\027\035" +
    "\046\042\011\050\043\055\031\062\044\067\005\074\041" +
    "\076\007\001\001\000\002\001\001\000\002\001\001\000" +
    "\056\002\047\003\037\004\024\005\040\006\033\007\022" +
    "\010\032\011\010\016\u013d\017\025\020\020\021\u013a\023" +
    "\026\030\027\035\046\042\011\050\043\055\031\062\044" +
    "\067\005\074\041\076\007\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\030" +
    "\002\047\003\037\004\024\005\040\006\033\007\022\010" +
    "\032\011\010\016\u0143\017\025\020\020\001\001\000\030" +
    "\021\u013a\023\026\030\027\035\046\042\011\050\043\055" +
    "\031\062\044\067\005\074\041\076\007\001\001\000\032" +
    "\021\017\022\u0144\023\026\030\027\035\046\042\011\050" +
    "\043\055\031\062\044\067\005\074\041\076\007\001\001" +
    "\000\030\021\u013a\023\026\030\027\035\046\042\011\050" +
    "\043\055\031\062\044\067\005\074\041\076\007\001\001" +
    "\000\002\001\001\000\004\100\u0147\001\001\000\002\001" +
    "\001\000\004\112\u0149\001\001\000\002\001\001\000\004" +
    "\003\u014b\001\001\000\002\001\001\000\004\113\u014d\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\104\u0151\001\001\000\002\001\001\000\004\114" +
    "\u0153\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\002\u015b\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\115\u015f\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$ParserDashb$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$ParserDashb$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$ParserDashb$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$ParserDashb$actions {


    private void print(String texto){ System.out.print(texto); } 

  private final ParserDashb parser;

  /** Constructor */
  CUP$ParserDashb$actions(ParserDashb parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$ParserDashb$do_action_part00000000(
    int                        CUP$ParserDashb$act_num,
    java_cup.runtime.lr_parser CUP$ParserDashb$parser,
    java.util.Stack            CUP$ParserDashb$stack,
    int                        CUP$ParserDashb$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$ParserDashb$result;

      /* select the action based on the action number */
      switch (CUP$ParserDashb$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= dashboard EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-1)).right;
		ArrayList<Par> start_val = (ArrayList<Par>)((java_cup.runtime.Symbol) CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-1)).value;
		RESULT = start_val;
              CUP$ParserDashb$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-1)), ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$ParserDashb$parser.done_parsing();
          return CUP$ParserDashb$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // dashboard ::= IZQLLAVE content DERLLAVE 
            {
              ArrayList<Par> RESULT =null;
		int w1left = ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-1)).left;
		int w1right = ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-1)).right;
		ArrayList<Par> w1 = (ArrayList<Par>)((java_cup.runtime.Symbol) CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-1)).value;
		 RESULT=w1; 
              CUP$ParserDashb$result = parser.getSymbolFactory().newSymbol("dashboard",8, ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-2)), ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), RESULT);
            }
          return CUP$ParserDashb$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // content ::= properties content2 
            {
              ArrayList<Par> RESULT =null;
		int w1left = ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-1)).left;
		int w1right = ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-1)).right;
		ArrayList<Par> w1 = (ArrayList<Par>)((java_cup.runtime.Symbol) CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-1)).value;
		int w2left = ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()).left;
		int w2right = ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()).right;
		ArrayList<Par> w2 = (ArrayList<Par>)((java_cup.runtime.Symbol) CUP$ParserDashb$stack.peek()).value;
		 w2.add(new Par(Index.SD_PROPERTY,w1)); RESULT=w2; 
              CUP$ParserDashb$result = parser.getSymbolFactory().newSymbol("content",9, ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-1)), ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), RESULT);
            }
          return CUP$ParserDashb$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // content ::= graficos content3 
            {
              ArrayList<Par> RESULT =null;
		int w1left = ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-1)).left;
		int w1right = ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-1)).right;
		ArrayList<Object> w1 = (ArrayList<Object>)((java_cup.runtime.Symbol) CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-1)).value;
		int w2left = ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()).left;
		int w2right = ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()).right;
		ArrayList<Par> w2 = (ArrayList<Par>)((java_cup.runtime.Symbol) CUP$ParserDashb$stack.peek()).value;
		 w2.add(new Par(Index.SD_GRAFICOS,w1)); RESULT=w2; 
              CUP$ParserDashb$result = parser.getSymbolFactory().newSymbol("content",9, ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-1)), ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), RESULT);
            }
          return CUP$ParserDashb$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // content2 ::= graficos 
            {
              ArrayList<Par> RESULT =null;
		int w1left = ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()).left;
		int w1right = ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()).right;
		ArrayList<Object> w1 = (ArrayList<Object>)((java_cup.runtime.Symbol) CUP$ParserDashb$stack.peek()).value;
		 ArrayList<Par> list= new ArrayList<>(); list.add(new Par(Index.SD_GRAFICOS,w1)); RESULT=list; 
              CUP$ParserDashb$result = parser.getSymbolFactory().newSymbol("content2",10, ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), RESULT);
            }
          return CUP$ParserDashb$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // content2 ::= content2 properties graficos 
            {
              ArrayList<Par> RESULT =null;
		int w1left = ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-2)).left;
		int w1right = ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-2)).right;
		ArrayList<Par> w1 = (ArrayList<Par>)((java_cup.runtime.Symbol) CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-2)).value;
		int w2left = ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-1)).left;
		int w2right = ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-1)).right;
		ArrayList<Par> w2 = (ArrayList<Par>)((java_cup.runtime.Symbol) CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-1)).value;
		int w3left = ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()).left;
		int w3right = ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()).right;
		ArrayList<Object> w3 = (ArrayList<Object>)((java_cup.runtime.Symbol) CUP$ParserDashb$stack.peek()).value;
		 w1.add(new Par(Index.SD_PROPERTY,w2)); w1.add(new Par(Index.SD_GRAFICOS,w3)); RESULT=w1; 
              CUP$ParserDashb$result = parser.getSymbolFactory().newSymbol("content2",10, ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-2)), ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), RESULT);
            }
          return CUP$ParserDashb$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // content3 ::= properties 
            {
              ArrayList<Par> RESULT =null;
		int w1left = ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()).left;
		int w1right = ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()).right;
		ArrayList<Par> w1 = (ArrayList<Par>)((java_cup.runtime.Symbol) CUP$ParserDashb$stack.peek()).value;
		 ArrayList<Par> list= new ArrayList<>(); list.add(new Par(Index.SD_PROPERTY,w1)); RESULT=list; 
              CUP$ParserDashb$result = parser.getSymbolFactory().newSymbol("content3",11, ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), RESULT);
            }
          return CUP$ParserDashb$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // content3 ::= content3 graficos properties 
            {
              ArrayList<Par> RESULT =null;
		int w1left = ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-2)).left;
		int w1right = ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-2)).right;
		ArrayList<Par> w1 = (ArrayList<Par>)((java_cup.runtime.Symbol) CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-2)).value;
		int w2left = ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-1)).left;
		int w2right = ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-1)).right;
		ArrayList<Object> w2 = (ArrayList<Object>)((java_cup.runtime.Symbol) CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-1)).value;
		int w3left = ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()).left;
		int w3right = ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()).right;
		ArrayList<Par> w3 = (ArrayList<Par>)((java_cup.runtime.Symbol) CUP$ParserDashb$stack.peek()).value;
		 w1.add(new Par(Index.SD_GRAFICOS,w2)); w1.add(new Par(Index.SD_PROPERTY,w3)); RESULT=w1; 
              CUP$ParserDashb$result = parser.getSymbolFactory().newSymbol("content3",11, ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-2)), ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), RESULT);
            }
          return CUP$ParserDashb$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // properties ::= property 
            {
              ArrayList<Par> RESULT =null;
		int w1left = ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()).left;
		int w1right = ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()).right;
		Par w1 = (Par)((java_cup.runtime.Symbol) CUP$ParserDashb$stack.peek()).value;
		 ArrayList<Par> list= new ArrayList<>(); list.add(w1); RESULT=list; 
              CUP$ParserDashb$result = parser.getSymbolFactory().newSymbol("properties",12, ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), RESULT);
            }
          return CUP$ParserDashb$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // properties ::= propertyList property 
            {
              ArrayList<Par> RESULT =null;
		int w1left = ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-1)).left;
		int w1right = ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-1)).right;
		ArrayList<Par> w1 = (ArrayList<Par>)((java_cup.runtime.Symbol) CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-1)).value;
		int w2left = ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()).left;
		int w2right = ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()).right;
		Par w2 = (Par)((java_cup.runtime.Symbol) CUP$ParserDashb$stack.peek()).value;
		 w1.add(w2); RESULT=w1; 
              CUP$ParserDashb$result = parser.getSymbolFactory().newSymbol("properties",12, ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-1)), ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), RESULT);
            }
          return CUP$ParserDashb$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // property ::= title 
            {
              Par RESULT =null;
		int w1left = ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()).left;
		int w1right = ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()).right;
		String w1 = (String)((java_cup.runtime.Symbol) CUP$ParserDashb$stack.peek()).value;
		 RESULT= new Par(Index.KD_TITLE,w1); 
              CUP$ParserDashb$result = parser.getSymbolFactory().newSymbol("property",14, ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), RESULT);
            }
          return CUP$ParserDashb$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // property ::= description 
            {
              Par RESULT =null;
		int w1left = ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()).left;
		int w1right = ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()).right;
		String w1 = (String)((java_cup.runtime.Symbol) CUP$ParserDashb$stack.peek()).value;
		 RESULT= new Par(Index.KD_DESCRIP,w1); 
              CUP$ParserDashb$result = parser.getSymbolFactory().newSymbol("property",14, ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), RESULT);
            }
          return CUP$ParserDashb$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // property ::= keywords 
            {
              Par RESULT =null;
		int w1left = ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()).left;
		int w1right = ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()).right;
		String w1 = (String)((java_cup.runtime.Symbol) CUP$ParserDashb$stack.peek()).value;
		 RESULT= new Par(Index.KD_KEYWORDS,w1); 
              CUP$ParserDashb$result = parser.getSymbolFactory().newSymbol("property",14, ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), RESULT);
            }
          return CUP$ParserDashb$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // property ::= header 
            {
              Par RESULT =null;
		int w1left = ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()).left;
		int w1right = ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()).right;
		String w1 = (String)((java_cup.runtime.Symbol) CUP$ParserDashb$stack.peek()).value;
		 RESULT= new Par(Index.KD_HEADER,w1); 
              CUP$ParserDashb$result = parser.getSymbolFactory().newSymbol("property",14, ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), RESULT);
            }
          return CUP$ParserDashb$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // property ::= footer 
            {
              Par RESULT =null;
		int w1left = ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()).left;
		int w1right = ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()).right;
		String w1 = (String)((java_cup.runtime.Symbol) CUP$ParserDashb$stack.peek()).value;
		 RESULT= new Par(Index.KD_FOOTER,w1); 
              CUP$ParserDashb$result = parser.getSymbolFactory().newSymbol("property",14, ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), RESULT);
            }
          return CUP$ParserDashb$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // property ::= backgr 
            {
              Par RESULT =null;
		int w1left = ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()).left;
		int w1right = ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()).right;
		String w1 = (String)((java_cup.runtime.Symbol) CUP$ParserDashb$stack.peek()).value;
		 RESULT= new Par(Index.KD_BACKGR,w1); 
              CUP$ParserDashb$result = parser.getSymbolFactory().newSymbol("property",14, ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), RESULT);
            }
          return CUP$ParserDashb$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // property ::= fontFam 
            {
              Par RESULT =null;
		int w1left = ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()).left;
		int w1right = ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()).right;
		String w1 = (String)((java_cup.runtime.Symbol) CUP$ParserDashb$stack.peek()).value;
		 RESULT= new Par(Index.KD_FONTFAM,w1); 
              CUP$ParserDashb$result = parser.getSymbolFactory().newSymbol("property",14, ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), RESULT);
            }
          return CUP$ParserDashb$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // property ::= fontSize 
            {
              Par RESULT =null;
		int w1left = ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()).left;
		int w1right = ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()).right;
		String w1 = (String)((java_cup.runtime.Symbol) CUP$ParserDashb$stack.peek()).value;
		 RESULT= new Par(Index.KD_FONTSIZE,w1); 
              CUP$ParserDashb$result = parser.getSymbolFactory().newSymbol("property",14, ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), RESULT);
            }
          return CUP$ParserDashb$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // propertyList ::= property COMA 
            {
              ArrayList<Par> RESULT =null;
		int w1left = ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-1)).left;
		int w1right = ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-1)).right;
		Par w1 = (Par)((java_cup.runtime.Symbol) CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-1)).value;
		 ArrayList<Par> list= new ArrayList<>(); list.add(w1); RESULT=list; 
              CUP$ParserDashb$result = parser.getSymbolFactory().newSymbol("propertyList",13, ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-1)), ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), RESULT);
            }
          return CUP$ParserDashb$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // propertyList ::= propertyList property COMA 
            {
              ArrayList<Par> RESULT =null;
		int w1left = ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-2)).left;
		int w1right = ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-2)).right;
		ArrayList<Par> w1 = (ArrayList<Par>)((java_cup.runtime.Symbol) CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-2)).value;
		int w2left = ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-1)).left;
		int w2right = ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-1)).right;
		Par w2 = (Par)((java_cup.runtime.Symbol) CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-1)).value;
		 w1.add(w2); RESULT=w1; 
              CUP$ParserDashb$result = parser.getSymbolFactory().newSymbol("propertyList",13, ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-2)), ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), RESULT);
            }
          return CUP$ParserDashb$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // graficos ::= grafico 
            {
              ArrayList<Object> RESULT =null;
		int w1left = ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()).left;
		int w1right = ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()).right;
		Object w1 = (Object)((java_cup.runtime.Symbol) CUP$ParserDashb$stack.peek()).value;
		 ArrayList<Object> list = new ArrayList<>(); list.add(w1); RESULT=list; 
              CUP$ParserDashb$result = parser.getSymbolFactory().newSymbol("graficos",16, ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), RESULT);
            }
          return CUP$ParserDashb$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // graficos ::= graficos grafico 
            {
              ArrayList<Object> RESULT =null;
		int w1left = ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-1)).left;
		int w1right = ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-1)).right;
		ArrayList<Object> w1 = (ArrayList<Object>)((java_cup.runtime.Symbol) CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-1)).value;
		int w2left = ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()).left;
		int w2right = ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()).right;
		Object w2 = (Object)((java_cup.runtime.Symbol) CUP$ParserDashb$stack.peek()).value;
		 w1.add(w2); RESULT=w1; 
              CUP$ParserDashb$result = parser.getSymbolFactory().newSymbol("graficos",16, ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-1)), ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), RESULT);
            }
          return CUP$ParserDashb$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // grafico ::= barras 
            {
              Object RESULT =null;
		int w1left = ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()).left;
		int w1right = ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()).right;
		Barras w1 = (Barras)((java_cup.runtime.Symbol) CUP$ParserDashb$stack.peek()).value;
		 RESULT=w1; 
              CUP$ParserDashb$result = parser.getSymbolFactory().newSymbol("grafico",15, ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), RESULT);
            }
          return CUP$ParserDashb$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // grafico ::= barrasXt 
            {
              Object RESULT =null;
		int w1left = ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()).left;
		int w1right = ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()).right;
		BarrasXt w1 = (BarrasXt)((java_cup.runtime.Symbol) CUP$ParserDashb$stack.peek()).value;
		 RESULT=w1; 
              CUP$ParserDashb$result = parser.getSymbolFactory().newSymbol("grafico",15, ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), RESULT);
            }
          return CUP$ParserDashb$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // grafico ::= pastel 
            {
              Object RESULT =null;
		int w1left = ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()).left;
		int w1right = ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()).right;
		Object w1 = (Object)((java_cup.runtime.Symbol) CUP$ParserDashb$stack.peek()).value;
		 RESULT=w1; 
              CUP$ParserDashb$result = parser.getSymbolFactory().newSymbol("grafico",15, ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), RESULT);
            }
          return CUP$ParserDashb$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // grafico ::= pastelXt 
            {
              Object RESULT =null;
		int w1left = ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()).left;
		int w1right = ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()).right;
		Object w1 = (Object)((java_cup.runtime.Symbol) CUP$ParserDashb$stack.peek()).value;
		 RESULT=w1; 
              CUP$ParserDashb$result = parser.getSymbolFactory().newSymbol("grafico",15, ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), RESULT);
            }
          return CUP$ParserDashb$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // grafico ::= puntos 
            {
              Object RESULT =null;
		int w1left = ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()).left;
		int w1right = ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()).right;
		Object w1 = (Object)((java_cup.runtime.Symbol) CUP$ParserDashb$stack.peek()).value;
		 RESULT=w1; 
              CUP$ParserDashb$result = parser.getSymbolFactory().newSymbol("grafico",15, ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), RESULT);
            }
          return CUP$ParserDashb$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // grafico ::= puntosXt 
            {
              Object RESULT =null;
		int w1left = ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()).left;
		int w1right = ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()).right;
		Object w1 = (Object)((java_cup.runtime.Symbol) CUP$ParserDashb$stack.peek()).value;
		 RESULT=w1; 
              CUP$ParserDashb$result = parser.getSymbolFactory().newSymbol("grafico",15, ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), RESULT);
            }
          return CUP$ParserDashb$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // grafico ::= lineas 
            {
              Object RESULT =null;
		int w1left = ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()).left;
		int w1right = ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()).right;
		Object w1 = (Object)((java_cup.runtime.Symbol) CUP$ParserDashb$stack.peek()).value;
		 RESULT=w1; 
              CUP$ParserDashb$result = parser.getSymbolFactory().newSymbol("grafico",15, ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), RESULT);
            }
          return CUP$ParserDashb$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // grafico ::= lineasXt 
            {
              Object RESULT =null;
		int w1left = ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()).left;
		int w1right = ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()).right;
		Object w1 = (Object)((java_cup.runtime.Symbol) CUP$ParserDashb$stack.peek()).value;
		 RESULT=w1; 
              CUP$ParserDashb$result = parser.getSymbolFactory().newSymbol("grafico",15, ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), RESULT);
            }
          return CUP$ParserDashb$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // grafico ::= tarjeta 
            {
              Object RESULT =null;
		int w1left = ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()).left;
		int w1right = ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()).right;
		Object w1 = (Object)((java_cup.runtime.Symbol) CUP$ParserDashb$stack.peek()).value;
		 RESULT=w1; 
              CUP$ParserDashb$result = parser.getSymbolFactory().newSymbol("grafico",15, ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), RESULT);
            }
          return CUP$ParserDashb$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // grafico ::= tarjetaXt 
            {
              Object RESULT =null;
		int w1left = ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()).left;
		int w1right = ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()).right;
		Object w1 = (Object)((java_cup.runtime.Symbol) CUP$ParserDashb$stack.peek()).value;
		 RESULT=w1; 
              CUP$ParserDashb$result = parser.getSymbolFactory().newSymbol("grafico",15, ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), RESULT);
            }
          return CUP$ParserDashb$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // grafico ::= error DERLLAVE 
            {
              Object RESULT =null;
		 RESULT=null; 
              CUP$ParserDashb$result = parser.getSymbolFactory().newSymbol("grafico",15, ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-1)), ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), RESULT);
            }
          return CUP$ParserDashb$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // barras ::= IZQLLAVE barrasData DERLLAVE 
            {
              Barras RESULT =null;
		int w1left = ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-1)).left;
		int w1right = ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-1)).right;
		ArrayList<Barras.Data> w1 = (ArrayList<Barras.Data>)((java_cup.runtime.Symbol) CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-1)).value;
		 RESULT= new Barras(w1); 
              CUP$ParserDashb$result = parser.getSymbolFactory().newSymbol("barras",17, ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-2)), ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), RESULT);
            }
          return CUP$ParserDashb$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // barrasData ::= KD_DATA IZQCORCH barrasDataList DERCORCH 
            {
              ArrayList<Barras.Data> RESULT =null;
		int w1left = ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-1)).left;
		int w1right = ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-1)).right;
		ArrayList<Barras.Data> w1 = (ArrayList<Barras.Data>)((java_cup.runtime.Symbol) CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-1)).value;
		 RESULT=w1; 
              CUP$ParserDashb$result = parser.getSymbolFactory().newSymbol("barrasData",19, ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-3)), ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), RESULT);
            }
          return CUP$ParserDashb$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // barrasDataList ::= barrasDataValue 
            {
              ArrayList<Barras.Data> RESULT =null;
		int w1left = ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()).left;
		int w1right = ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()).right;
		Barras.Data w1 = (Barras.Data)((java_cup.runtime.Symbol) CUP$ParserDashb$stack.peek()).value;
		 ArrayList<Barras.Data> list = new ArrayList<>(); list.add(w1); RESULT=list; 
              CUP$ParserDashb$result = parser.getSymbolFactory().newSymbol("barrasDataList",20, ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), RESULT);
            }
          return CUP$ParserDashb$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // barrasDataList ::= barrasDataList2 barrasDataValue 
            {
              ArrayList<Barras.Data> RESULT =null;
		int w1left = ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-1)).left;
		int w1right = ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-1)).right;
		ArrayList<Barras.Data> w1 = (ArrayList<Barras.Data>)((java_cup.runtime.Symbol) CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-1)).value;
		int w2left = ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()).left;
		int w2right = ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()).right;
		Barras.Data w2 = (Barras.Data)((java_cup.runtime.Symbol) CUP$ParserDashb$stack.peek()).value;
		 w1.add(w2); RESULT=w1; 
              CUP$ParserDashb$result = parser.getSymbolFactory().newSymbol("barrasDataList",20, ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-1)), ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), RESULT);
            }
          return CUP$ParserDashb$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // barrasDataValue ::= IZQLLAVE category COMA value DERLLAVE 
            {
              Barras.Data RESULT =null;
		int w1left = ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-3)).left;
		int w1right = ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-3)).right;
		String w1 = (String)((java_cup.runtime.Symbol) CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-3)).value;
		int w2left = ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-1)).left;
		int w2right = ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-1)).right;
		String w2 = (String)((java_cup.runtime.Symbol) CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-1)).value;
		 RESULT= new Barras.Data(w1,w2); 
              CUP$ParserDashb$result = parser.getSymbolFactory().newSymbol("barrasDataValue",18, ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-4)), ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), RESULT);
            }
          return CUP$ParserDashb$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // barrasDataValue ::= IZQLLAVE value COMA category DERLLAVE 
            {
              Barras.Data RESULT =null;
		int w2left = ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-3)).left;
		int w2right = ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-3)).right;
		String w2 = (String)((java_cup.runtime.Symbol) CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-3)).value;
		int w1left = ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-1)).left;
		int w1right = ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-1)).right;
		String w1 = (String)((java_cup.runtime.Symbol) CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-1)).value;
		 RESULT= new Barras.Data(w1,w2); 
              CUP$ParserDashb$result = parser.getSymbolFactory().newSymbol("barrasDataValue",18, ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-4)), ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), RESULT);
            }
          return CUP$ParserDashb$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // barrasDataList2 ::= barrasDataValue COMA 
            {
              ArrayList<Barras.Data> RESULT =null;
		int w1left = ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-1)).left;
		int w1right = ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-1)).right;
		Barras.Data w1 = (Barras.Data)((java_cup.runtime.Symbol) CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-1)).value;
		 ArrayList<Barras.Data> list = new ArrayList<>(); list.add(w1); RESULT=list; 
              CUP$ParserDashb$result = parser.getSymbolFactory().newSymbol("barrasDataList2",21, ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-1)), ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), RESULT);
            }
          return CUP$ParserDashb$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // barrasDataList2 ::= barrasDataList2 barrasDataValue COMA 
            {
              ArrayList<Barras.Data> RESULT =null;
		int w1left = ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-2)).left;
		int w1right = ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-2)).right;
		ArrayList<Barras.Data> w1 = (ArrayList<Barras.Data>)((java_cup.runtime.Symbol) CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-2)).value;
		int w2left = ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-1)).left;
		int w2right = ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-1)).right;
		Barras.Data w2 = (Barras.Data)((java_cup.runtime.Symbol) CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-1)).value;
		 w1.add(w2); RESULT=w1; 
              CUP$ParserDashb$result = parser.getSymbolFactory().newSymbol("barrasDataList2",21, ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-2)), ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), RESULT);
            }
          return CUP$ParserDashb$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // barrasXt ::= IZQLLAVE barrasXtData COMA chart DERLLAVE 
            {
              BarrasXt RESULT =null;
		int w1left = ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-3)).left;
		int w1right = ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-3)).right;
		ArrayList<BarrasXt.Data> w1 = (ArrayList<BarrasXt.Data>)((java_cup.runtime.Symbol) CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-3)).value;
		int w2left = ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-1)).left;
		int w2right = ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-1)).right;
		Chart1 w2 = (Chart1)((java_cup.runtime.Symbol) CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-1)).value;
		 RESULT= new BarrasXt(w1,w2); 
              CUP$ParserDashb$result = parser.getSymbolFactory().newSymbol("barrasXt",22, ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-4)), ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), RESULT);
            }
          return CUP$ParserDashb$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // barrasXtData ::= KD_DATA IZQCORCH barrasXtDataList DERCORCH 
            {
              ArrayList<BarrasXt.Data> RESULT =null;
		int w1left = ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-1)).left;
		int w1right = ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-1)).right;
		ArrayList<BarrasXt.Data> w1 = (ArrayList<BarrasXt.Data>)((java_cup.runtime.Symbol) CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-1)).value;
		 RESULT=w1; 
              CUP$ParserDashb$result = parser.getSymbolFactory().newSymbol("barrasXtData",24, ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-3)), ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), RESULT);
            }
          return CUP$ParserDashb$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // barrasXtDataList ::= barrasXtDataValue 
            {
              ArrayList<BarrasXt.Data> RESULT =null;
		int w1left = ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()).left;
		int w1right = ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()).right;
		BarrasXt.Data w1 = (BarrasXt.Data)((java_cup.runtime.Symbol) CUP$ParserDashb$stack.peek()).value;
		 ArrayList<BarrasXt.Data> list = new ArrayList<>(); list.add(w1); RESULT=list; 
              CUP$ParserDashb$result = parser.getSymbolFactory().newSymbol("barrasXtDataList",25, ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), RESULT);
            }
          return CUP$ParserDashb$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // barrasXtDataList ::= barrasXtDataList2 barrasXtDataValue 
            {
              ArrayList<BarrasXt.Data> RESULT =null;
		int w1left = ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-1)).left;
		int w1right = ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-1)).right;
		ArrayList<BarrasXt.Data> w1 = (ArrayList<BarrasXt.Data>)((java_cup.runtime.Symbol) CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-1)).value;
		int w2left = ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()).left;
		int w2right = ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()).right;
		BarrasXt.Data w2 = (BarrasXt.Data)((java_cup.runtime.Symbol) CUP$ParserDashb$stack.peek()).value;
		 w1.add(w2); RESULT=w1; 
              CUP$ParserDashb$result = parser.getSymbolFactory().newSymbol("barrasXtDataList",25, ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-1)), ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), RESULT);
            }
          return CUP$ParserDashb$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // barrasXtDataValue ::= IZQLLAVE category COMA value COMA color DERLLAVE 
            {
              BarrasXt.Data RESULT =null;
		int w1left = ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-5)).left;
		int w1right = ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-5)).right;
		String w1 = (String)((java_cup.runtime.Symbol) CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-5)).value;
		int w2left = ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-3)).left;
		int w2right = ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-3)).right;
		String w2 = (String)((java_cup.runtime.Symbol) CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-3)).value;
		int w3left = ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-1)).left;
		int w3right = ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-1)).right;
		String w3 = (String)((java_cup.runtime.Symbol) CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-1)).value;
		 RESULT= new BarrasXt.Data(w1,w2,w3); 
              CUP$ParserDashb$result = parser.getSymbolFactory().newSymbol("barrasXtDataValue",23, ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-6)), ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), RESULT);
            }
          return CUP$ParserDashb$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // barrasXtDataValue ::= IZQLLAVE category COMA color COMA value DERLLAVE 
            {
              BarrasXt.Data RESULT =null;
		int w1left = ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-5)).left;
		int w1right = ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-5)).right;
		String w1 = (String)((java_cup.runtime.Symbol) CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-5)).value;
		int w3left = ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-3)).left;
		int w3right = ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-3)).right;
		String w3 = (String)((java_cup.runtime.Symbol) CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-3)).value;
		int w2left = ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-1)).left;
		int w2right = ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-1)).right;
		String w2 = (String)((java_cup.runtime.Symbol) CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-1)).value;
		 RESULT= new BarrasXt.Data(w1,w2,w3); 
              CUP$ParserDashb$result = parser.getSymbolFactory().newSymbol("barrasXtDataValue",23, ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-6)), ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), RESULT);
            }
          return CUP$ParserDashb$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // barrasXtDataValue ::= IZQLLAVE value COMA category COMA color DERLLAVE 
            {
              BarrasXt.Data RESULT =null;
		int w2left = ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-5)).left;
		int w2right = ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-5)).right;
		String w2 = (String)((java_cup.runtime.Symbol) CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-5)).value;
		int w1left = ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-3)).left;
		int w1right = ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-3)).right;
		String w1 = (String)((java_cup.runtime.Symbol) CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-3)).value;
		int w3left = ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-1)).left;
		int w3right = ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-1)).right;
		String w3 = (String)((java_cup.runtime.Symbol) CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-1)).value;
		 RESULT= new BarrasXt.Data(w1,w2,w3); 
              CUP$ParserDashb$result = parser.getSymbolFactory().newSymbol("barrasXtDataValue",23, ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-6)), ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), RESULT);
            }
          return CUP$ParserDashb$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // barrasXtDataValue ::= IZQLLAVE value COMA color COMA category DERLLAVE 
            {
              BarrasXt.Data RESULT =null;
		int w2left = ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-5)).left;
		int w2right = ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-5)).right;
		String w2 = (String)((java_cup.runtime.Symbol) CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-5)).value;
		int w3left = ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-3)).left;
		int w3right = ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-3)).right;
		String w3 = (String)((java_cup.runtime.Symbol) CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-3)).value;
		int w1left = ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-1)).left;
		int w1right = ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-1)).right;
		String w1 = (String)((java_cup.runtime.Symbol) CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-1)).value;
		 RESULT= new BarrasXt.Data(w1,w2,w3); 
              CUP$ParserDashb$result = parser.getSymbolFactory().newSymbol("barrasXtDataValue",23, ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-6)), ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), RESULT);
            }
          return CUP$ParserDashb$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // barrasXtDataValue ::= IZQLLAVE color COMA value COMA category DERLLAVE 
            {
              BarrasXt.Data RESULT =null;
		int w3left = ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-5)).left;
		int w3right = ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-5)).right;
		String w3 = (String)((java_cup.runtime.Symbol) CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-5)).value;
		int w2left = ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-3)).left;
		int w2right = ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-3)).right;
		String w2 = (String)((java_cup.runtime.Symbol) CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-3)).value;
		int w1left = ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-1)).left;
		int w1right = ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-1)).right;
		String w1 = (String)((java_cup.runtime.Symbol) CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-1)).value;
		 RESULT= new BarrasXt.Data(w1,w2,w3); 
              CUP$ParserDashb$result = parser.getSymbolFactory().newSymbol("barrasXtDataValue",23, ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-6)), ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), RESULT);
            }
          return CUP$ParserDashb$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // barrasXtDataValue ::= IZQLLAVE color COMA category COMA value DERLLAVE 
            {
              BarrasXt.Data RESULT =null;
		int w3left = ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-5)).left;
		int w3right = ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-5)).right;
		String w3 = (String)((java_cup.runtime.Symbol) CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-5)).value;
		int w1left = ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-3)).left;
		int w1right = ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-3)).right;
		String w1 = (String)((java_cup.runtime.Symbol) CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-3)).value;
		int w2left = ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-1)).left;
		int w2right = ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-1)).right;
		String w2 = (String)((java_cup.runtime.Symbol) CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-1)).value;
		 RESULT= new BarrasXt.Data(w1,w2,w3); 
              CUP$ParserDashb$result = parser.getSymbolFactory().newSymbol("barrasXtDataValue",23, ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-6)), ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), RESULT);
            }
          return CUP$ParserDashb$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // barrasXtDataList2 ::= barrasXtDataValue COMA 
            {
              ArrayList<BarrasXt.Data> RESULT =null;
		int w1left = ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-1)).left;
		int w1right = ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-1)).right;
		BarrasXt.Data w1 = (BarrasXt.Data)((java_cup.runtime.Symbol) CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-1)).value;
		 ArrayList<BarrasXt.Data> list = new ArrayList<>(); list.add(w1); RESULT=list; 
              CUP$ParserDashb$result = parser.getSymbolFactory().newSymbol("barrasXtDataList2",26, ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-1)), ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), RESULT);
            }
          return CUP$ParserDashb$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // barrasXtDataList2 ::= barrasXtDataList2 barrasXtDataValue COMA 
            {
              ArrayList<BarrasXt.Data> RESULT =null;
		int w1left = ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-2)).left;
		int w1right = ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-2)).right;
		ArrayList<BarrasXt.Data> w1 = (ArrayList<BarrasXt.Data>)((java_cup.runtime.Symbol) CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-2)).value;
		int w2left = ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-1)).left;
		int w2right = ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-1)).right;
		BarrasXt.Data w2 = (BarrasXt.Data)((java_cup.runtime.Symbol) CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-1)).value;
		 w1.add(w2); RESULT=w1; 
              CUP$ParserDashb$result = parser.getSymbolFactory().newSymbol("barrasXtDataList2",26, ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-2)), ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), RESULT);
            }
          return CUP$ParserDashb$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // pastel ::= IZQLLAVE pastelData DERLLAVE 
            {
              Object RESULT =null;

              CUP$ParserDashb$result = parser.getSymbolFactory().newSymbol("pastel",27, ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-2)), ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), RESULT);
            }
          return CUP$ParserDashb$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // pastelData ::= KD_DATA IZQCORCH pastelDataList DERCORCH 
            {
              Object RESULT =null;

              CUP$ParserDashb$result = parser.getSymbolFactory().newSymbol("pastelData",28, ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-3)), ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), RESULT);
            }
          return CUP$ParserDashb$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // pastelDataList ::= pastelDataValue 
            {
              Object RESULT =null;

              CUP$ParserDashb$result = parser.getSymbolFactory().newSymbol("pastelDataList",29, ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), RESULT);
            }
          return CUP$ParserDashb$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // pastelDataList ::= pastelDataList2 pastelDataValue 
            {
              Object RESULT =null;

              CUP$ParserDashb$result = parser.getSymbolFactory().newSymbol("pastelDataList",29, ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-1)), ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), RESULT);
            }
          return CUP$ParserDashb$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // pastelDataValue ::= IZQLLAVE label COMA value DERLLAVE 
            {
              Object RESULT =null;

              CUP$ParserDashb$result = parser.getSymbolFactory().newSymbol("pastelDataValue",31, ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-4)), ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), RESULT);
            }
          return CUP$ParserDashb$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // pastelDataList2 ::= pastelDataValue COMA 
            {
              Object RESULT =null;

              CUP$ParserDashb$result = parser.getSymbolFactory().newSymbol("pastelDataList2",30, ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-1)), ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), RESULT);
            }
          return CUP$ParserDashb$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // pastelDataList2 ::= pastelDataList2 pastelDataValue COMA 
            {
              Object RESULT =null;

              CUP$ParserDashb$result = parser.getSymbolFactory().newSymbol("pastelDataList2",30, ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-2)), ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), RESULT);
            }
          return CUP$ParserDashb$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // pastelXt ::= IZQLLAVE pastelXtData COMA pastelXtChart DERLLAVE 
            {
              Object RESULT =null;

              CUP$ParserDashb$result = parser.getSymbolFactory().newSymbol("pastelXt",32, ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-4)), ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), RESULT);
            }
          return CUP$ParserDashb$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // pastelXtData ::= KD_DATA IZQCORCH pastelXtDataList DERCORCH 
            {
              Object RESULT =null;

              CUP$ParserDashb$result = parser.getSymbolFactory().newSymbol("pastelXtData",33, ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-3)), ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), RESULT);
            }
          return CUP$ParserDashb$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // pastelXtDataList ::= pastelXtDataValue 
            {
              Object RESULT =null;

              CUP$ParserDashb$result = parser.getSymbolFactory().newSymbol("pastelXtDataList",34, ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), RESULT);
            }
          return CUP$ParserDashb$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // pastelXtDataList ::= pastelXtDataList2 pastelXtDataValue 
            {
              Object RESULT =null;

              CUP$ParserDashb$result = parser.getSymbolFactory().newSymbol("pastelXtDataList",34, ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-1)), ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), RESULT);
            }
          return CUP$ParserDashb$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // pastelXtDataValue ::= IZQLLAVE label COMA value COMA color DERLLAVE 
            {
              Object RESULT =null;

              CUP$ParserDashb$result = parser.getSymbolFactory().newSymbol("pastelXtDataValue",36, ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-6)), ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), RESULT);
            }
          return CUP$ParserDashb$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // pastelXtDataList2 ::= pastelXtDataValue COMA 
            {
              Object RESULT =null;

              CUP$ParserDashb$result = parser.getSymbolFactory().newSymbol("pastelXtDataList2",35, ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-1)), ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), RESULT);
            }
          return CUP$ParserDashb$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // pastelXtDataList2 ::= pastelXtDataList2 pastelXtDataValue COMA 
            {
              Object RESULT =null;

              CUP$ParserDashb$result = parser.getSymbolFactory().newSymbol("pastelXtDataList2",35, ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-2)), ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), RESULT);
            }
          return CUP$ParserDashb$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // puntos ::= IZQLLAVE puntosData DERLLAVE 
            {
              Object RESULT =null;

              CUP$ParserDashb$result = parser.getSymbolFactory().newSymbol("puntos",38, ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-2)), ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), RESULT);
            }
          return CUP$ParserDashb$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // puntosData ::= KD_DATA IZQCORCH puntosDataList DERCORCH 
            {
              Object RESULT =null;

              CUP$ParserDashb$result = parser.getSymbolFactory().newSymbol("puntosData",39, ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-3)), ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), RESULT);
            }
          return CUP$ParserDashb$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // puntosDataList ::= puntosDataValue 
            {
              Object RESULT =null;

              CUP$ParserDashb$result = parser.getSymbolFactory().newSymbol("puntosDataList",40, ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), RESULT);
            }
          return CUP$ParserDashb$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // puntosDataList ::= puntosDataList2 puntosDataValue 
            {
              Object RESULT =null;

              CUP$ParserDashb$result = parser.getSymbolFactory().newSymbol("puntosDataList",40, ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-1)), ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), RESULT);
            }
          return CUP$ParserDashb$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // puntosDataValue ::= IZQLLAVE xValue COMA yValue DERLLAVE 
            {
              Object RESULT =null;

              CUP$ParserDashb$result = parser.getSymbolFactory().newSymbol("puntosDataValue",42, ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-4)), ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), RESULT);
            }
          return CUP$ParserDashb$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // puntosDataList2 ::= puntosDataValue COMA 
            {
              Object RESULT =null;

              CUP$ParserDashb$result = parser.getSymbolFactory().newSymbol("puntosDataList2",41, ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-1)), ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), RESULT);
            }
          return CUP$ParserDashb$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // puntosDataList2 ::= puntosDataList2 puntosDataValue COMA 
            {
              Object RESULT =null;

              CUP$ParserDashb$result = parser.getSymbolFactory().newSymbol("puntosDataList2",41, ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-2)), ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), RESULT);
            }
          return CUP$ParserDashb$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // puntosXt ::= IZQLLAVE puntosXtData COMA chart DERLLAVE 
            {
              Object RESULT =null;

              CUP$ParserDashb$result = parser.getSymbolFactory().newSymbol("puntosXt",43, ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-4)), ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), RESULT);
            }
          return CUP$ParserDashb$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // puntosXtData ::= KD_DATA IZQCORCH puntosXtDataList DERCORCH 
            {
              Object RESULT =null;

              CUP$ParserDashb$result = parser.getSymbolFactory().newSymbol("puntosXtData",44, ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-3)), ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), RESULT);
            }
          return CUP$ParserDashb$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // puntosXtDataList ::= puntosXtDataValue 
            {
              Object RESULT =null;

              CUP$ParserDashb$result = parser.getSymbolFactory().newSymbol("puntosXtDataList",45, ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), RESULT);
            }
          return CUP$ParserDashb$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // puntosXtDataList ::= puntosXtDataList2 puntosXtDataValue 
            {
              Object RESULT =null;

              CUP$ParserDashb$result = parser.getSymbolFactory().newSymbol("puntosXtDataList",45, ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-1)), ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), RESULT);
            }
          return CUP$ParserDashb$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // puntosXtDataValue ::= IZQLLAVE xValue COMA yValue COMA size COMA color DERLLAVE 
            {
              Object RESULT =null;

              CUP$ParserDashb$result = parser.getSymbolFactory().newSymbol("puntosXtDataValue",47, ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-8)), ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), RESULT);
            }
          return CUP$ParserDashb$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // puntosXtDataList2 ::= puntosXtDataValue COMA 
            {
              Object RESULT =null;

              CUP$ParserDashb$result = parser.getSymbolFactory().newSymbol("puntosXtDataList2",46, ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-1)), ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), RESULT);
            }
          return CUP$ParserDashb$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // puntosXtDataList2 ::= puntosXtDataList2 puntosXtDataValue COMA 
            {
              Object RESULT =null;

              CUP$ParserDashb$result = parser.getSymbolFactory().newSymbol("puntosXtDataList2",46, ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-2)), ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), RESULT);
            }
          return CUP$ParserDashb$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // lineas ::= IZQLLAVE lineasData COMA chart DERLLAVE 
            {
              Object RESULT =null;

              CUP$ParserDashb$result = parser.getSymbolFactory().newSymbol("lineas",48, ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-4)), ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), RESULT);
            }
          return CUP$ParserDashb$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // lineasData ::= KD_DATA IZQCORCH lineasDataList DERCORCH 
            {
              Object RESULT =null;

              CUP$ParserDashb$result = parser.getSymbolFactory().newSymbol("lineasData",49, ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-3)), ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), RESULT);
            }
          return CUP$ParserDashb$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // lineasDataList ::= lineasDataValue 
            {
              Object RESULT =null;

              CUP$ParserDashb$result = parser.getSymbolFactory().newSymbol("lineasDataList",50, ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), RESULT);
            }
          return CUP$ParserDashb$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // lineasDataList ::= lineasDataList2 lineasDataValue 
            {
              Object RESULT =null;

              CUP$ParserDashb$result = parser.getSymbolFactory().newSymbol("lineasDataList",50, ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-1)), ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), RESULT);
            }
          return CUP$ParserDashb$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // lineasDataValue ::= IZQLLAVE name COMA points DERLLAVE 
            {
              Object RESULT =null;

              CUP$ParserDashb$result = parser.getSymbolFactory().newSymbol("lineasDataValue",51, ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-4)), ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), RESULT);
            }
          return CUP$ParserDashb$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // lineasDataList2 ::= lineasDataValue COMA 
            {
              Object RESULT =null;

              CUP$ParserDashb$result = parser.getSymbolFactory().newSymbol("lineasDataList2",52, ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-1)), ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), RESULT);
            }
          return CUP$ParserDashb$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // lineasDataList2 ::= lineasDataList2 lineasDataValue COMA 
            {
              Object RESULT =null;

              CUP$ParserDashb$result = parser.getSymbolFactory().newSymbol("lineasDataList2",52, ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-2)), ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), RESULT);
            }
          return CUP$ParserDashb$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // lineasXt ::= IZQLLAVE lineasXtData COMA chart DERLLAVE 
            {
              Object RESULT =null;

              CUP$ParserDashb$result = parser.getSymbolFactory().newSymbol("lineasXt",53, ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-4)), ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), RESULT);
            }
          return CUP$ParserDashb$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // lineasXtData ::= KD_DATA IZQCORCH lineasXtDataList DERCORCH 
            {
              Object RESULT =null;

              CUP$ParserDashb$result = parser.getSymbolFactory().newSymbol("lineasXtData",54, ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-3)), ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), RESULT);
            }
          return CUP$ParserDashb$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // lineasXtDataList ::= lineasXtDataValue 
            {
              Object RESULT =null;

              CUP$ParserDashb$result = parser.getSymbolFactory().newSymbol("lineasXtDataList",55, ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), RESULT);
            }
          return CUP$ParserDashb$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // lineasXtDataList ::= lineasXtDataList2 lineasXtDataValue 
            {
              Object RESULT =null;

              CUP$ParserDashb$result = parser.getSymbolFactory().newSymbol("lineasXtDataList",55, ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-1)), ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), RESULT);
            }
          return CUP$ParserDashb$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // lineasXtDataValue ::= IZQLLAVE name COMA pointsXt COMA color COMA lineStyle DERLLAVE 
            {
              Object RESULT =null;

              CUP$ParserDashb$result = parser.getSymbolFactory().newSymbol("lineasXtDataValue",56, ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-8)), ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), RESULT);
            }
          return CUP$ParserDashb$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // lineasXtDataList2 ::= lineasXtDataValue COMA 
            {
              Object RESULT =null;

              CUP$ParserDashb$result = parser.getSymbolFactory().newSymbol("lineasXtDataList2",57, ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-1)), ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), RESULT);
            }
          return CUP$ParserDashb$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // lineasXtDataList2 ::= lineasXtDataList2 lineasXtDataValue COMA 
            {
              Object RESULT =null;

              CUP$ParserDashb$result = parser.getSymbolFactory().newSymbol("lineasXtDataList2",57, ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-2)), ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), RESULT);
            }
          return CUP$ParserDashb$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // tarjeta ::= IZQLLAVE tarjetaData DERLLAVE 
            {
              Object RESULT =null;

              CUP$ParserDashb$result = parser.getSymbolFactory().newSymbol("tarjeta",58, ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-2)), ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), RESULT);
            }
          return CUP$ParserDashb$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // tarjetaData ::= KD_DATA IZQLLAVE value COMA label COMA description DERLLAVE 
            {
              Object RESULT =null;

              CUP$ParserDashb$result = parser.getSymbolFactory().newSymbol("tarjetaData",59, ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-7)), ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), RESULT);
            }
          return CUP$ParserDashb$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // tarjetaXt ::= KD_DATA IZQLLAVE value COMA label COMA description COMA icon COMA color COMA link DERLLAVE 
            {
              Object RESULT =null;

              CUP$ParserDashb$result = parser.getSymbolFactory().newSymbol("tarjetaXt",60, ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-13)), ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), RESULT);
            }
          return CUP$ParserDashb$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // title ::= KD_TITLE MI_TEXTO 
            {
              String RESULT =null;
		int w1left = ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()).left;
		int w1right = ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()).right;
		String w1 = (String)((java_cup.runtime.Symbol) CUP$ParserDashb$stack.peek()).value;
		 RESULT=w1; 
              CUP$ParserDashb$result = parser.getSymbolFactory().newSymbol("title",0, ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-1)), ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), RESULT);
            }
          return CUP$ParserDashb$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // description ::= KD_DESCRIP MI_TEXTO 
            {
              String RESULT =null;
		int w1left = ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()).left;
		int w1right = ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()).right;
		String w1 = (String)((java_cup.runtime.Symbol) CUP$ParserDashb$stack.peek()).value;
		 RESULT=w1; 
              CUP$ParserDashb$result = parser.getSymbolFactory().newSymbol("description",1, ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-1)), ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), RESULT);
            }
          return CUP$ParserDashb$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // header ::= KD_HEADER IZQLLAVE title DERLLAVE 
            {
              String RESULT =null;
		int w1left = ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-1)).left;
		int w1right = ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-1)).right;
		String w1 = (String)((java_cup.runtime.Symbol) CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-1)).value;
		 RESULT=w1; 
              CUP$ParserDashb$result = parser.getSymbolFactory().newSymbol("header",3, ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-3)), ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), RESULT);
            }
          return CUP$ParserDashb$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // footer ::= KD_FOOTER IZQLLAVE copyright DERLLAVE 
            {
              String RESULT =null;
		int w1left = ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-1)).left;
		int w1right = ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-1)).right;
		String w1 = (String)((java_cup.runtime.Symbol) CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-1)).value;
		 RESULT=w1; 
              CUP$ParserDashb$result = parser.getSymbolFactory().newSymbol("footer",4, ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-3)), ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), RESULT);
            }
          return CUP$ParserDashb$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // backgr ::= KD_BACKGR MI_COLOR 
            {
              String RESULT =null;
		int w1left = ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()).left;
		int w1right = ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()).right;
		String w1 = (String)((java_cup.runtime.Symbol) CUP$ParserDashb$stack.peek()).value;
		 RESULT=w1; 
              CUP$ParserDashb$result = parser.getSymbolFactory().newSymbol("backgr",5, ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-1)), ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), RESULT);
            }
          return CUP$ParserDashb$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // fontFam ::= KD_FONTFAM MI_TEXTO 
            {
              String RESULT =null;
		int w1left = ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()).left;
		int w1right = ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()).right;
		String w1 = (String)((java_cup.runtime.Symbol) CUP$ParserDashb$stack.peek()).value;
		 RESULT=w1; 
              CUP$ParserDashb$result = parser.getSymbolFactory().newSymbol("fontFam",6, ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-1)), ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), RESULT);
            }
          return CUP$ParserDashb$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // fontSize ::= KD_FONTSIZE MI_TEXTO 
            {
              String RESULT =null;
		int w1left = ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()).left;
		int w1right = ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()).right;
		String w1 = (String)((java_cup.runtime.Symbol) CUP$ParserDashb$stack.peek()).value;
		 RESULT=w1; 
              CUP$ParserDashb$result = parser.getSymbolFactory().newSymbol("fontSize",7, ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-1)), ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), RESULT);
            }
          return CUP$ParserDashb$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // category ::= KD_CATEGORY MI_TEXTO 
            {
              String RESULT =null;
		int w1left = ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()).left;
		int w1right = ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()).right;
		String w1 = (String)((java_cup.runtime.Symbol) CUP$ParserDashb$stack.peek()).value;
		 RESULT=w1; 
              CUP$ParserDashb$result = parser.getSymbolFactory().newSymbol("category",61, ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-1)), ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), RESULT);
            }
          return CUP$ParserDashb$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // value ::= KD_VALUE MI_INTEGER 
            {
              String RESULT =null;
		int w1left = ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()).left;
		int w1right = ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()).right;
		String w1 = (String)((java_cup.runtime.Symbol) CUP$ParserDashb$stack.peek()).value;
		 RESULT=w1; 
              CUP$ParserDashb$result = parser.getSymbolFactory().newSymbol("value",62, ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-1)), ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), RESULT);
            }
          return CUP$ParserDashb$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // color ::= KD_COLOR MI_COLOR 
            {
              String RESULT =null;
		int w1left = ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()).left;
		int w1right = ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()).right;
		String w1 = (String)((java_cup.runtime.Symbol) CUP$ParserDashb$stack.peek()).value;
		 RESULT=w1; 
              CUP$ParserDashb$result = parser.getSymbolFactory().newSymbol("color",66, ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-1)), ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), RESULT);
            }
          return CUP$ParserDashb$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // lineStyle ::= KD_LINE MI_TEXTO 
            {
              Object RESULT =null;
		int w1left = ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()).left;
		int w1right = ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()).right;
		String w1 = (String)((java_cup.runtime.Symbol) CUP$ParserDashb$stack.peek()).value;
		 RESULT=w1; 
              CUP$ParserDashb$result = parser.getSymbolFactory().newSymbol("lineStyle",86, ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-1)), ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), RESULT);
            }
          return CUP$ParserDashb$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // name ::= KD_NAME MI_TEXTO 
            {
              String RESULT =null;
		int w1left = ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()).left;
		int w1right = ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()).right;
		String w1 = (String)((java_cup.runtime.Symbol) CUP$ParserDashb$stack.peek()).value;
		 RESULT=w1; 
              CUP$ParserDashb$result = parser.getSymbolFactory().newSymbol("name",70, ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-1)), ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), RESULT);
            }
          return CUP$ParserDashb$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // label ::= KD_LABEL MI_TEXTO 
            {
              String RESULT =null;
		int w1left = ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()).left;
		int w1right = ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()).right;
		String w1 = (String)((java_cup.runtime.Symbol) CUP$ParserDashb$stack.peek()).value;
		 RESULT=w1; 
              CUP$ParserDashb$result = parser.getSymbolFactory().newSymbol("label",72, ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-1)), ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), RESULT);
            }
          return CUP$ParserDashb$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // icon ::= KD_ICON MI_TEXTO 
            {
              String RESULT =null;
		int w1left = ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()).left;
		int w1right = ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()).right;
		String w1 = (String)((java_cup.runtime.Symbol) CUP$ParserDashb$stack.peek()).value;
		 RESULT=w1; 
              CUP$ParserDashb$result = parser.getSymbolFactory().newSymbol("icon",73, ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-1)), ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), RESULT);
            }
          return CUP$ParserDashb$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // link ::= KD_LINK MI_URL 
            {
              String RESULT =null;
		int w1left = ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()).left;
		int w1right = ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()).right;
		String w1 = (String)((java_cup.runtime.Symbol) CUP$ParserDashb$stack.peek()).value;
		 RESULT=w1; 
              CUP$ParserDashb$result = parser.getSymbolFactory().newSymbol("link",74, ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-1)), ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), RESULT);
            }
          return CUP$ParserDashb$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // copyright ::= KD_COPYR MI_TEXTO 
            {
              String RESULT =null;
		int w1left = ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()).left;
		int w1right = ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()).right;
		String w1 = (String)((java_cup.runtime.Symbol) CUP$ParserDashb$stack.peek()).value;
		 RESULT=w1; 
              CUP$ParserDashb$result = parser.getSymbolFactory().newSymbol("copyright",75, ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-1)), ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), RESULT);
            }
          return CUP$ParserDashb$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // xLabel ::= KD_XLABEL MI_TEXTO 
            {
              String RESULT =null;
		int w1left = ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()).left;
		int w1right = ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()).right;
		String w1 = (String)((java_cup.runtime.Symbol) CUP$ParserDashb$stack.peek()).value;
		 RESULT=w1; 
              CUP$ParserDashb$result = parser.getSymbolFactory().newSymbol("xLabel",64, ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-1)), ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), RESULT);
            }
          return CUP$ParserDashb$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // yLabel ::= KD_YLABEL MI_TEXTO 
            {
              String RESULT =null;
		int w1left = ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()).left;
		int w1right = ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()).right;
		String w1 = (String)((java_cup.runtime.Symbol) CUP$ParserDashb$stack.peek()).value;
		 RESULT=w1; 
              CUP$ParserDashb$result = parser.getSymbolFactory().newSymbol("yLabel",65, ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-1)), ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), RESULT);
            }
          return CUP$ParserDashb$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // legend ::= KD_LEGEND MI_TEXTO 
            {
              String RESULT =null;
		int w1left = ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()).left;
		int w1right = ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()).right;
		String w1 = (String)((java_cup.runtime.Symbol) CUP$ParserDashb$stack.peek()).value;
		 RESULT=w1; 
              CUP$ParserDashb$result = parser.getSymbolFactory().newSymbol("legend",67, ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-1)), ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), RESULT);
            }
          return CUP$ParserDashb$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // xValue ::= KD_X MI_INTEGER 
            {
              String RESULT =null;
		int w1left = ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()).left;
		int w1right = ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()).right;
		String w1 = (String)((java_cup.runtime.Symbol) CUP$ParserDashb$stack.peek()).value;
		 RESULT=w1; 
              CUP$ParserDashb$result = parser.getSymbolFactory().newSymbol("xValue",68, ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-1)), ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), RESULT);
            }
          return CUP$ParserDashb$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // yValue ::= KD_Y MI_INTEGER 
            {
              String RESULT =null;
		int w1left = ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()).left;
		int w1right = ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()).right;
		String w1 = (String)((java_cup.runtime.Symbol) CUP$ParserDashb$stack.peek()).value;
		 RESULT=w1; 
              CUP$ParserDashb$result = parser.getSymbolFactory().newSymbol("yValue",69, ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-1)), ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), RESULT);
            }
          return CUP$ParserDashb$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // size ::= KD_SIZE MI_INTEGER 
            {
              String RESULT =null;
		int w1left = ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()).left;
		int w1right = ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()).right;
		String w1 = (String)((java_cup.runtime.Symbol) CUP$ParserDashb$stack.peek()).value;
		 RESULT=w1; 
              CUP$ParserDashb$result = parser.getSymbolFactory().newSymbol("size",71, ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-1)), ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), RESULT);
            }
          return CUP$ParserDashb$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // chart ::= KD_CHART IZQLLAVE title COMA xLabel COMA yLabel DERLLAVE 
            {
              Chart1 RESULT =null;
		int w1left = ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-5)).left;
		int w1right = ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-5)).right;
		String w1 = (String)((java_cup.runtime.Symbol) CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-5)).value;
		int w2left = ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-3)).left;
		int w2right = ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-3)).right;
		String w2 = (String)((java_cup.runtime.Symbol) CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-3)).value;
		int w3left = ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-1)).left;
		int w3right = ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-1)).right;
		String w3 = (String)((java_cup.runtime.Symbol) CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-1)).value;
		 RESULT= new Chart1(w1,w2,w3); 
              CUP$ParserDashb$result = parser.getSymbolFactory().newSymbol("chart",63, ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-7)), ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), RESULT);
            }
          return CUP$ParserDashb$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // pastelXtChart ::= KD_CHART IZQLLAVE title COMA legend DERLLAVE 
            {
              Object RESULT =null;
		int w1left = ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-3)).left;
		int w1right = ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-3)).right;
		String w1 = (String)((java_cup.runtime.Symbol) CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-3)).value;
		int w2left = ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-1)).left;
		int w2right = ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-1)).right;
		String w2 = (String)((java_cup.runtime.Symbol) CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-1)).value;

              CUP$ParserDashb$result = parser.getSymbolFactory().newSymbol("pastelXtChart",37, ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-5)), ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), RESULT);
            }
          return CUP$ParserDashb$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // keywords ::= KD_KEYWORDS IZQCORCH keywordList DERCORCH 
            {
              String RESULT =null;

              CUP$ParserDashb$result = parser.getSymbolFactory().newSymbol("keywords",2, ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-3)), ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), RESULT);
            }
          return CUP$ParserDashb$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // keywordList ::= 
            {
              Object RESULT =null;

              CUP$ParserDashb$result = parser.getSymbolFactory().newSymbol("keywordList",76, ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), RESULT);
            }
          return CUP$ParserDashb$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // keywordList ::= MI_TEXTO 
            {
              Object RESULT =null;

              CUP$ParserDashb$result = parser.getSymbolFactory().newSymbol("keywordList",76, ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), RESULT);
            }
          return CUP$ParserDashb$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // keywordList ::= keywordList2 MI_TEXTO 
            {
              Object RESULT =null;

              CUP$ParserDashb$result = parser.getSymbolFactory().newSymbol("keywordList",76, ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-1)), ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), RESULT);
            }
          return CUP$ParserDashb$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // keywordList2 ::= MI_TEXTO COMA 
            {
              Object RESULT =null;

              CUP$ParserDashb$result = parser.getSymbolFactory().newSymbol("keywordList2",77, ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-1)), ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), RESULT);
            }
          return CUP$ParserDashb$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // keywordList2 ::= keywordList2 MI_TEXTO COMA 
            {
              Object RESULT =null;

              CUP$ParserDashb$result = parser.getSymbolFactory().newSymbol("keywordList2",77, ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-2)), ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), RESULT);
            }
          return CUP$ParserDashb$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // points ::= KD_PONTS IZQCORCH pointList DERCORCH 
            {
              Object RESULT =null;

              CUP$ParserDashb$result = parser.getSymbolFactory().newSymbol("points",78, ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-3)), ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), RESULT);
            }
          return CUP$ParserDashb$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // pointList ::= pointValue 
            {
              Object RESULT =null;

              CUP$ParserDashb$result = parser.getSymbolFactory().newSymbol("pointList",79, ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), RESULT);
            }
          return CUP$ParserDashb$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // pointList ::= pointList2 pointValue 
            {
              Object RESULT =null;

              CUP$ParserDashb$result = parser.getSymbolFactory().newSymbol("pointList",79, ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-1)), ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), RESULT);
            }
          return CUP$ParserDashb$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // pointValue ::= IZQLLAVE xValue COMA yValue DERLLAVE 
            {
              Object RESULT =null;

              CUP$ParserDashb$result = parser.getSymbolFactory().newSymbol("pointValue",80, ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-4)), ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), RESULT);
            }
          return CUP$ParserDashb$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // pointList2 ::= pointValue COMA 
            {
              Object RESULT =null;

              CUP$ParserDashb$result = parser.getSymbolFactory().newSymbol("pointList2",81, ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-1)), ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), RESULT);
            }
          return CUP$ParserDashb$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // pointList2 ::= pointList2 pointValue COMA 
            {
              Object RESULT =null;

              CUP$ParserDashb$result = parser.getSymbolFactory().newSymbol("pointList2",81, ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-2)), ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), RESULT);
            }
          return CUP$ParserDashb$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // pointsXt ::= KD_PONTS IZQCORCH pointXtList DERCORCH 
            {
              Object RESULT =null;

              CUP$ParserDashb$result = parser.getSymbolFactory().newSymbol("pointsXt",82, ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-3)), ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), RESULT);
            }
          return CUP$ParserDashb$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // pointXtList ::= pointXtValue 
            {
              Object RESULT =null;

              CUP$ParserDashb$result = parser.getSymbolFactory().newSymbol("pointXtList",83, ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), RESULT);
            }
          return CUP$ParserDashb$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // pointXtList ::= pointXtList2 pointXtValue 
            {
              Object RESULT =null;

              CUP$ParserDashb$result = parser.getSymbolFactory().newSymbol("pointXtList",83, ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-1)), ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), RESULT);
            }
          return CUP$ParserDashb$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // pointXtList2 ::= pointXtValue COMA 
            {
              Object RESULT =null;

              CUP$ParserDashb$result = parser.getSymbolFactory().newSymbol("pointXtList2",84, ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-1)), ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), RESULT);
            }
          return CUP$ParserDashb$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // pointXtList2 ::= pointXtList2 pointXtValue COMA 
            {
              Object RESULT =null;

              CUP$ParserDashb$result = parser.getSymbolFactory().newSymbol("pointXtList2",84, ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-2)), ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), RESULT);
            }
          return CUP$ParserDashb$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // pointXtValue ::= IZQLLAVE xValue COMA yValue COMA label DERLLAVE 
            {
              Object RESULT =null;

              CUP$ParserDashb$result = parser.getSymbolFactory().newSymbol("pointXtValue",85, ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.elementAt(CUP$ParserDashb$top-6)), ((java_cup.runtime.Symbol)CUP$ParserDashb$stack.peek()), RESULT);
            }
          return CUP$ParserDashb$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$ParserDashb$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$ParserDashb$do_action(
    int                        CUP$ParserDashb$act_num,
    java_cup.runtime.lr_parser CUP$ParserDashb$parser,
    java.util.Stack            CUP$ParserDashb$stack,
    int                        CUP$ParserDashb$top)
    throws java.lang.Exception
    {
              return CUP$ParserDashb$do_action_part00000000(
                               CUP$ParserDashb$act_num,
                               CUP$ParserDashb$parser,
                               CUP$ParserDashb$stack,
                               CUP$ParserDashb$top);
    }
}

}
